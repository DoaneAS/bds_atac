#!/usr/bin/env bds
#vim: syntax=java


// Functions usually have the following structure. Output naming policy is included in the function.
// They find prefix of input and add suffix to output and then change output's directory (o_dir).
// Therefore, output naming is already defined in each file. e.g. in bwa, PREFIX.fastq.gz -> PREFIX.bam
// e.g. output (string or array of str.) = _do_something( input1, input2, ... , o_dir, info )

// Don't be confused with additional code lines for each underscored( _ ) function and 'hrchy' and 'graph' things.
// They are for automatic generation of graphviz diagram and HTML filetable

// Variables can be declared with help context, they are automatically set as 'parameter variables' and become parameters on shell command line.
// You can omit type of variable with ':='. e.g. str1 := "abc" is equivalent to string str1 = "abc".

// Important file names are stored in global variables (usually a string map string{} with a key with replicate id and peakcaller name)
// e.g. filt_bam{"1"} = filtered bam for replicate 1, peak_pr1{"2"} = peak file for pseudo replicate 1 of replicate 2 generated from spp



help == atac pipeline settings

se 		:= false 	help Single ended data.
trimmed_fastq 	:= false	help Skip fastq-trimming stage.
mapping	 	:= false	help Mapping only (no macs2 peak calling or IDR).
vplot 		:= false 	help Create V plot.
preseq 		:= false 	help Do preseq analysis.
subsample 	:= 0 		help # of reads to subsample replicates. Subsampled tagalign will be used for steps downstream (default: 0; no subsampling). 
true_rep 	:= false 	help No pseudo-replicates.
no_idr 		:= false 	help No IDR analysis on called peaks. This will change p-value threshold (0.1->0.01) in MACS2 peak calling.
no_ataqc 	:= false 	help No ATAQC 
csem	 	:= false	help Use CSEM for alignment.
mem_ataqc 	:= "8G"		help Max. memory for ATAQC (default: 8G).
smooth_win 	:= "150" 	help Smoothing window size for MACS2 peak calling (default: 150).
dnase_seq	:= false  	help DNase-Seq (no tn5 shifting, subsampling 50M by default for cross-corr. analysis).

//ataqc(parameters to be defined: species, blacklist, dnase, tss, prom, enh, reg2map and roadmap_meta).


help() // show help contexts

include "modules/input_fastq.bds"
include "modules/input_bam.bds"
include "modules/align_bowtie2.bds"
include "modules/align_etc.bds"
include "modules/vplot.bds"
include "modules/postalign_bam.bds"
include "modules/postalign_bed.bds"
include "modules/preseq.bds"
include "modules/callpeak_macs2.bds"
include "modules/callpeak_etc.bds"
include "modules/idr.bds"
include "modules/report.bds"


input := ""
max_callpeak 	:= 1	// maximum # of peak calling in parallel

// Global variable for output filenames ( map with key $rep )
string{} fastq, align_log, bam, filt_bam, dup_qc, flagstat_nodup_qc, pbc_qc, xcor_qc, xcor_plot

string{} shifted_tag, shifted_tag_pr1, shifted_tag_pr2

string{} peak, peak_pr1, peak_pr2
string peak_pooled, peak_ppr1, peak_ppr2, peak_overlap
string{} pval_bigwig, fc_bigwig

string idr_tr, idr_pr_rep1, idr_pr_rep2, idr_ppr, idr_opt, idr_consv
string idr_tr_png, idr_pr_rep1_png, idr_pr_rep2_png, idr_ppr_png
string idr_qc


init_atac()

chk_input_data()

atac()

post_atac()

do_idr()

report()


void init_atac() {
	
	if ( is_input_legacy() ) { // legacy input method taking first 8 parameters from cmd. line

		bwt2_idx 	= args[0].trim()
		fastq1_1	= args[1].trim()
		fastq1_2	= args[2].trim()
		nth_bwt2	= args[3].trim().parseInt()
		gensz		= args[4].trim()
		chrsz		= args[5].trim()
		vplot_idx 	= args[6].trim()
		out_dir 	= args[7].trim()

		se 		= false

		vplot 		= true
		preseq 		= true

		mapping 	= false

		true_rep 	= true
		no_ataqc	= true

		csem 		= false

		input 		= "fastq"

		no_idr 		= true
	
		print("\n\nLegacy input method found (8 parameters)\n")
		print("========================================\n")
		print( "Bowtie2 index\t\t: $bwt2_idx\n" )
		print( "Read 1\t\t\t: $fastq1_1\n" )
		print( "Read 2\t\t\t: $fastq1_2\n" )
		print( "# threads (bowtie2)\t: $nth_bwt2\n")
		print( "Genome size (hs,mm)\t: $gensz\n" )
		print( "Chromosome sizes file\t: $chrsz\n" )
		print( "V-Plot index\t\t: $vplot_idx\n" )
		print( "Output dir.\t\t: $out_dir\n" )		
	}
	else {
		se 		= get_conf_val_bool( se,		["se"] )

		trimmed_fastq 	= get_conf_val_bool( trimmed_fastq,	["trimmed_fastq"] )

		mapping		= get_conf_val_bool( mapping,		["mapping"] )

		vplot 		= get_conf_val_bool( vplot,		["vplot"] )
		preseq 		= get_conf_val_bool( preseq,		["preseq"] )
		subsample	= get_conf_val_int( subsample, 		["subsample"] )
		true_rep	= get_conf_val_bool( true_rep, 		["true_rep"] )

		no_idr 		= get_conf_val_bool( no_idr, 		["no_idr"] )
		no_ataqc 	= get_conf_val_bool( no_ataqc, 		["no_ataqc"] )

		csem 		= get_conf_val_bool( csem, 		["csem"] )

		mem_ataqc	= get_conf_val( mem_ataqc,		["mem_ataqc"] )

		smooth_win	= get_conf_val( smooth_win,		["smooth_win"] )

		dnase_seq 	= get_conf_val_bool( dnase_seq, 	["dnase_seq"] )
	}

	if ( input == "" ) { // determine input type
		
		if ( get_filt_bam(0,1) != "" ) 	input = "filt_bam"
		if ( get_bam(0,1) != "" ) 	input = "bam"
		if ( get_fastq(0,1,1) != "" ) 	input = "fastq"
	}

	fraglen0 = true // set fragment length as zero for cross corr. analysis

	rm_chr_from_tag = "chrM"; // remove lines with chrM in _bam_to_tag

	calc_max_callpeak()

	print_atac()
}

void calc_max_callpeak() {

	real r1 = peaks_in_par
	real r2 = reps_in_par
	
	max_callpeak = round( ceil( r1/r2 ) )
}

void print_atac() {

	print( "\n\n== atac pipeline settings\n")
	print( "Single ended data set?\t: $se\n")
	print( "Input data type\t\t: $input\n")		
	print( "Fastqs are trimmed?\t: $trimmed_fastq\n")
	print( "# Replicates\t\t: "+ get_num_rep() + "\n")
	print( "MACS2 peak calling\t: " + !mapping + "\n")
	print( "Subsample # lines replicates (0 if no subsampling)\t: $subsample\n")
	print( "No pseudo replicates\t: $true_rep\n")
	print( "No IDR analysis on peaks\t: $no_idr\n")
	print( "Vplot generation\t: $vplot\n")
	print( "Preseq analysis\t\t: $preseq\n")
	print( "No ATAQC (advanced QC report including vplot and preseq)\t: $no_ataqc\n")
	print( "Use CSEM for alignment\t: $csem\n")
	print( "Max. memory for ATAQC\t: $mem_ataqc\n")
	print( "Smoothing window for MACS2\t: $smooth_win\n")
	print( "DNase Seq\t\t: $dnase_seq\n")
}

void chk_input_data() {

	print( "\n== checking atac inputs (data type = $input) ...\n" );

	if ( is_input_filt_bam() && ( vplot || preseq ) ) {
		error("Preseq analysis (-preseq) and vplot (-vplot) are not available if pipeline starts from filtered bam files (with '-filt_bam [FILT_BAM_PATH]...')!\n")
	}

	if ( !is_input_fastq() && !no_ataqc ) {
		print("Warning: ATAQC is available for fastq inputs only. Disabling ATAQC...\n")
		no_ataqc = true
	}

	if ( !se && csem ) {
		error("CSEM (-csem) is not available for single-ended data set ('-se')!\n")
	}
	
	if ( get_num_rep() > 2 && !no_idr ) {
		print("Warning: IDR is available for one replicate or two replicates only. Disabling IDR...\n")
		no_idr 	= true
	}

	if ( is_input_fastq() ) chk_align_bwt2()
	if ( !mapping ) 	chk_callpeak_macs2()
	if ( vplot ) 		chk_vplot()
	if ( !no_idr ) 		chk_idr()
	if ( !no_ataqc ) 	chk_ataqc()

	if ( !no_idr ) {

		if ( idr_thresh == "0.02" ) {
			print("Default IDR threshold is found ($idr_thresh). Setting it to 0.1 ...\n")
			idr_thresh = 0.1
		}
	
		print("Setting p-value threshold in MACS2 peak calling to 0.1 ...\n")

		pval_thresh_macs2 = 0.1
	}

	if ( nreads == 15000000 ) {

		print("Found default # of reads to subsample for cross-corr. analysis ($nreads). Setting it to 25000000 ...\n")
		nreads = 25000000
	}

	print("\n")

	// check data files
	suffix := se ? " (SE)" : " (PE)"

	string[] data_all

	for ( int rep=1; rep <= get_num_rep(); rep++) {

		string[] data

		string prefix

		if ( is_input_fastq() ) {
			prefix = "Rep$rep fastq" + suffix
			fastqs := get_fastqs( 0, rep )

			if ( !se && (get_num_rep()==1) && (fastqs.size()<2) && (get_fastq( 0, 2, 1 )!="") ) fastqs.add( get_fastq( 0, 2, 1 ) )

			if ( !se && fastqs.size() < 2 ) error("A pair of fastqs are needed for replicate $rep (if it's single-ended add '-se')\n")
 
			if ( fastqs.size()==0 ) {
				data.push( "" )
			}
			else {
				for ( string fastq : fastqs ) data.push( fastq )
			}

			if ( fastqs.size()==0 ) error("No fastq defined for replicate $rep\n")
		}
		else if ( is_input_bam() ) {
			prefix = "Rep$rep bam" + suffix
			data.push( get_bam( 0, rep ) )
		}
		else if ( is_input_filt_bam() ) {
			prefix = "Rep$rep filt_bam" + suffix
			data.push( get_filt_bam( 0, rep ) )
		}
		else {
			error("Unspported input type (-input)!")
		}

		print("$prefix :\n")

		for ( string s : data ) {
			print("\t$s\n")
			if ( (s != "") && !path_exists(s) ) error("\t\tFile not found!\n")
		}

		if ( data[0] == "" ) {
			error( "\t$prefix missing!\n")
		}

		// check any duplicate input filename
		for ( string s : data ) {
			if ( is_in_array( get_basename( s ), get_basename( data_all ) ) ) \
				error( "\t$prefix has duplicate filename!\n")
		}

		data_all = concat( data_all, data )
	}

}

void chk_ataqc() {

	print("\nChecking parameters and data files for ATAQC. If you don't want ATAQC then add '-no_ataqc'\n\n")

	if ( species == "" ) error("Genome name is missing ( '-species [GENOME_NAME; hg19, mm9, ...]' )!\n" )
	if ( ref_fa == "" ) error("Specify your reference genome .fa ('-ref_fa [FA]')!\n")
	if ( vplot_idx == "" ) error("V plot index is missing ( '-vplot_idx' )!\n")
	if ( dnase == "" ) error("DNase bed is missing ( '-dnase' )!\n")
	if ( blacklist == "" ) error("Blacklist bed is missing ( '-blacklist' )!\n")
	if ( prom == "" ) error("Promoter bed is missing ( '-prom' )!\n")
	if ( enh == "" ) error("Enhancer bed is missing ( '-enh' )!\n")
	if ( reg2map == "" ) error("reg2map is missing ( '-reg2map' )!\n")
	if ( roadmap_meta == "" ) error("Roadmap metadata are missing ( '-roadmap_meta' )!\n")
}

void atac() {

	for (int rep=1; rep<=get_num_rep(); rep++) {
		
		par _atac( rep )
	}

	wait
}

void _atac( int rep ) {

	if ( se ) 	_atac_SE( rep )
	else 		_atac_PE( rep )

	wait_par_rep()
}

void _atac_SE( int rep ) {

	cnt_callpeak := 0

	info := "rep$rep"

	align_o_dir := mkdir_path( "$out_dir/align/$info" ) // create align output directory

	if ( is_input_fastq() ) {

		fastqs := get_fastqs( 0, rep )

		fastq{rep} = fastqs[0]

		string p1, label_fastq
		
		if ( trimmed_fastq ) {
			p1 = fastq{rep}
		}
		else {
			p1 = _trim_adapters( fastq{rep}, align_o_dir, info )
		}
		wait

		fastq_graph_id := trimmed_fastq ? "fastq_($info)" : "trimmed_fastq_($info)"

		if ( csem ) {
			( bam{rep}, align_log{rep} ) = _bowtie2_csem( p1, align_o_dir, info, \
									fastq_graph_id, "bam_($info)", "L1_align/$info/bam" )
		}
		else {
			( bam{rep}, align_log{rep} ) = _bowtie2( p1, align_o_dir, info, \
									fastq_graph_id, "bam_($info)", "L1_align/$info/bam" )
		}
		wait
	}

	if ( is_input_fastq() || is_input_bam() ) {

		if ( is_input_bam() ) bam{rep} = get_bam( 0, rep )			

		( filt_bam{rep}, dup_qc{rep}, flagstat_nodup_qc{rep}, pbc_qc{rep} ) = _dedup_bam( bam{rep}, align_o_dir, info )
		wait
	}

	if ( is_input_fastq() || is_input_bam() || is_input_filt_bam() ) {

		if ( is_input_filt_bam() ) filt_bam{rep} = get_filt_bam( 0, rep )
	}

	string tag, subsampled_tag

	if ( !mapping ) {

		tag = _bam_to_tag( filt_bam{rep}, align_o_dir, info )
		wait

		if ( subsample != 0 ) {
			subsampled_tag = _subsample_tag( tag, subsample, align_o_dir, info, "", "", "" )
			wait
		}
		else {
			subsampled_tag = tag
		}

		if ( dnase_seq ) {
			shifted_tag{rep} = subsampled_tag
		}
		else { 
			shifted_tag{rep} = _tn5_shift_tag( subsampled_tag, align_o_dir, info )
		}
		wait

		string tmp

		if ( !true_rep ) {

			align_pr1_o_dir := mkdir_path( "$out_dir/align/pseudo_reps/$info/pr1" )
			align_pr2_o_dir := mkdir_path( "$out_dir/align/pseudo_reps/$info/pr2" )

			( shifted_tag_pr1{rep}, shifted_tag_pr2{rep} ) = _spr( shifted_tag{rep}, align_pr1_o_dir, align_pr2_o_dir, info, \
										\
										"tagalign_($info)", "tagalign_($info-pr1)", "tagalign_($info-pr2)", \
										"L1_align/pseudo_reps/$info/pr1/tagalign", "L1_align/pseudo_reps/$info/pr2/tagalign" ) 
			wait

			peak_pr1_o_dir 	:= mkdir_path( "$out_dir/peak/macs2/pseudo_reps/$info/pr1" )
			sig_pr1_o_dir 	:= mkdir_path( "$out_dir/signal/macs2/pseudo_reps/$info/pr1" )
			peak_pr2_o_dir 	:= mkdir_path( "$out_dir/peak/macs2/pseudo_reps/$info/pr2" )
			sig_pr2_o_dir 	:= mkdir_path( "$out_dir/signal/macs2/pseudo_reps/$info/pr2" )

			pr1_hrchy 	:= "macs2/pseudo_reps/$info/pr1"
			pr2_hrchy 	:= "macs2/pseudo_reps/$info/pr2"

			( peak_pr1{rep}, tmp ) = _macs2_atac( shifted_tag_pr1{rep}, "$smooth_win", false, peak_pr1_o_dir, sig_pr1_o_dir, info + "-pr1", \
						\
						"tagalign_($info-pr1)", "peak_macs2_($info-pr1)", "pval_signal_($info-pr1)", "fc_signal_($info-pr1)", \
						"L1_peak/$pr1_hrchy/peak", "L1_signal/$pr1_hrchy/pval", "L1_signal/$pr1_hrchy/fc" )

			if ( !path_exists( peak_pr1{rep} ) && ++cnt_callpeak % max_callpeak == 0 ) wait

			( peak_pr2{rep}, tmp ) = _macs2_atac( shifted_tag_pr2{rep}, "$smooth_win", false, peak_pr2_o_dir, sig_pr2_o_dir, info + "-pr2", \
						\
						"tagalign_($info-pr2)", "peak_macs2_($info-pr2)", "pval_signal_($info-pr2)", "fc_signal_($info-pr2)", \
						"L1_peak/$pr2_hrchy/peak", "L1_signal/$pr2_hrchy/pval", "L1_signal/$pr2_hrchy/fc" )

			if ( !path_exists( peak_pr2{rep} ) && ++cnt_callpeak % max_callpeak == 0 ) wait
		}

		peak_o_dir 	:= mkdir_path( "$out_dir/peak/macs2/$info")
		sig_o_dir 	:= mkdir_path( "$out_dir/signal/macs2/$info" )

		( peak{rep}, fc_bigwig{rep}, pval_bigwig{rep} )  = _macs2_atac( shifted_tag{rep}, "$smooth_win", true, peak_o_dir, sig_o_dir, info, \
										\
										"tagalign_($info)", "peak_macs2_($info)", "pval_signal_($info)", "fc_signal_($info)", \
										"L1_peak/macs2/$info/peak", "L1_signal/macs2/$info/pval", "L1_signal/macs2/$info/fc" )
		if ( !path_exists( peak{rep} ) && ++cnt_callpeak % max_callpeak == 0 ) wait
	}

	if ( bam.hasKey(rep) ) {

		string sorted_bam

		if ( vplot || preseq || !mapping && !no_ataqc ) sorted_bam = _srt_bam( bam{rep}, align_o_dir, info )
		wait

		if ( !mapping && !no_ataqc ) {
			
			report_dir := mkdir_path( "$out_dir/ataqc/$info" )

			_ataqc( fastq{rep}, "", bam{rep}, align_log{rep}, pbc_qc{rep}, sorted_bam, \
				dup_qc{rep}, filt_bam{rep}, shifted_tag{rep}, pval_bigwig{rep}, peak{rep}, \
				report_dir, info )
		}
		else {
			if ( vplot ) _vplot( sorted_bam, align_o_dir, info )

			if ( preseq ) _preseq( sorted_bam, align_o_dir, info )

			//wait

			//_report_atac( align_o_dir, info )
		}		
	}

	if ( !mapping && tag != "" ) { // cross correlation analysis

		subsampled_tag_xcor := _subsample_tag( tag, align_o_dir, info, \
								"tagalign_($info)", "subsampled_tagalign_($info)", \
								"L1_align/$info/subsampled_tagalign" )

		( xcor_qc{rep}, xcor_plot{rep} ) = _xcor( subsampled_tag_xcor, align_o_dir, info, \
								"subsampled_tagalign_($info)", "xcor_qc($info)", \
								"L1_align/$info/xcor_qc" )
	}

	wait
}

void _atac_PE( int rep ) {

	cnt_callpeak := 0 // count peak calling 

	info := "rep$rep"

	align_o_dir := mkdir_path( "$out_dir/align/$info" ) // create align output directory

	if ( is_input_fastq() ) {

		fastqs := get_fastqs( 0, rep )

		string p1, p2

		// correct if user skipped replicate id like (-fastq[PAIR]) instead of (-fastq[REP]_[PAIR])
		if ( (get_num_rep()==1) && (fastqs.size()<2) && (get_fastq( 0, 2, 1 )!="") ) fastqs.add( get_fastq( 0, 2, 1 ) )
 
		fastq1 := fastqs[0]
		fastq2 := fastqs[1]

		fastq{rep+",1"} = fastq1
		fastq{rep+",2"} = fastq2

		if ( trimmed_fastq ) {
			p1 = fastq1
			p2 = fastq2
		}
		else {
			( p1, p2 ) = _trim_adapters_PE( fastq1, fastq2, align_o_dir, info )
			wait
		}

		fastq_graph_id1 := trimmed_fastq ? "fastq1_($info)" : "trimmed_fastq1_($info)"
		fastq_graph_id2 := trimmed_fastq ? "fastq2_($info)" : "trimmed_fastq2_($info)"

		( bam{rep}, align_log{rep} ) = _bowtie2_PE( p1, p2, align_o_dir, info, \
							fastq_graph_id1, fastq_graph_id2, "bam_($info)", "L1_align/$info/bam" )
		wait

	}

	if ( is_input_fastq() || is_input_bam() ) {

		if ( is_input_bam() ) bam{rep} = get_bam( 0, rep )			

		(filt_bam{rep}, dup_qc{rep}, flagstat_nodup_qc{rep}, pbc_qc{rep} ) = _dedup_bam_PE( bam{rep}, align_o_dir, info )
		wait
	}

	if ( is_input_fastq() || is_input_bam() || is_input_filt_bam() ) {

		if ( is_input_filt_bam() ) filt_bam{rep} = get_filt_bam( 0, rep )
	}

	string bedpe

	if ( !mapping ) {

		if ( subsample!=0 || !true_rep ) {

			bedpe = _bam_to_bedpe( filt_bam{rep}, align_o_dir, info )
			wait 

			string subsampled_bedpe

			if ( subsample!=0 ) {

				subsampled_bedpe = _subsample_bedpe( bedpe, subsample, align_o_dir, info )
			}
			else {
				subsampled_bedpe = bedpe
			}
			wait

			tag := _bedpe_to_tag( subsampled_bedpe, align_o_dir, info )			
			wait

			if ( dnase_seq ) {
				shifted_tag{rep} = tag
			}
			else {
				shifted_tag{rep} = _tn5_shift_tag( tag, align_o_dir, info )
			}

			if ( !true_rep ) {

				align_pr1_o_dir := mkdir_path( "$out_dir/align/pseudo_reps/$info/pr1" )
				align_pr2_o_dir := mkdir_path( "$out_dir/align/pseudo_reps/$info/pr2" )

				string tag_pr1, tag_pr2
				(tag_pr1, tag_pr2) = _spr_PE( subsampled_bedpe, align_pr1_o_dir, align_pr2_o_dir, info, \
							\
							"tagalign_($info)", "tagalign_($info-pr1)", "tagalign_($info-pr2)", \
							"L1_align/pseudo_reps/$info/pr1/tagalign", \
							"L1_align/pseudo_reps/$info/pr2/tagalign" ) 
				wait

				if ( dnase_seq ) {
					shifted_tag_pr1{rep} = tag_pr1
					shifted_tag_pr2{rep} = tag_pr2
				}
				else {
					shifted_tag_pr1{rep} = _tn5_shift_tag( tag_pr1, align_pr1_o_dir, info )
					shifted_tag_pr2{rep} = _tn5_shift_tag( tag_pr2, align_pr2_o_dir, info )					
				}
			}
			wait

			if ( subsample==0 ) {

				if ( dnase_seq ) {
					shifted_tag{rep} = _bam_to_bed_atac( filt_bam{rep}, align_o_dir, info )
				}
				else {
					shifted_tag{rep} = _bam_to_tn5_shift_bed_atac( filt_bam{rep}, align_o_dir, info )
				}
				wait
			}

			string tmp
			
			if ( !true_rep ) {

				peak_pr1_o_dir 	:= mkdir_path( "$out_dir/peak/macs2/pseudo_reps/$info/pr1" )
				sig_pr1_o_dir 	:= mkdir_path( "$out_dir/signal/macs2/pseudo_reps/$info/pr1" )
				peak_pr2_o_dir 	:= mkdir_path( "$out_dir/peak/macs2/pseudo_reps/$info/pr2" )
				sig_pr2_o_dir 	:= mkdir_path( "$out_dir/signal/macs2/pseudo_reps/$info/pr2" )

				pr1_hrchy := "macs2/pseudo_reps/$info/pr1"
				pr2_hrchy := "macs2/pseudo_reps/$info/pr2"

				( peak_pr1{rep}, tmp ) = _macs2_atac( shifted_tag_pr1{rep}, "$smooth_win", false, peak_pr1_o_dir, sig_pr1_o_dir, info + "_pr1", \
						\
						"tagalign_($info-pr1)", "peak_macs2_($info-pr1)", "pval_signal_($info-pr1)", "fc_signal_($info-pr1)", \
						"L1_peak/$pr1_hrchy/peak", "L1_signal/$pr1_hrchy/pval", "L1_signal/$pr1_hrchy/fc" )

				if ( !path_exists( peak_pr1{rep} ) && ++cnt_callpeak % max_callpeak == 0 ) wait

				( peak_pr2{rep}, tmp ) = _macs2_atac( shifted_tag_pr2{rep}, "$smooth_win", false, peak_pr2_o_dir, sig_pr2_o_dir, info + "_pr2", \
						\
						"tagalign_($info-pr2)", "peak_macs2_($info-pr2)", "pval_signal_($info-pr2)", "fc_signal_($info-pr2)", \
						"L1_peak/$pr2_hrchy/peak", "L1_signal/$pr2_hrchy/pval", "L1_signal/$pr2_hrchy/fc" )

				if ( !path_exists( peak_pr2{rep} ) && ++cnt_callpeak % max_callpeak == 0 ) wait
			}
		}
		else {
			if ( dnase_seq ) {
				shifted_tag{rep} = _bam_to_bed_atac( filt_bam{rep}, align_o_dir, info )
			}
			else {
				shifted_tag{rep} = _bam_to_tn5_shift_bed_atac( filt_bam{rep}, align_o_dir, info )
			}
			wait
		}

		peak_o_dir 	:= mkdir_path( "$out_dir/peak/macs2/$info")
		sig_o_dir 	:= mkdir_path( "$out_dir/signal/macs2/$info" )

		( peak{rep}, fc_bigwig{rep}, pval_bigwig{rep} ) = _macs2_atac( shifted_tag{rep}, "$smooth_win", true, peak_o_dir, sig_o_dir, info, \
									\
									"tagalign_($info)", "peak_macs2_($info)", "pval_signal_($info)", "fc_signal_($info)", \
									"L1_peak/macs2/$info/peak", "L1_signal/macs2/$info/pval", "L1_signal/macs2/$info/fc" )

		if ( !path_exists( peak{rep} ) && ++cnt_callpeak % max_callpeak == 0 ) wait
	}

	if ( bam.hasKey(rep) ) {

		string sorted_bam

		if ( vplot || preseq || !mapping && !no_ataqc ) sorted_bam = _srt_bam( bam{rep}, align_o_dir, info )
		wait

		if ( !mapping && !no_ataqc ) {

			report_dir := mkdir_path( "$out_dir/ataqc/$info" )

			_ataqc( fastq{rep+",1"}, fastq{rep+",2"}, bam{rep}, align_log{rep}, pbc_qc{rep}, sorted_bam, \
				dup_qc{rep}, filt_bam{rep}, shifted_tag{rep}, pval_bigwig{rep}, peak{rep}, \
				report_dir, info )
		}
		else {

			if ( vplot ) _vplot( sorted_bam, align_o_dir, info )

			if ( preseq ) _preseq( sorted_bam, align_o_dir, info )

			//wait
			//_report_atac( report_dir, info )
		}
	}

	if ( !mapping ) { // cross correlation analysis

		if ( bedpe == "" ) bedpe = _bam_to_bedpe( filt_bam{rep}, align_o_dir, info )

		subsampled_tag_xcor := _subsample_bedpe_to_tag_xcor( bedpe, align_o_dir, info ) //, \
							//"subsampled_bedpe_($info)", "subsampled_tagalign_($info)", \
							//"L1_align/$info/subsampled_tagalign" )
		wait

		( xcor_qc{rep}, xcor_plot{rep} ) = _xcor( subsampled_tag_xcor, align_o_dir, info, \
								"subsampled_tagalign_($info)", "xcor_qc($info)", \
								"L1_align/$info/xcor_qc" )
	}

	wait
}

void post_atac() { // for pooling two replicates and calling peaks on them

	if ( mapping ) return

	if ( get_num_rep() != 2 ) return

	cnt_callpeak := 0

 	align_pooled_o_dir := mkdir_path( "$out_dir/align/pooled_rep" )

	string shifted_tag_pooled

	if ( !true_rep ) {

	 	align_pooled_o_dir := mkdir_path( "$out_dir/align/pooled_rep" )
	 	align_ppr1_o_dir   := mkdir_path( "$out_dir/align/pooled_pseudo_reps/ppr1" )
	 	align_ppr2_o_dir   := mkdir_path( "$out_dir/align/pooled_pseudo_reps/ppr2" )

		// Make shifted tags for pooled pseudo rep (ppr).
		string shifted_tag_ppr1, shifted_tag_ppr2

		( shifted_tag_pooled, shifted_tag_ppr1, shifted_tag_ppr2 ) = \
			_ppr( 	shifted_tag{1}, shifted_tag_pr1{1}, shifted_tag_pr2{1}, \
				shifted_tag{2}, shifted_tag_pr1{2}, shifted_tag_pr2{2}, \
				align_pooled_o_dir, align_ppr1_o_dir, align_ppr2_o_dir, "" )
		wait

		peak_o_dir 	:= mkdir_path( "$out_dir/peak/macs2")
		sig_o_dir 	:= mkdir_path( "$out_dir/signal/macs2")

		ppr1_o_dir 	:= mkdir_path( "$peak_o_dir/pooled_pseudo_reps/ppr1" )
		ppr1_sig_o_dir 	:= mkdir_path( "$sig_o_dir/pooled_pseudo_reps/ppr1" )
		ppr2_o_dir 	:= mkdir_path( "$peak_o_dir/pooled_pseudo_reps/ppr2" )
		ppr2_sig_o_dir 	:= mkdir_path( "$sig_o_dir/pooled_pseudo_reps/ppr2" )
		pooled_o_dir	:= mkdir_path( "$peak_o_dir/pooled_rep" )
		pooled_sig_o_dir:= mkdir_path( "$sig_o_dir/pooled_rep" )

		// call peaks on ppr

		ppr1_hrchy 	:= "macs2/pooled_pseudo_reps/ppr1"
		ppr2_hrchy 	:= "macs2/pooled_pseudo_reps/ppr2"
		pooled_hrchy 	:= "macs2/pooled_rep"

		string tmp

		( peak_ppr1, tmp ) = _macs2_atac( shifted_tag_ppr1, "$smooth_win", false, ppr1_o_dir, ppr1_sig_o_dir, "ppr1", \
						\
						"tagalign_(ppr1)","peak_macs2"+"_(ppr1)", "pval_signal_(ppr1)", "fc_signal_(ppr1)", \
						"L1_peak/$ppr1_hrchy/peak", "L1_signal/$ppr1_hrchy/pval", "L1_signal/$ppr1_hrchy/fc" )

		if ( !path_exists( peak_ppr1 ) && ++cnt_callpeak % peaks_in_par == 0 ) wait

		( peak_ppr2, tmp ) = _macs2_atac( shifted_tag_ppr2, "$smooth_win", false, ppr2_o_dir, ppr2_sig_o_dir, "ppr2", \
						\
						"tagalign_(ppr2)","peak_macs2"+"_(ppr2)", "pval_signal_(ppr2)", "fc_signal_(ppr2)", \
						"L1_peak/$ppr2_hrchy/peak", "L1_signal/$ppr2_hrchy/pval", "L1_signal/$ppr2_hrchy/fc" )

		if ( !path_exists( peak_ppr2 ) && ++cnt_callpeak % peaks_in_par == 0 ) wait

		( peak_pooled, tmp ) = _macs2_atac( shifted_tag_pooled, "$smooth_win", true, pooled_o_dir, pooled_sig_o_dir, "pooled", \
						\
						"tagalign_(pooled)", "peak_macs2"+"_(pooled)", "pval_signal_(pooled)", "fc_signal_(pooled)", \
						"L1_peak/$pooled_hrchy/peak", "L1_signal/$pooled_hrchy/pval", "L1_signal/$pooled_hrchy/fc" )
	}
	else {
		shifted_tag_pooled = _pool_tag( shifted_tag{1}, shifted_tag{2}, align_pooled_o_dir, "" )
		wait

		string tmp
		( peak_pooled, tmp ) = _macs2_atac( shifted_tag_pooled, "$smooth_win", true, align_pooled_o_dir, "pooled", \
						\
						"tagalign_(pooled)" )
	}

	wait
}

void do_idr() {
	
	if ( mapping ) return

	if ( no_idr || get_num_rep() > 2 ) return

	// take top $npeak_filt lines from narrowpeaks for idr

	string{} filt_peak, filt_peak_pr1, filt_peak_pr2
	string filt_peak_pooled, filt_peak_ppr1, filt_peak_ppr2

	filt_peak{1} 	= _filt_top_peaks( peak{1}, "", "rep1", \
						"peak_macs2_(rep1)", "peak_macs2_filt_(rep1)", "L1_peak/macs2/rep1/peak_filt" )
 
	if ( get_num_rep() > 1 ) {
		filt_peak{2} 	= _filt_top_peaks( peak{2}, "", "rep2", \
						"peak_macs2_(rep2)", "peak_macs2_filt_(rep2)", "L1_peak/macs2/rep2/peak_filt" )
		filt_peak_pooled= _filt_top_peaks( peak_pooled, "", "pooled", \
						"peak_macs2_(pooled)", "peak_macs2_filt_(pooled)", "L1_peak/macs2/pooled_rep/peak_filt" )
	}
	
	if ( !true_rep ) {

		filt_peak_pr1{1} = _filt_top_peaks( peak_pr1{1}, "", "rep1-pr1", \
						"peak_macs2_(rep1-pr1)", "peak_macs2_filt_(rep1-pr1)", "L1_peak/macs2/pseudo_reps/rep1/pr1/peak_filt" )
		filt_peak_pr2{1} = _filt_top_peaks( peak_pr2{1}, "", "rep1-pr2", \
						"peak_macs2_(rep1-pr2)", "peak_macs2_filt_(rep1-pr2)", "L1_peak/macs2/pseudo_reps/rep1/pr2/peak_filt" )

		if ( get_num_rep() > 1 ) {

			filt_peak_pr1{2} = _filt_top_peaks( peak_pr1{2}, "", "rep2-pr1", \
						"peak_macs2_(rep2-pr1)", "peak_macs2_filt_(rep2-pr1)", "L1_peak/macs2/pseudo_reps/rep2/pr1/peak_filt" )
			filt_peak_pr2{2} = _filt_top_peaks( peak_pr2{2}, "", "rep2-pr2", \
						"peak_macs2_(rep2-pr2)", "peak_macs2_filt_(rep2-pr2)", "L1_peak/macs2/pseudo_reps/rep2/pr2/peak_filt" )

			filt_peak_ppr1 	   = _filt_top_peaks( peak_ppr1, "", "ppr1", \
						"peak_macs2_(ppr1)", "peak_macs2_filt_(ppr1)", "L1_peak/macs2/pooled_pseudo_reps/ppr1/peak_filt" )
			filt_peak_ppr2 	   = _filt_top_peaks( peak_ppr2, "", "ppr2", \
						"peak_macs2_(ppr2)", "peak_macs2_filt_(ppr2)", "L1_peak/macs2/pooled_pseudo_reps/ppr2/peak_filt" )
		}
	}

	wait

	// naive overlap peak

	if ( !true_rep ) {

		overlap_o_dir := mkdir_path( "$out_dir/peak/macs2/overlap" )

		if ( get_num_rep() == 1 ) {

			peak_overlap = _naive_overlap_peak( "narrowPeak", peak{1}, peak_pr1{1}, peak_pr2{1}, overlap_o_dir, "final" )

			_add_to_graphviz( ["peak_macs2_(rep1)","peak_macs2_(rep1-pr1)","peak_macs2_(rep1-pr2)"], \
					  [peak{1}, peak_pr1{1}, peak_pr2{1}], \
					  ["peak_macs2_(overlap)"], [peak_overlap], "naive_overlap", grp_color_naive_overlap )
					    
			_add_to_filetable(["L1_peak/macs2/overlap/peak_overlap"], [peak_overlap] )
		}
		else {
			peak_overlap = _naive_overlap_peak( "narrowPeak", peak_pooled, peak{1}, peak{2}, \
									  peak_ppr1, peak_ppr2, overlap_o_dir, "final" )

			_add_to_graphviz( ["peak_macs2_(pooled)","peak_macs2_(rep1)","peak_macs2_(rep2)","peak_macs2_(ppr1)","peak_macs2_(ppr2)"], \
					  [peak_pooled, peak{1}, peak{2}, peak_ppr1, peak_ppr2], \
					  ["peak_macs2_(overlap)"], [peak_overlap], "naive_overlap", grp_color_naive_overlap )
					    
			_add_to_filetable(["L1_peak/macs2/overlap/peak_overlap"], [peak_overlap] )
		}
	}
	// do IDR

	idr_o_dir 	:= mkdir_path( "$out_dir/peak/idr" )

	if ( get_num_rep() > 1 ) {

		idr_true_o_dir 	:= mkdir_path( "$idr_o_dir/true_reps" )

		// idr for true reps
		(idr_tr, idr_tr_png) = _idr2( filt_peak{1}, filt_peak{2}, filt_peak_pooled, idr_true_o_dir, "true", \
						\
						"peak_macs2_filt_(rep1)","peak_macs2_filt_(rep2)","peak_macs2_filt_(pooled)", \
						"idr_peak_(true)", "L1_peak/idr/true_reps/idr_peak" )
	}
	
	if ( !true_rep ) {

		idr_rep1_pr_o_dir := mkdir_path( "$idr_o_dir/pseudo_reps/rep1" )

		// idr on pseudo reps
		(idr_pr_rep1, idr_pr_rep1_png) = _idr2( filt_peak_pr1{1}, filt_peak_pr2{1}, filt_peak{1}, idr_rep1_pr_o_dir, "rep1-pr", \
						\
						"peak_macs2_filt_(rep1-pr1)","peak_macs2_filt_(rep1-pr2)","peak_macs2_filt_(rep1)", \
						"idr_peak_(rep1-pr)", "L1_peak/idr/pseudo_reps/rep1/idr_peak" )

		if ( get_num_rep() > 1 ) {

			idr_rep2_pr_o_dir := mkdir_path( "$idr_o_dir/pseudo_reps/rep2" )
			idr_ppr_o_dir 	  := mkdir_path( "$idr_o_dir/pooled_pseudo_reps" )

			(idr_pr_rep2, idr_pr_rep2_png) = _idr2( filt_peak_pr1{2}, filt_peak_pr2{2}, filt_peak{2}, idr_rep2_pr_o_dir, "rep2-pr", \
							\
							"peak_macs2_filt_(rep2-pr1)","peak_macs2_filt_(rep2-pr2)","peak_macs2_filt_(rep2)", \
							"idr_peak_(rep2-pr)", "L1_peak/idr/pseudo_reps/rep2/idr_peak" )

			// idr on ppr
			(idr_ppr, idr_ppr_png) = _idr2( filt_peak_ppr1, filt_peak_ppr2, filt_peak_pooled, idr_ppr_o_dir, "ppr", \
							\
							"peak_macs2_filt_(ppr1)","peak_macs2_filt_(ppr2)","peak_macs2_filt_(pooled)", \
							"idr_peak_(ppr)", "L1_peak/idr/pooled_pseudo_reps/idr_peak" )
		}
		wait		

		if ( get_num_rep() > 1 ) {

			string idr_opt_, idr_consv_
			(idr_qc, idr_opt_, idr_consv_)  = _idr_final_qc( idr_tr, idr_pr_rep1, idr_pr_rep2, idr_ppr, idr_o_dir, "" )

			idr_opt_o_dir 	:= mkdir_path( "$idr_o_dir/optimal_set" )
			idr_consv_o_dir := mkdir_path( "$idr_o_dir/conservative_set" )

			// make a copy of (because genome browser checks duplicate track URLs)

			idr_opt 	= replace_dir( idr_opt_, idr_opt_o_dir )
			idr_consv 	= replace_dir( idr_consv_, idr_consv_o_dir )

			in 	:= [idr_opt_,idr_consv_]
			out 	:= [idr_opt,idr_consv]

			task ( out<-in ) {
				sys cp $idr_opt_ $idr_opt
				sys cp $idr_consv_ $idr_consv
			}

			_add_to_filetable( ["L1_peak/idr/opt_set/idr_peak","L1_peak/idr/consv_set/idr_peak"], [idr_opt, idr_consv] )
		}
	}

	wait
}

string[] _ataqc( string fastq1, string fastq2, string bam, string align_log, string pbc_log, string srt_bam, \
		 string dup_log, string filt_bam, string bed, string bigwig, string peak, \
		 string o_dir, string info ) {
	
	prefix 		:= replace_dir( rm_ext( fastq1, ["fastq","fq"] ), o_dir ) + ( (fastq2!="") ? ".PE2SE" : "" )
	html 		:= "$prefix"+"_qc.html"
	txt 		:= "$prefix"+"_qc.txt"
	prefix_basename := get_basename( prefix )
	param_fastq 	:= (fastq2!="") ? "--fastq1 $fastq1 --fastq2 $fastq2" : "--fastq1 $fastq1"

	in  	:= (fastq2!="") ? [ fastq1, fastq2, bam, align_log, pbc_log, srt_bam, dup_log, filt_bam, bed, bigwig, peak ] \
				: [ fastq1, bam, align_log, pbc_log, srt_bam, dup_log, filt_bam, bed, bigwig, peak ]
	out 	:= [ html, txt ] //, gc_plot, hist_graph, lg_vplot, vplot, signal ]

	taskName:= "ataqc "+info

	task( out<-in ) {

		sys $shcmd_init

		// To prevent java heap space error (Exception in thread "main" java.lang.OutOfMemoryError: Java heap space)
		// increae -Xmx if you still have it
		sys export _JAVA_OPTIONS="-Xms256M -Xmx4096M -XX:ParallelGCThreads=1"

		sys cd $o_dir

		sys $script_dir/ataqc/run_ataqc.py \
		    --workdir $o_dir \
		    --outdir $o_dir \
		    --outprefix $prefix_basename \
		    --genome $species \
		    --ref $ref_fa \
		    --tss $vplot_idx \
		    --dnase $dnase \
		    --blacklist $blacklist \
		    --prom $prom \
		    --enh $enh \
		    --reg2map $reg2map \
		    --meta $roadmap_meta \
		    --pbc $pbc_log\
		    $param_fastq \
		    --alignedbam $bam \
		    --alignmentlog $align_log \
		    --coordsortbam $srt_bam \
		    --duplog $dup_log \
		    --finalbam $filt_bam \
		    --finalbed $bed \
		    --bigwig $bigwig \
		    --peaks $peak
	}

	wait_par()

	graph_in := ( fastq2!="" ) ? ["fastq1_($info)","fastq2_($info)","bam_($info)","srt_bam_($info)",\
				      "filt_bam_($info)","tagalign_($info)","pval sig._($info)","n peak_($info)"] \
				   : ["fastq_($info)","bam_($info)","srt_bam_($info)",\
				      "filt_bam_($info)","tagalign_($info)","pval sig._($info)","n peak_($info)"]

	path_in := ( fastq2!="" ) ? [fastq1, fastq2, bam, srt_bam, filt_bam, bed, bigwig, peak] \
				  : [fastq1, bam, srt_bam, filt_bam, bed, bigwig, peak]

	_add_to_graphviz( graph_in, path_in, ["ataqc rpt_($info)"], [html], "ataqc_($info)", grp_color_ataqc )

	return out
}

void report() {

	html := _html_filetable() 	// treeview for directory and file structure 
	html += _html_atac_tracks() 	// epigenome browser tracks
	html += _html_graphviz()	// graphviz workflow diagram
	html += _html_atac_QC()	// show QC tables and images

	report( html )
}

string _html_atac_QC() {

	string[] align_qcs, dup_qcs, flagstat_nodup_qcs, pbc_qcs, xcor_qcs, xcor_plots
	string[] align_headers, dup_headers, flagstat_nodup_headers, pbc_headers, xcor_headers

	for ( int rep=1; rep <= get_num_rep(); rep++) {

		info := "rep$rep"
		key := "$rep"

		//html_rep_by_id += _html_xcor( info, 	[ info ], [ xcor_qc{key} ], [ xcor_plot{key} ], [ info ] )

		if ( xcor_qc.hasKey( key ) )	{
			xcor_qcs 		+= xcor_qc{key}
			xcor_plots 		+= xcor_plot{key}
			xcor_headers 		+= info
		}

		if ( align_log.hasKey( key ) ) 		align_qcs 		+= align_log{key}
		if ( dup_qc.hasKey( key ) ) 		dup_qcs 		+= dup_qc{key}
		if ( flagstat_nodup_qc.hasKey( key ) )	flagstat_nodup_qcs 	+= flagstat_nodup_qc{key}
		if ( pbc_qc.hasKey( key ) ) 		pbc_qcs			+= pbc_qc{key}

		if ( align_log.hasKey( key ) ) 		align_headers 		+= info
		if ( dup_qc.hasKey( key ) ) 		dup_headers 		+= info
		if ( flagstat_nodup_qc.hasKey( key ) )	flagstat_nodup_headers 	+= info
		if ( pbc_qc.hasKey( key ) ) 		pbc_headers		+= info

	}

	html := "<div id='atac_qc'>"
	
	html += _parse_align_log_to_html( "all", 	align_headers, align_qcs, align_headers ) 
	html += _parse_dup_to_html( "all", 		dup_headers, dup_qcs, dup_headers )
	html += _parse_flagstat_to_html( "all, filtered",flagstat_nodup_headers, flagstat_nodup_qcs, flagstat_nodup_headers )
	html += _parse_pbc_to_html( "all", 		pbc_headers, pbc_qcs, pbc_headers )
	html += _parse_xcor_to_html( "all", 		xcor_headers, xcor_qcs, xcor_plots, xcor_headers )

	// if idr qc's exists, add them to html

	if ( idr_qc != "" ) html += _parse_idr_to_html( "idr", idr_qc )

	if ( idr_tr_png != "" ) html += _html_img( idr_tr_png, 800, "true reps" ) + "&nbsp"
	if ( idr_pr_rep1_png != "" ) html += _html_img( idr_pr_rep1_png, 800, "rep1 pseudo-reps" ) + "&nbsp"
	if ( idr_pr_rep2_png != "" ) html += _html_img( idr_pr_rep2_png, 800, "rep2 pseudo-reps" ) + "&nbsp"
	if ( idr_ppr_png != "" ) html += _html_img( idr_ppr_png, 800, "pooled pseudo-reps" ) + "&nbsp"

	html += "</div><br>"
	return html
}

string _html_atac_tracks() {

	string[] track_files, track_types, track_names

	if ( pval_bigwig.hasKey( "pooled" ) ) { track_types += "bigwig"; track_names += "pval (pooled)"; track_files += pval_bigwig{"pooled"} }
	if ( fc_bigwig.hasKey( "pooled" ) )   { track_types += "bigwig"; track_names += "fc (pooled)";   track_files += fc_bigwig{"pooled"}   }

	if ( peak_overlap != "" ) { track_types += "hammock"; track_names += "peak overlap"; track_files += _peak_to_hammock( peak_overlap ) }

	if ( idr_opt != "" ) {	track_types += "hammock"; track_names += "peak idr (opt. set)"; track_files += _peak_to_hammock( idr_opt ) }
	if ( idr_consv != "" ) {track_types += "hammock"; track_names += "peak idr (cons. set)"; track_files += _peak_to_hammock( idr_consv ) }

	for (int rep=1; rep<=get_num_rep(); rep++) {

		if ( pval_bigwig.hasKey( "$rep" ) ) { track_types += "bigwig"; track_names += "pval (rep$rep)"; track_files += pval_bigwig{rep} }
		if ( fc_bigwig.hasKey( "$rep" ) )   { track_types += "bigwig"; track_names += "fc (rep$rep)";   track_files += fc_bigwig{rep}   }
		if ( rep==1 && idr_pr_rep1 != "" ) {	track_types += "hammock"; track_names += "peak idr (rep1_pr)"; track_files += _peak_to_hammock( idr_pr_rep1 ) }
		if ( rep==2 && idr_pr_rep2 != "" ) {	track_types += "hammock"; track_names += "peak idr (rep2_pr)"; track_files += _peak_to_hammock( idr_pr_rep2 ) }
	}

	html := _html_epg_browser_viz( track_files, track_types, track_names )

	return html
}

/*
// outputs (pdf, png, log, ...) and report must be in the same directory
string[] _report_atac( string o_dir, string info ) {

	prefix 	 := "$o_dir/report"
	tex_file := "$prefix.tex"
	pdf_file := "$prefix.pdf"

	in 	:= "" // always run this function (don't check file time stamp)
	out 	:= [tex_file, pdf_file]

	taskName:= "report_atac "+info

	task( out<-in ) {

		sys $shcmd_init

		sys cd $o_dir
		sys thisFolder=$o_dir

		//# figure out what we've aligned to
		sys MODEL=$bwt_idx

		//# insert size histogram graph file name
		sys insertSizeHist="$(echo *.hist_graph.pdf)"

		//# PRESEQ graph file name
		sys preseqGraph="$(echo *.preseq.pdf)"

		//# bowtie2 alignment log file name
		sys if [[ $input == "fastq" ]]; then \
			alignLog="$(echo *.align.log)"; \
			alignLogLastLine=$(tail -n 1 ${alignLog}); \
			fi

		//# preseq log file name
		sys preseqLog="$(echo *.preseq.log)"

		//# V-Plot graph file name
		sys vPlot="$(echo *.vect.png)"

		//# Picard duplicate log file name
		sys if [[ $input == "fastq" ]]; then \
			dupQCFile=$(echo *.dup.qc); \
			dupQCHeadings=$(sed -n 7p ${dupQCFile}); \
			dupQCHeadings=${dupQCHeadings//_/\\\\_}; \
			IFS=$'\t' read -a dupQCHeadings <<< "${dupQCHeadings}"; \
			dupQCData=$(sed -n 8p ${dupQCFile}); \
			IFS=$'\t' read -a dupQCData <<< "${dupQCData}"; \
			START=0; \
			END=${#dupQCHeadings[@]}; \
			DUPTABLE=""; \
			for (( c=${START}; c<${END}; c++ )) do \
				if [ "${c}" = "$((END-1))" ]; then \
					DUPTABLE="${DUPTABLE}${dupQCHeadings[${c}]}& ${dupQCData[${c}]} \\\\ \bottomrule"; \
				else \
					DUPTABLE="${DUPTABLE}${dupQCHeadings[${c}]}& ${dupQCData[${c}]} \\\\ \midrule "; \
				fi \
			done; \
			bpcQCFile=$(echo *.pbc.qc); \
			declare -a bpcLabels=("TotalReadPairs" "DistinctReadPairs" "OneReadPair" "TwoReadPairs" "NRF=Distinct/Total" "PBC1=OnePair/Distinct" "PBC2=OnePair/TwoPair"); \
			bpcQC=$(cat ${bpcQCFile}); \
			IFS=$'\t' read -a bpcData <<< "${bpcQC}"; \
			START=0; \
			END=${#bpcLabels[@]}; \
			BPCTABLE=""; \
			for (( c=${START}; c<${END}; c++ )) do \
				if [ "${c}" = "$((END-1))" ]; then \
					BPCTABLE="${BPCTABLE}${bpcLabels[${c}]}& ${bpcData[${c}]} \\\\ \bottomrule"; \
				else \
					BPCTABLE="${BPCTABLE}${bpcLabels[${c}]}& ${bpcData[${c}]} \\\\ \midrule "; \
				fi \
			done; \
			fi

		//# Now we generate the tex language file that defines the report
		//# warning! two layers of command interpretaion in here (bash&tex),
		//# not for the faint of heart!
		sys echo "\documentclass{article}" > $tex_file
		sys echo "\usepackage{graphicx}" >> $tex_file
		sys echo "\usepackage{multicol}" >> $tex_file
		sys echo "\usepackage{listings}" >> $tex_file
		sys echo "\usepackage{grffile}" >> $tex_file
		sys echo "\usepackage[margin=0.5in]{geometry}" >> $tex_file
		sys echo "\usepackage{booktabs}" >> $tex_file
		sys echo "\usepackage{hyphenat}" >> $tex_file
		sys echo "\usepackage{fancyhdr}" >> $tex_file
		sys echo "\pagestyle{fancy}" >> $tex_file
		sys echo "\fancyhf{}" >> $tex_file
		sys echo "\renewcommand{\headrulewidth}{0pt}" >> $tex_file
		sys echo "\fancyfoot[RO, LE] {Generated on $(date)}" >> $tex_file
		sys echo "\begin{document}" >> $tex_file
		sys echo "\setlength{\columnseprule}{0.1pt}" >> $tex_file
		sys echo "\section{Summary for ${thisFolder//_/\\_}}" >> $tex_file
		sys echo "\begin{multicols}{2}" >> $tex_file
		sys echo "\subsection{Genome Model}" >> $tex_file
		sys echo "${MODEL//_/\\_}" >> $tex_file

		sys if [[ ${vPlot} != "*"* ]]; then \
			echo "\subsection{V-Plot}" >> $tex_file; \
			echo "From ${vPlot//_/\\_}:\\\\" >> $tex_file; \
			echo "\includegraphics[width=0.5\textwidth]{${vPlot}}" >> $tex_file; \
			fi

		sys if [[ ${preseqGraph} != "*"* ]]; then \
			echo "\subsection{preseq lc\_extrap Yield Predicion}" >> $tex_file; \
			echo "From ${preseqGraph//_/\\_}:\\\\" >> $tex_file; \
			echo "\includegraphics[width=0.5\textwidth]{${preseqGraph}}" >> $tex_file; \
			fi

		//if [[ $preseqLog != "*"* ]];

		sys if [[ $input == "fastq" ]]; then \
			echo "\subsection{Library Complexity}" >> $tex_file; \
			echo "From ${bpcQCFile//_/\\_}:\\\\" >> $tex_file; \
			echo "\centerline{" >> $tex_file; \
			echo "\begin{tabular}{l|c}" >> $tex_file; \
			echo "\toprule" >> $tex_file; \
			echo "${BPCTABLE}" >> $tex_file; \
			echo "\end{tabular}" >> $tex_file; \
			echo "}" >> $tex_file; \
			if [[ ${insertSizeHist} != "*"* ]]; then \
				echo "\subsection{Insert size histogram}" >> $tex_file; \
				echo "From ${insertSizeHist//_/\\_}:\\\\" >> $tex_file; \
				echo "\includegraphics[width=0.5\textwidth]{${insertSizeHist}}" >> $tex_file; \
				fi; \
			echo "\subsection{Picard Duplication Metrics}" >> $tex_file; \
			echo "From ${dupQCFile//_/\\_}:\\\\" >> $tex_file; \
			echo "\begin{tabular}{l|c}" >> $tex_file; \
			echo "\toprule" >> $tex_file; \
			echo "${DUPTABLE}" >> $tex_file; \
			echo "\end{tabular}" >> $tex_file; \
			echo "\subsection{bowtie2 Alignment Log}" >> $tex_file; \
			echo "\textbf{${alignLogLastLine//'%'/'\%'}}\\\\" >> $tex_file; \
			echo "From ${alignLog//_/\\_}:\\\\" >> $tex_file; \
			echo "\scalebox{.6}{" >> $tex_file; \
			echo "\lstinputlisting{${alignLog}}" >> $tex_file; \
			echo "}" >> $tex_file; \
			fi

		sys echo "\end{multicols}  " >> $tex_file
		sys echo "%\pagebreak" >> $tex_file
		sys echo "\end{document}" >> $tex_file		

		//# now generate the pdf report (appears as *.report.pdf)
		//sys cd $o_dir
		sys pdflatex $tex_file
	}

	return out
}
*/

void help() {

	if ( is_cmd_line_arg_empty() ) {

		printHelp()
		exit
	}
}

bool is_input_legacy() {

	bool ret

	if ( args.size() >= 8 ) {
		ret = true

		for (int i=0; i<8;i++) {
			
			if ( args[i].startsWith("-") ) {
				ret = false
				break
			}
		}
	}

	return ret
}

bool is_input_fastq() {

	return input.toLower() == "fastq"
}

bool is_input_bam() {

	return input.toLower() == "bam"
}

bool is_input_filt_bam() {

	return input.toLower() == "filt_bam"
}

int get_num_rep() {

	if ( is_input_legacy() ) {
		return 1
	}
	else if ( is_input_fastq() ) {

		if ( get_num_rep_fastq()==2 ) {

			fastqs := get_fastqs( 0, 1 )			

			if ( !se && fastqs.size()<2 ) return 1
		}

		return get_num_rep_fastq()
	}
	else if ( is_input_bam() )  	return get_num_rep_bam()
	else if ( is_input_filt_bam() ) return get_num_rep_filt_bam()

	return 0
}
