#!/usr/bin/env bds
#vim: syntax=java


help == atac pipeline settings

se 		:= false 	help Single ended data.
trimmed_fastq 	:= false	help Skip fastq-trimming stage.
align	 	:= false	help Align only (no MACS2 peak calling or IDR or ataqc analysis).
subsample 	:= 0 		help # of reads to subsample replicates. Subsampled tagalign will be used for steps downstream (default: 0; no subsampling). 
nreads 		:= 25000000	help # reads to be subsampled for cross corr. analysis (default: 25000000).
true_rep 	:= false 	help No pseudo-replicates.
no_idr 		:= false 	help No IDR analysis on called peaks. This will change p-value threshold (0.1->0.01) in MACS2 peak calling.
no_ataqc 	:= false 	help No ATAQC 
csem	 	:= false	help Use CSEM for alignment.
mem_ataqc 	:= "15G"	help Max. memory for ATAQC (default: 15G).
smooth_win 	:= "150" 	help Smoothing window size for MACS2 peak calling (default: 150).
dnase_seq	:= false  	help DNase-Seq (no tn5 shifting, subsampling 50M by default for cross-corr. analysis).
idr_thresh 	:= "0.1"	help IDR threshold : -log_10(score) (default: 0.1).
old_trimmer 	:= false 	help Use legacy trim adapters (trim_galore and trimAdapter.py).

help() // show help contexts

include "modules/input_adapter.bds"
include "modules/input_fastq.bds"
include "modules/input_bam.bds"
include "modules/input_tagalign.bds"
include "modules/align_bowtie2.bds"
include "modules/align_trim_adapter.bds"
include "modules/postalign_bam.bds"
include "modules/postalign_bed.bds"
include "modules/callpeak_macs2.bds"
include "modules/callpeak_etc.bds"
include "modules/idr.bds"
include "modules/report.bds"


input := "" 


// Important output file names are stored in global variables (usually a string map string{} with a key with replicate id, pair id and peakcaller name)
// e.g. filt_bam{"1"} = filtered bam for replicate 1, peak_pr1{"2"} = peak file for pseudo replicate 1 of replicate 2

string{} fastq, align_log, bam, filt_bam, dup_qc, flagstat_nodup_qc, pbc_qc, xcor_qc, xcor_plot
string{} final_tag, final_tag_pr1, final_tag_pr2

string{} peak, peak_001, peak_pr1, peak_pr2
string peak_pooled, peak_pooled_001, peak_ppr1, peak_ppr2, peak_overlap

string{} gpeak, gpeak_001, gpeak_pr1, gpeak_pr2
string gpeak_pooled, gpeak_pooled_001, gpeak_ppr1, gpeak_ppr2, gpeak_overlap

string{} pval_bigwig_001, fc_bigwig_001

string{} idr_tr, idr_pr, idr_tr_png, idr_pr_png
string idr_ppr, idr_opt, idr_consv, idr_ppr_png

string idr_qc


main() 


void main() { // atac pipeline starts here

	init_atac()

	chk_input_data()

	atac()

	post_atac()

	do_idr()

	ataqc()

	report()
}

void init_atac() {
	
	se 		= get_conf_val_bool( se,		["se"] )
	trimmed_fastq 	= get_conf_val_bool( trimmed_fastq,	["trimmed_fastq"] )
	align		= get_conf_val_bool( align,		["align"] )
	subsample	= get_conf_val_int( subsample, 		["subsample"] )
	true_rep	= get_conf_val_bool( true_rep, 		["true_rep"] )
	no_idr 		= get_conf_val_bool( no_idr, 		["no_idr"] )
	no_ataqc 	= get_conf_val_bool( no_ataqc, 		["no_ataqc"] )
	csem 		= get_conf_val_bool( csem, 		["csem"] )
	mem_ataqc	= get_conf_val( mem_ataqc,		["mem_ataqc"] )
	smooth_win	= get_conf_val( smooth_win,		["smooth_win"] )
	dnase_seq 	= get_conf_val_bool( dnase_seq, 	["dnase_seq"] )
	idr_thresh 	= get_conf_val( idr_thresh, 		["idr_thresh"] )
	nreads 		= get_conf_val_int( nreads,		["nreads"] )
	old_trimmer 	= get_conf_val_bool( old_trimmer,	["old_trimmer"] )

	if ( input == "" ) { // determine input type
		
		if ( get_tag(0,1) != "" ) 	input = "tag"
		if ( get_filt_bam(0,1) != "" ) 	input = "filt_bam"
		if ( get_bam(0,1) != "" ) 	input = "bam"
		if ( get_fastq(0,1,1) != "" ) 	input = "fastq"
	}

	fraglen0 = true // set fragment length as zero for cross corr. analysis
	rm_chr_from_tag = "chrM"; // remove lines with chrM in _bam_to_tag

	print_atac()
}

void print_atac() {

	print( "\n\n== atac pipeline settings\n")
	print( "Single ended data set?\t\t: $se\n")
	print( "Input data type\t\t\t: $input\n")		
	print( "Fastqs are trimmed?\t\t: $trimmed_fastq\n")
	print( "# Replicates\t\t\t: "+ get_num_rep() + "\n")
	print( "MACS2 peak calling\t\t: " + !align + "\n")
	print( "Subsample # lines in replicates (0 if no subsampling)\t: $subsample\n")
	print( "Subsample # read for cross-corr. analysis \t: $nreads\n")	
	print( "No pseudo replicates\t\t: $true_rep\n")
	print( "No IDR analysis on peaks\t: $no_idr\n")
	print( "No ATAQC (advanced QC report)\t: $no_ataqc\n")
	print( "Use CSEM for alignment\t\t: $csem\n")
	print( "Max. memory for ATAQC\t\t: $mem_ataqc\n")
	print( "Smoothing window for MACS2\t: $smooth_win\n")
	print( "DNase Seq\t\t\t: $dnase_seq\n")
	print( "IDR threshold\t\t\t: $idr_thresh\n" )
	print( "Use legacy trim adapters \t: $old_trimmer\n" )
}

void chk_input_data() {

	print( "\n== checking atac inputs (data type = $input) ...\n" );

	if ( is_input_tag() && !se && subsample > 0 ) {
		print("Warning: Cannot subsample paried end tagaligns. Disabling subsampling...\n")
		subsample = 0		
	}

	if ( !is_input_fastq() && !no_ataqc ) {
		print("Warning: ATAQC is available for fastq inputs only. Disabling ATAQC...\n")
		no_ataqc = true
	}

	if ( !se && csem ) {
		error("CSEM (-csem) is not available for paired end data set!\n")
	}
	
	if ( get_num_rep() > 2 && !no_idr ) {
		print("Warning: IDR is available for one replicate or two replicates only. Disabling IDR...\n")
		no_idr 	= true
	}

	if ( is_input_fastq() ) chk_align_bwt2()
	if ( !align ) 		chk_callpeak_macs2()
	if ( !no_idr ) 		chk_idr()
	if ( !no_ataqc ) 	chk_ataqc()

	print("\n")

	// check data files
	suffix := se ? " (SE)" : " (PE)"

	string[] data_all

	for ( int rep=1; rep <= get_num_rep(); rep++) {

		string[] data

		string prefix

		if ( is_input_fastq() ) {
			prefix = "Rep$rep fastq" + suffix
			fastqs := get_fastqs( rep )

			if ( !trimmed_fastq && !old_trimmer ) { // check adapters
				adapters := get_adapters( rep )
				prefix += "\t(adapters : "

				if ( adapters.size()==0 ) {
					prefix += "automatically detecting)"
				}
				else {

					for ( int i=0; i<adapters.size(); i++) {
						prefix = prefix + adapters[i] + ", "
						if ( adapters[i] == "" ) {
							print("$prefix :\n")
							error("Adapter sequence (-adapter, -adapter[REP_ID] for SE or -adapter[REP_ID]_[PAIR_ID] for PE) must be defined for adapter trimmer!\n")
						}
					}
					prefix += ")"
				}
			}

			if ( !se && fastqs.size() < 2 ) error("A pair of fastqs are needed for replicate $rep (if it's single-ended add '-se')\n")
 
			if ( fastqs.size()==0 ) {
				data.push( "" )
			}
			else {
				for ( string fastq : fastqs ) data.push( fastq )
			}

			if ( fastqs.size()==0 ) error("No fastq defined for replicate $rep\n")
		}
		else if ( is_input_bam() ) {
			prefix = "Rep$rep bam" + suffix
			data.push( get_bam( 0, rep ) )
		}
		else if ( is_input_filt_bam() ) {
			prefix = "Rep$rep filt_bam" + suffix
			data.push( get_filt_bam( 0, rep ) )
		}
		else if ( is_input_tag() ) {
			prefix = "Rep$rep tagalign" + suffix
			data.push( get_tag( 0, rep ) )
		}
		else {
			error("Unspported input type (-input)!")
		}

		print("$prefix :\n")

		for ( string s : data ) {
			print("\t$s\n")
			if ( (s != "") && !path_exists(s) ) error("\t\tFile not found!\n")
		}

		if ( data[0] == "" ) {
			error( "\t$prefix missing!\n")
		}

		// check any duplicate input filename
		for ( string s : data ) {
			if ( is_in_array( get_basename( s ), get_basename( data_all ) ) ) \
				error( "\t$prefix has duplicate filename!\n")
		}

		data_all = concat( data_all, data )
	}

}

void chk_ataqc() {

	print("\nChecking parameters and data files for ATAQC. If you don't want ATAQC then add '-no_ataqc'\n\n")

	if ( species == "" ) 	error("Genome name is missing ( '-species [GENOME_NAME; hg19, mm9, ...]' )!\n" )
	if ( ref_fa == "" ) 	error("Specify your reference genome .fa ('-ref_fa [FA]')!\n")
	if ( tss_enrich == "" ) error("V plot index is missing ( '-tss_enrich' )!\n")
	if ( dnase == "" ) 	error("DNase bed is missing ( '-dnase' )!\n")
	if ( blacklist == "" ) 	error("Blacklist bed is missing ( '-blacklist' )!\n")
	if ( prom == "" ) 	error("Promoter bed is missing ( '-prom' )!\n")
	if ( enh == "" ) 	error("Enhancer bed is missing ( '-enh' )!\n")
	if ( reg2map == "" ) 	error("reg2map is missing ( '-reg2map' )!\n")
	if ( roadmap_meta == "" ) error("Roadmap metadata are missing ( '-roadmap_meta' )!\n")
}

void atac() {

	// filesize of input ( map with key $rep )
	int{} filesize

	for ( int rep=1; rep <= get_num_rep(); rep++) {

		// check file size to distribute_nth nth to each nth_app
		// determine # threads for each app related to alignment

		// get file size in bytes
		if ( is_input_fastq() ) {

			fastqs := get_fastqs( rep )
			filesize{rep} = (fastqs[0]).size()
			if ( fastqs.size() > 1) filesize{rep} += (fastqs[1]).size()				
		}
		else if ( is_input_bam() ) {

			filesize{rep} = (get_bam( 0, rep )).size()
		}
		else if ( is_input_filt_bam() ) {

			filesize{rep} = (get_filt_bam( 0, rep )).size()
		}
		else if ( is_input_tag() ) {

			filesize{rep} = (get_tag( 0, rep )).size()
		}
	}

	//// distribute # threads for each replicate/control
	nth_rep := distribute_nth( nth, filesize ) // distribute_nth # threads according to input filesize

	for (int rep=1; rep<=get_num_rep(); rep++) {
		
		if ( no_par ) _atac( rep, nth_rep{rep} )
		else 	  par _atac( rep, nth_rep{rep} )
	}

	wait_clear_tids()

	print( "\n== Done atac()\n" )	
}

void _atac( int rep, int nth_rep ) {

	if ( se ) 	_atac_SE( rep, nth_rep )
	else 		_atac_PE( rep, nth_rep )
	
	if ( !no_par ) monitor_par()
}

void _atac_SE( int rep, int nth_rep ) {

	info := "rep$rep"

	aln_o_dir := mkdir( "$out_dir/align/$info" ) // create align output directory
	qc_o_dir  := mkdir( "$out_dir/qc/$info" ) // create qc output dir.

	string bam_
	
	if ( is_input_fastq() ) {

		fastqs := get_fastqs( rep )

		fastq{rep} = fastqs[0]

		string p1
		
		if ( trimmed_fastq ) {
			p1 = fastqs[0]
		}
		else {
			if ( old_trimmer ) {
				p1 = _trim_adapters_old( fastqs[0], aln_o_dir, info, nth_rep )
			}
			else {
				adapters := get_adapters( rep )

				if ( adapters.size()==0 ) {
					adapter_log := _detect_adapter( fastqs[0], qc_o_dir, info )
					wait

					adapter := _parse_adapter_log( adapter_log )

					print("\nDetected adapter for $info (SE) : $adapter\n")
					adapters.add( adapter )
				}

				p1 = _trim_adapters( fastqs[0], adapters[0], aln_o_dir, info, nth_rep, "" )
			}
			wait
		}

 		if ( csem ) {
			( bam_, align_log{rep} ) = _bowtie2_csem( p1, aln_o_dir, qc_o_dir, info, nth_rep, !trimmed_fastq )
			bam{rep} = bam_
		}
		else {
			( bam_, align_log{rep} ) = _bowtie2( p1, aln_o_dir, qc_o_dir, info, nth_rep, !trimmed_fastq )
			bam{rep} = bam_
		}
		wait
	}

	string filt_bam_

	if ( is_input_fastq() || is_input_bam() ) {

		if ( is_input_bam() ) {
			bam_ = get_bam( 0, rep )
			bam{rep} = bam_
		}

		( filt_bam_, dup_qc{rep}, flagstat_nodup_qc{rep}, pbc_qc{rep} ) \
						= _dedup_bam( bam_, aln_o_dir, qc_o_dir, info, nth_rep )
		filt_bam{rep} = filt_bam_
		wait
	}

	string tag

	if ( is_input_fastq() || is_input_bam() || is_input_filt_bam() ) {

		if ( is_input_filt_bam() ) {
			filt_bam_ = get_filt_bam( 0, rep )
			filt_bam{rep} = filt_bam_
		}

		tag = _bam_to_tag( filt_bam_, aln_o_dir, info )
		wait
	}

	string final_tag_, final_tag_pr1_, final_tag_pr2_

	if ( is_input_fastq() || is_input_bam() || is_input_filt_bam() || is_input_tag() ) {

		if ( is_input_tag() ) tag = get_tag( 0, rep )

		string subsampled_tag

		if ( subsample != 0 ) {
			subsampled_tag = _subsample_tag( tag, subsample, aln_o_dir, info )
			wait
		}
		else {
			subsampled_tag = tag
		}

		if ( dnase_seq ) {
			final_tag_ = subsampled_tag
		}
		else { 
			final_tag_ = _tn5_shift_tag( subsampled_tag, aln_o_dir, info )
		}
		final_tag{rep} = final_tag_
		wait

		if ( !true_rep ) {

			aln_pr1_o_dir := mkdir( "$out_dir/align/pseudo_reps/$info/pr1" )
			aln_pr2_o_dir := mkdir( "$out_dir/align/pseudo_reps/$info/pr2" )

			( final_tag_pr1_, final_tag_pr2_ ) = _spr( final_tag_, aln_pr1_o_dir, aln_pr2_o_dir, info )
			final_tag_pr1{rep} = final_tag_pr1_
			final_tag_pr2{rep} = final_tag_pr2_
			wait
		}
	}

	// call peaks
	if ( !align ) {

		// cross-corr. analysis
		subsampled_tag_xcor := _subsample_tag( tag, nreads, aln_o_dir, info )
		wait

		// distribute # threads (nth) to macs2 peak calling and xcor
		int nth_xcor, nth_tmp // weight=2 for peak n sig, weight=1 for peak only and xcor
		(nth_xcor, nth_tmp) = distribute_nth( nth_rep, true_rep ? [3,1] : [2,1] )

		// xcor
		( xcor_qc{rep}, xcor_plot{rep} ) = _xcor( subsampled_tag_xcor, qc_o_dir, info, nth_xcor, info ) // 1 cpu

		// call peaks

		hrchy 		:= info
		peak_o_dir 	:= mkdir( "$out_dir/peak/macs2/$info")
		sig_o_dir 	:= mkdir( "$out_dir/signal/macs2/$info" )

		// macs2 pval thresh = 0.01
		( peak_001{rep}, gpeak_001{rep}, fc_bigwig_001{rep}, pval_bigwig_001{rep} ) \
				= _macs2( final_tag_, "$smooth_win", 0.01, true, \
						peak_o_dir, sig_o_dir, info, hrchy )
		( peak{rep}, gpeak{rep} )  \
				= _macs2( final_tag_, "$smooth_win", 0.1, false, \
						peak_o_dir, sig_o_dir, info, hrchy )
		if ( !true_rep ) {

			pr1_hrchy 	:= "pseudo_reps/$info/pr1"
			pr2_hrchy 	:= "pseudo_reps/$info/pr2"

			peak_pr1_o_dir 	:= mkdir( "$out_dir/peak/macs2/$pr1_hrchy" )
			peak_pr2_o_dir 	:= mkdir( "$out_dir/peak/macs2/$pr2_hrchy" )
			sig_pr1_o_dir 	:= mkdir( "$out_dir/signal/macs2/$pr1_hrchy" )
			sig_pr2_o_dir 	:= mkdir( "$out_dir/signal/macs2/$pr2_hrchy" )

			( peak_pr1{rep}, gpeak_pr1{rep} ) \
				= _macs2( final_tag_pr1_, "$smooth_win", 0.1, false, \
						peak_pr1_o_dir, sig_pr1_o_dir, info+"-pr1", pr1_hrchy )

			( peak_pr2{rep}, gpeak_pr2{rep} ) \
				= _macs2( final_tag_pr2_, "$smooth_win", 0.1, false, \
						peak_pr2_o_dir, sig_pr2_o_dir, info+"-pr2", pr2_hrchy )
		}
	}
}

void _atac_PE( int rep, int nth_rep ) {

	info := "rep$rep"

	aln_o_dir := mkdir( "$out_dir/align/$info" ) // create align output directory
	qc_o_dir  := mkdir( "$out_dir/qc/$info" ) // create qc output dir.

	string bam_

	if ( is_input_fastq() ) {

		fastqs := get_fastqs( rep )

		fastq{rep+",1"} = fastqs[0]
		fastq{rep+",2"} = fastqs[1]

		string p1, p2

		if ( trimmed_fastq ) {
			p1 = fastqs[0]
			p2 = fastqs[1]
		}
		else {
			if ( old_trimmer ) {
				( p1, p2 ) = _trim_adapters_PE_old( fastqs[0], fastqs[1], aln_o_dir, info, nth_rep )
			}
			else {
				adapters := get_adapters( rep )

				if ( adapters.size()==0 ) {
					adapter_log1 := _detect_adapter( fastqs[0], qc_o_dir, info )
					adapter_log2 := _detect_adapter( fastqs[1], qc_o_dir, info )
					wait

					adapter1 := _parse_adapter_log( adapter_log1 )
					adapter2 := _parse_adapter_log( adapter_log2 )

					print("\nDetected adapter for $info (PE) : $adapter1, $adapter2\n")
					adapters.add( adapter1 )
					adapters.add( adapter2 )
				}

				( p1, p2 ) = _trim_adapters_PE( fastqs[0], fastqs[1], adapters[0], adapters[1], aln_o_dir, info, nth_rep )
			}
			wait
		}

		( bam_, align_log{rep} ) = _bowtie2_PE( p1, p2, aln_o_dir, qc_o_dir, info, nth_rep, !trimmed_fastq )
		bam{rep} = bam_
		wait
	}

	string filt_bam_

	if ( is_input_fastq() || is_input_bam() ) {

		if ( is_input_bam() ) {
			bam_ = get_bam( 0, rep )
			bam{rep} = bam_
		}

		(filt_bam_, dup_qc{rep}, flagstat_nodup_qc{rep}, pbc_qc{rep} ) \
			= _dedup_bam_PE( bam_, aln_o_dir, qc_o_dir, info, nth_rep )
		filt_bam{rep} = filt_bam_
		wait
	}

	string bedpe, subsampled_bedpe, tag

	if ( is_input_fastq() || is_input_bam() || is_input_filt_bam() ) {

		if ( is_input_filt_bam() ) {
			filt_bam_ = get_filt_bam( 0, rep )
			filt_bam{rep} = filt_bam_
		}

		bedpe = _bam_to_bedpe( filt_bam_, aln_o_dir, info )
		wait 

		if ( subsample!=0 ) {

			subsampled_bedpe = _subsample_bedpe( bedpe, subsample, aln_o_dir, info )
		}
		else {
			subsampled_bedpe = bedpe
		}
		wait

		tag = _bedpe_to_tag( subsampled_bedpe, aln_o_dir, info )			
		wait
	}

	string final_tag_, final_tag_pr1_, final_tag_pr2_

	if ( is_input_fastq() || is_input_bam() || is_input_filt_bam() || is_input_tag() ) {

		if ( is_input_tag() ) tag = get_tag( 0, rep )

		string aln_pr1_o_dir, aln_pr2_o_dir
		string tag_pr1, tag_pr2

		if ( !true_rep ) {

			aln_pr1_o_dir = mkdir( "$out_dir/align/pseudo_reps/$info/pr1" )
			aln_pr2_o_dir = mkdir( "$out_dir/align/pseudo_reps/$info/pr2" )

			if ( is_input_tag() ) {
				( tag_pr1, tag_pr2 ) = _spr_tag_PE( tag, aln_pr1_o_dir, aln_pr2_o_dir, info )
			}
			else {
				( tag_pr1, tag_pr2 ) = _spr_PE( subsampled_bedpe, aln_pr1_o_dir, aln_pr2_o_dir, info )
			}
			wait
		}

		if ( dnase_seq ) {
			final_tag_ = tag
		}
		else {
			final_tag_ = _tn5_shift_tag( tag, aln_o_dir, info )
		}
		final_tag{rep} = final_tag_

		if ( !true_rep ) {

			if ( dnase_seq ) {
				final_tag_pr1_ = tag_pr1
				final_tag_pr2_ = tag_pr2
			}
			else {
				final_tag_pr1_ = _tn5_shift_tag( tag_pr1, aln_pr1_o_dir, info )
				final_tag_pr2_ = _tn5_shift_tag( tag_pr2, aln_pr2_o_dir, info )					
			}
			final_tag_pr1{rep} = final_tag_pr1_
			final_tag_pr2{rep} = final_tag_pr2_
		}
		wait
	}

	if ( !align ) {

		string subsampled_tag_xcor

		if ( bedpe == "" ) {
			subsampled_tag_xcor = _subsample_tag_PE_xcor( tag, nreads, aln_o_dir, info )
		}
		else {
			subsampled_tag_xcor = _subsample_bedpe_to_tag_xcor( bedpe, nreads, aln_o_dir, info )
		}
		wait

		// distribute # threads (nth) to macs2 peak calling and xcor
		int nth_xcor, nth_tmp // weight=2 for peak n sig, weight=1 for peak only and xcor
		(nth_xcor, nth_tmp) = distribute_nth( nth_rep, true_rep ? [3,1] : [2,1] )

		( xcor_qc{rep}, xcor_plot{rep} ) = _xcor( subsampled_tag_xcor, qc_o_dir, info, nth_xcor, info ) // 1 cpu

		// call peaks

		hrchy 		:= info
		peak_o_dir 	:= mkdir( "$out_dir/peak/macs2/$info")
		sig_o_dir 	:= mkdir( "$out_dir/signal/macs2/$info" )

		( peak_001{rep}, gpeak_001{rep}, fc_bigwig_001{rep}, pval_bigwig_001{rep} ) \
				= _macs2( final_tag_, "$smooth_win", 0.01, true, \
						peak_o_dir, sig_o_dir, info, hrchy )
		( peak{rep}, gpeak{rep} ) = _macs2( final_tag_, "$smooth_win", 0.1, false, \
						peak_o_dir, sig_o_dir, info, hrchy )

		if ( !true_rep ) {

			pr1_hrchy := "pseudo_reps/$info/pr1"
			pr2_hrchy := "pseudo_reps/$info/pr2"

			peak_pr1_o_dir 	:= mkdir( "$out_dir/peak/macs2/$pr1_hrchy" )
			peak_pr2_o_dir 	:= mkdir( "$out_dir/peak/macs2/$pr2_hrchy" )
			sig_pr1_o_dir 	:= mkdir( "$out_dir/signal/macs2/$pr1_hrchy" )
			sig_pr2_o_dir 	:= mkdir( "$out_dir/signal/macs2/$pr2_hrchy" )

			( peak_pr1{rep}, gpeak_pr1{rep} ) \
				= _macs2( final_tag_pr1_, "$smooth_win", 0.1, false, \
						peak_pr1_o_dir, sig_pr1_o_dir, info+"-pr1", pr1_hrchy )

			( peak_pr2{rep}, gpeak_pr2{rep} ) \
				= _macs2( final_tag_pr2_, "$smooth_win", 0.1, false, \
						peak_pr2_o_dir, sig_pr2_o_dir, info+"-pr2", pr2_hrchy )
		}
	}
}

void post_atac() { // for pooling two replicates and calling peaks on them

	if ( align ) return

	string[] tags, tags_pr1, tags_pr2

	for ( int rep=1; rep<=get_num_rep(); rep++ ) {

		tags.add( final_tag{rep} )

	 	if ( !true_rep ) {
			tags_pr1.add( final_tag_pr1{rep} )
			tags_pr2.add( final_tag_pr2{rep} )
		}
	}
	
	if ( get_num_rep() > 1 ) {

	 	aln_pooled_o_dir := mkdir( "$out_dir/align/pooled_rep" )

		final_tag_pooled := _pool_tag( tags, aln_pooled_o_dir, "reps" )

			// graphviz, filetable for pooled tagalign
			string[] graph_in
			for ( int rep=1; rep<=get_num_rep(); rep++ ) graph_in.add("tagalign_(rep$rep)")

			_add_to_graphviz( graph_in, tags, ["tagalign_(pooled)"], [final_tag_pooled] )
			_add_to_filetable(["L1_align/pooled_rep/tagalign"], [final_tag_pooled] )
			//

		// Make shifted tags for pooled pseudo rep (ppr).
		string final_tag_ppr1, final_tag_ppr2

		if ( !true_rep ) {

		 	aln_ppr1_o_dir   := mkdir( "$out_dir/align/pooled_pseudo_reps/ppr1" )
		 	aln_ppr2_o_dir   := mkdir( "$out_dir/align/pooled_pseudo_reps/ppr2" )

			final_tag_ppr1_ := _pool_tag( tags_pr1, aln_ppr1_o_dir, "reps-pr1" )
			final_tag_ppr2_ := _pool_tag( tags_pr2, aln_ppr2_o_dir, "reps-pr2" )
			final_tag_ppr1 = final_tag_ppr1_ // thread safety
			final_tag_ppr2 = final_tag_ppr2_

				// graphviz, filetable for ppr
				string[] graph_in_pr1, graph_in_pr2
				for ( int rep=1; rep<=get_num_rep(); rep++ ) {
					graph_in_pr1.add("tagalign_(rep$rep-pr1)")
					graph_in_pr2.add("tagalign_(rep$rep-pr2)")
				}

				_add_to_graphviz( graph_in_pr1, tags_pr1, ["tagalign_(ppr1)"], [final_tag_ppr1_] )
				_add_to_graphviz( graph_in_pr2, tags_pr2, ["tagalign_(ppr2)"], [final_tag_ppr2_] )
				_add_to_filetable(["L1_align/pooled_pseudo_reps/ppr1/tagalign"], [final_tag_ppr1_] )
				_add_to_filetable(["L1_align/pooled_pseudo_reps/ppr2/tagalign"], [final_tag_ppr2_] )
				//
		}
		wait_clear_tids()

		peak_o_dir 	:= mkdir( "$out_dir/peak/macs2")
		sig_o_dir 	:= mkdir( "$out_dir/signal/macs2")

		pooled_hrchy 	:= "pooled_rep"
		pooled_o_dir	:= mkdir( "$peak_o_dir/$pooled_hrchy" )
		pooled_sig_o_dir:= mkdir( "$sig_o_dir/$pooled_hrchy" )

		( peak_pooled_001, gpeak_pooled_001, \
			fc_bigwig_001{"pooled"}, \
			pval_bigwig_001{"pooled"} ) \
						= _macs2( final_tag_pooled, "$smooth_win", 0.01, true, \
						pooled_o_dir, pooled_sig_o_dir, "pooled", pooled_hrchy )

		( peak_pooled, gpeak_pooled ) = _macs2( final_tag_pooled, "$smooth_win", 0.1, false, \
						pooled_o_dir, pooled_sig_o_dir, "pooled", pooled_hrchy )

		if ( !true_rep ) {

			ppr1_hrchy 	:= "pooled_pseudo_reps/ppr1"
			ppr2_hrchy 	:= "pooled_pseudo_reps/ppr2"
			ppr1_o_dir 	:= mkdir( "$peak_o_dir/$ppr1_hrchy" )
			ppr2_o_dir 	:= mkdir( "$peak_o_dir/$ppr2_hrchy" )
			ppr1_sig_o_dir 	:= mkdir( "$sig_o_dir/$ppr1_hrchy" )
			ppr2_sig_o_dir 	:= mkdir( "$sig_o_dir/$ppr2_hrchy" )

			// call peaks on ppr
			( peak_ppr1, gpeak_ppr1 ) = _macs2( final_tag_ppr1, "$smooth_win", 0.1, false, \
							ppr1_o_dir, ppr1_sig_o_dir, "ppr1", ppr1_hrchy )

			( peak_ppr2, gpeak_ppr2 ) = _macs2( final_tag_ppr2, "$smooth_win", 0.1, false, \
							ppr2_o_dir, ppr2_sig_o_dir, "ppr2", ppr2_hrchy )
		}
	}
	wait_clear_tids()

	print( "\n== Done post_atac()\n" )
}

void do_idr() {
	
	if ( align || no_idr ) return

	string{} filt_peak, filt_peak_pr1, filt_peak_pr2
	string filt_peak_pooled, filt_peak_ppr1, filt_peak_ppr2

	string{} filt_gpeak, filt_gpeak_pr1, filt_gpeak_pr2
	string filt_gpeak_pooled, filt_gpeak_ppr1, filt_gpeak_ppr2

	// take top $npeak_filt lines from narrowpeaks for idr
	for ( int rep=1; rep<=get_num_rep(); rep++ ) {

		filt_peak{rep} 	= _filt_top_peaks( peak{rep}, "", "rep$rep", "peak_macs2", "macs2/rep$rep" )
		filt_gpeak{rep} = _filt_top_peaks( gpeak{rep}, "", "rep$rep", "gpeak_macs2", "macs2/rep$rep" )

		if ( !true_rep ) {

			filt_peak_pr1{rep}  = _filt_top_peaks( peak_pr1{rep}, "", "rep$rep-pr1", "peak_macs2", "macs2/pseudo_reps/rep$rep/pr1" )
			filt_peak_pr2{rep}  = _filt_top_peaks( peak_pr2{rep}, "", "rep$rep-pr2", "peak_macs2", "macs2/pseudo_reps/rep$rep/pr2" )
			filt_gpeak_pr1{rep} = _filt_top_peaks( gpeak_pr1{rep}, "", "rep$rep-pr1", "gpeak_macs2", "macs2/pseudo_reps/rep$rep/pr1" )
			filt_gpeak_pr2{rep} = _filt_top_peaks( gpeak_pr2{rep}, "", "rep$rep-pr2", "gpeak_macs2", "macs2/pseudo_reps/rep$rep/pr2" )
		}
	}
 
	if ( get_num_rep() > 1 ) {

		filt_peak_pooled = _filt_top_peaks( peak_pooled, "", "pooled", "peak_macs2", "macs2/pooled_rep" )
		filt_gpeak_pooled= _filt_top_peaks( gpeak_pooled, "", "pooled", "gpeak_macs2", "macs2/pooled_rep" )

		if ( !true_rep ) {

			filt_peak_ppr1 	   = _filt_top_peaks( peak_ppr1, "", "ppr1", "peak_macs2", "macs2/pooled_pseudo_reps/ppr1" )
			filt_peak_ppr2 	   = _filt_top_peaks( peak_ppr2, "", "ppr2", "peak_macs2", "macs2/pooled_pseudo_reps/ppr2" )
			filt_gpeak_ppr1    = _filt_top_peaks( gpeak_ppr1, "", "ppr1", "gpeak_macs2", "macs2/pooled_pseudo_reps/ppr1" )
			filt_gpeak_ppr2    = _filt_top_peaks( gpeak_ppr2, "", "ppr2", "gpeak_macs2", "macs2/pooled_pseudo_reps/ppr2" )
		}
	}
	
	wait_clear_tids()

	// naive overlap peak
	
	overlap_o_dir := mkdir( "$out_dir/peak/macs2/overlap" )

	if ( get_num_rep() == 1 ) {

		if ( !true_rep ) {
			peak_overlap = _naive_overlap_peak( "narrowPeak", filt_peak{1}, filt_peak_pr1{1}, filt_peak_pr2{1}, overlap_o_dir, \
									  "peak", "peak_macs2_filt", "macs2/overlap" )
			gpeak_overlap = _naive_overlap_peak( "gappedPeak", filt_gpeak{1}, filt_gpeak_pr1{1}, filt_gpeak_pr2{1}, overlap_o_dir, \
									  "gpeak", "gpeak_macs2_filt", "macs2/overlap" )
		}
	}
	else {
		peak_overlap = _naive_overlap_peak( "narrowPeak", filt_peak_pooled, map_to_array( filt_peak ), \
								  filt_peak_ppr1, filt_peak_ppr2, overlap_o_dir, \
								  "peak", "peak_macs2_filt", "macs2/overlap" )
		gpeak_overlap = _naive_overlap_peak( "gappedPeak", filt_gpeak_pooled, map_to_array( filt_gpeak ), \
								  filt_gpeak_ppr1, filt_gpeak_ppr2, overlap_o_dir, \
								  "gpeak", "gpeak_macs2_filt", "macs2/overlap" )
	}

	// do IDR

	idr_o_dir := mkdir( "$out_dir/peak/idr" )

	for ( int i=1; i<=get_num_rep(); i++ ) {

		for ( int j=i+1; j<=get_num_rep(); j++ ) {

			idr_true_o_dir 	:= mkdir( "$idr_o_dir/true_reps/rep$i-rep$j" )

			(idr_tr{"$i,$j"}, idr_tr_png{"$i,$j"} ) = _idr2( filt_peak{i}, filt_peak{j}, filt_peak_pooled, idr_thresh, "p.value", idr_true_o_dir, "rep$i-rep$j", \
									"peak_macs2_filt", ["rep$i","rep$j","pooled"], "true_reps/rep$i-rep$j" )
		}

		if ( !true_rep ) {

			idr_pr_o_dir := mkdir( "$idr_o_dir/pseudo_reps/rep$i" )

			(idr_pr{i}, idr_pr_png{i}) = _idr2( filt_peak_pr1{i}, filt_peak_pr2{i}, filt_peak{i}, idr_thresh, "p.value", idr_pr_o_dir, "rep$i-pr", \
							"peak_macs2_filt", ["rep$i-pr1","rep$i-pr2","rep$i"], "pseudo_reps/rep$i" )
		}
	}

	if ( !true_rep && get_num_rep() > 1 ) {

		idr_ppr_o_dir := mkdir( "$idr_o_dir/pooled_pseudo_reps" )

		(idr_ppr, idr_ppr_png) = _idr2( filt_peak_ppr1, filt_peak_ppr2, filt_peak_pooled, idr_thresh, "p.value", idr_ppr_o_dir, "ppr", \
						"peak_macs2_filt", ["ppr1","ppr2","pooled"], "pooled_pseudo_reps" )
	}

	wait_clear_tids()

	qc_o_dir    := mkdir( "$out_dir/qc" ) // create qc output dir.

	// get final idr qc score, use idr final idr narrow peak files from true, pseudo and pooled pseudo reps
	(idr_qc, idr_opt, idr_consv) = _idr_final_qc( idr_tr, idr_pr, idr_ppr, idr_o_dir, qc_o_dir, "" )

	wait_clear_tids()

	print( "\n== Done do_idr()\n" )	
}

void ataqc() {

	if ( no_ataqc || align ) return
	
	for (int rep=1; rep<=get_num_rep(); rep++) {

		if ( no_par ) _ataqc( rep )
		else 	  par _ataqc( rep )
	}

	wait_clear_tids()

	print( "\n== Done ataqc()\n" )
}

void _ataqc( int rep ) {

	info := "rep$rep"

	qc_o_dir 	:= mkdir( "$out_dir/qc/$info" )
	aln_o_dir 	:= mkdir( "$out_dir/align/$info" ) // create align output directory

	if ( bam.hasKey(rep) ) {

		string idr_, graph_in_idr

		if ( no_idr ) {
			idr_ = ""
			graph_in_idr = ""
		}
		else if ( get_num_rep() == 1 ) {
			idr_ = idr_pr{1}
			graph_in_idr = "idr_peak_(rep1-pr)"
		}
		else {
			idr_ = idr_opt
			graph_in_idr = "idr_peak_(opt)"
		}

		if ( se ) {

			_ataqc( fastq{rep}, "", bam{rep}, align_log{rep}, pbc_qc{rep}, \
				dup_qc{rep}, filt_bam{rep}, final_tag{rep}, pval_bigwig_001{rep}, peak_001{rep}, \
				peak_overlap, idr_, qc_o_dir, info, graph_in_idr )
		}
		else {
			_ataqc( fastq{rep+",1"}, fastq{rep+",2"}, bam{rep}, align_log{rep}, pbc_qc{rep}, \
				dup_qc{rep}, filt_bam{rep}, final_tag{rep}, pval_bigwig_001{rep}, peak_001{rep}, \
				peak_overlap, idr_, qc_o_dir, info, graph_in_idr )
		}
	}

	if ( !no_par ) monitor_par()
}

string[] _ataqc( string fastq1, string fastq2, string bam, string align_log, string pbc_log, \
		 string dup_log, string filt_bam, string bed, string bigwig, string peak, \
		 string peak_naive_overlap, string idr_peak, \
		 string o_dir, string info, string graph_in_idr ) {
	
	prefix 		:= replace_dir( rm_ext( fastq1, ["fastq","fq"] ), o_dir ) + ( (fastq2!="") ? ".PE2SE" : "" )
	
	html 		:= "$prefix"+"_qc.html"
	txt 		:= "$prefix"+"_qc.txt"
	prefix_basename := get_basename( prefix )

	param_fastq 	:= (fastq2!="") ? "--fastq1 $fastq1 --fastq2 $fastq2" : "--fastq1 $fastq1"
	param_overlap 	:= (peak_naive_overlap!="") ? "--naive_overlap_peaks $peak_naive_overlap" : ""
	param_idr 	:= (idr_peak!="") ? "--idr_peaks $idr_peak" : ""

	in  	:= (fastq2!="") ? [ fastq1, fastq2, bam, align_log, pbc_log, dup_log, filt_bam, bed, bigwig, peak ] \
				: [ fastq1, bam, align_log, pbc_log, dup_log, filt_bam, bed, bigwig, peak ]
	out 	:= [ html, txt ] //, gc_plot, hist_graph, lg_vplot, vplot, signal ]

	wait_par( cpus )

	taskName:= "ataqc "+info
	mem := get_res_mem(mem_ataqc,1);
	max_java_heap 	:= number_with_binary_prefix( (mem==-1) ? parse_mem( mem_ataqc ) : mem )

	tid := task( out<-in ) {

		sys $shcmd_init

		// To prevent java heap space error (Exception in thread "main" java.lang.OutOfMemoryError: Java heap space)
		sys export _JAVA_OPTIONS="-Xms256M -Xmx$max_java_heap -XX:ParallelGCThreads=1"

		sys cd $o_dir

		sys $script_dir/ataqc/run_ataqc.py \
		    --workdir $o_dir \
		    --outdir $o_dir \
		    --outprefix $prefix_basename \
		    --genome $species \
		    --ref $ref_fa \
		    --tss $tss_enrich \
		    --dnase $dnase \
		    --blacklist $blacklist \
		    --prom $prom \
		    --enh $enh \
		    --reg2map $reg2map \
		    --meta $roadmap_meta \
		    --pbc $pbc_log\
		    $param_fastq \
		    --alignedbam $bam \
		    --alignmentlog $align_log \
		    --coordsortbam $bam \
		    --duplog $dup_log \
		    --finalbam $filt_bam \
		    --finalbed $bed \
		    --bigwig $bigwig \
		    --peaks $peak \
		    $param_overlap \
		    $param_idr

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	path_in := ( fastq2!="" ) ? [fastq1, fastq2, bam, filt_bam, bed, bigwig, peak, peak_naive_overlap, idr_peak] \
				  : [fastq1,         bam, filt_bam, bed, bigwig, peak, peak_naive_overlap, idr_peak]

	graph_in := ( fastq2!="" ) ? ["fastq1_($info)","fastq2_($info)","bam_($info)","filt_bam_($info)",\
					"tagalign_($info)","p-val_sig._0.01_($info)","peak_macs2_0.01_($info)",\
					"peak_macs2_filt_(overlap)", graph_in_idr] : \
				     ["fastq_($info)","bam_($info)","filt_bam_($info)",\
					"tagalign_($info)","p-val_sig._0.01_($info)","peak_macs2_0.01_($info)", \
					"peak_macs2_filt_(overlap)", graph_in_idr]
	
	graph_out := ["ataqc rpt_($info)"] 

	_add_to_graphviz( graph_in, path_in, graph_out, out, "ataqc_($info)", grp_color_ataqc )
	_add_to_filetable( ["L1_qc/$info/ataqc"], out )

	return out
}

void report() {

	wait_clear_tids()

	html := _html_filetable() 	// treeview for directory and file structure 
	html += _html_atac_tracks() 	// epigenome browser tracks
	html += _html_graphviz()	// graphviz workflow diagram
	html += _html_atac_QC()	// show QC tables and images

	report( html )

	print( "\n== Done report()\n" )
}

string _html_atac_QC() {

	string[] align_qcs, dup_qcs, flagstat_nodup_qcs, pbc_qcs, xcor_qcs, xcor_plots
	string[] align_headers, dup_headers, flagstat_nodup_headers, pbc_headers, xcor_headers

	for ( int rep=1; rep <= get_num_rep(); rep++) {

		info := "rep$rep"
		key := "$rep"

		//html_rep_by_id += _html_xcor( info, 	[ info ], [ xcor_qc{key} ], [ xcor_plot{key} ], [ info ] )

		if ( xcor_qc.hasKey( key ) )	{
			xcor_qcs 		+= xcor_qc{key}
			xcor_plots 		+= xcor_plot{key}
			xcor_headers 		+= info
		}

		if ( align_log.hasKey( key ) ) 		align_qcs 		+= align_log{key}
		if ( dup_qc.hasKey( key ) ) 		dup_qcs 		+= dup_qc{key}
		if ( flagstat_nodup_qc.hasKey( key ) )	flagstat_nodup_qcs 	+= flagstat_nodup_qc{key}
		if ( pbc_qc.hasKey( key ) ) 		pbc_qcs			+= pbc_qc{key}

		if ( align_log.hasKey( key ) ) 		align_headers 		+= info
		if ( dup_qc.hasKey( key ) ) 		dup_headers 		+= info
		if ( flagstat_nodup_qc.hasKey( key ) )	flagstat_nodup_headers 	+= info
		if ( pbc_qc.hasKey( key ) ) 		pbc_headers		+= info

	}

	html := "<div id='atac_qc'>"
	
	html += _parse_align_log_to_html( "all", 	align_headers, align_qcs, align_headers ) 
	html += _parse_dup_to_html( "all", 		dup_headers, dup_qcs, dup_headers )
	html += _parse_flagstat_to_html( "all, filtered",flagstat_nodup_headers, flagstat_nodup_qcs, flagstat_nodup_headers )
	html += _parse_pbc_to_html( "all", 		pbc_headers, pbc_qcs, pbc_headers )
	html += _parse_xcor_to_html( "all", 		xcor_headers, xcor_qcs, xcor_plots, xcor_headers )

	// if idr qc's exists, add them to html

	if ( idr_qc != "" ) html += _parse_idr_to_html( "idr", idr_qc )

	for ( int i=1; i<=get_num_rep(); i++ ) {

		for ( int j=i+1; j<=get_num_rep(); j++ ) {
			if ( idr_tr_png.hasKey("$i,$j") ) html += _html_img( idr_tr_png{"$i,$j"}, 800, "true reps (rep$i-rep$j)" ) + "&nbsp"
		}

		if ( !true_rep ) {
			if ( idr_pr_png.hasKey(i) ) html += _html_img( idr_pr_png{i}, 800, "rep$i pseudo-reps" ) + "&nbsp"
		}
	}

	if ( idr_ppr_png != "" ) html += _html_img( idr_ppr_png, 800, "pooled pseudo-reps" ) + "&nbsp"

	html += "</div><br>"
	return html
}

string _html_atac_tracks() {

	string[] track_files, track_types, track_names

	if ( pval_bigwig_001.hasKey( "pooled" ) ) { track_types += "bigwig"; track_names += "$title pval (pooled)"; track_files += pval_bigwig_001{"pooled"} }

	if ( peak_overlap != "" ) { track_types += "hammock"; track_names += "$title peak overlap"; track_files += _peak_to_hammock( peak_overlap ) }
	if ( gpeak_overlap != "" ) { track_types += "hammock"; track_names += "$title gpeak overlap"; track_files += _peak_to_hammock( gpeak_overlap ) }
	if ( idr_opt != "" ) {	track_types += "hammock"; track_names += "$title peak idr (opt. set)"; track_files += _peak_to_hammock( _get_idr_peak_trk( idr_opt ) ) } // find IDR tracks

	for (int rep=1; rep<=get_num_rep(); rep++) {

		if ( pval_bigwig_001.hasKey( "$rep" ) ) { track_types += "bigwig"; track_names += "$title pval (rep$rep)"; track_files += pval_bigwig_001{rep} }
		if ( peak_001.hasKey( "$rep" ) ) { track_types += "hammock"; track_names += "$title peak (rep$rep)"; track_files += _peak_to_hammock( peak_001{rep} ) }
		if ( idr_pr.hasKey(rep) ) {	track_types += "hammock"; track_names += "$title peak idr (rep$rep-pr)"; track_files += _peak_to_hammock( _get_idr_peak_trk( idr_pr{rep} ) ) }
	}

	html := _html_epg_browser_viz( track_files, track_types, track_names )

	return html
}

void help() {

	if ( is_cmd_line_arg_empty() ) {

		printHelp()
		exit
	}
}

bool is_input_fastq() {

	return input.toLower() == "fastq"
}

bool is_input_bam() {

	return input.toLower() == "bam"
}

bool is_input_filt_bam() {

	return input.toLower() == "filt_bam"
}

bool is_input_tag() {

	return input.toLower() == "tag"
}

int get_num_rep() {

	if ( is_input_fastq() ) {

		if ( get_num_rep_fastq()==2 ) {

			fastqs := get_fastqs( 0, 1 )			

			if ( !se && fastqs.size()<2 ) return 1
		}

		return get_num_rep_fastq()
	}
	else if ( is_input_bam() )  	return get_num_rep_bam()
	else if ( is_input_filt_bam() ) return get_num_rep_filt_bam()
	else if ( is_input_tag() ) 	return get_num_rep_tag()

	return 0
}

string[] get_fastqs( int rep ) {

	fastqs := get_fastqs( 0, rep )

	// correct if user skipped replicate id like (-fastq[PAIR]) instead of (-fastq[REP]_[PAIR])
	if ( !se && (get_num_rep()==1) && (fastqs.size()<2) && (get_fastq( 0, 2, 1 )!="") ) \
		fastqs.add( get_fastq( 0, 2, 1 ) )

	return fastqs
}

string[] get_adapters( int rep ) {

	adapters := get_adapters( 0, rep )

	// correct if user skipped replicate id like (-adapter[PAIR]) instead of (-adapter[REP]_[PAIR])
	if ( !se && (get_num_rep()==1) && (adapters.size()<2) && (get_adapter( 0, 2, 1 )!="") ) \
		adapters.add( get_adapter( 0, 2, 1 ) )

	if ( adapters.size() == 0 ) adapters = get_adapters( 0, 1 )

	fastqs := get_fastqs( 0, rep )

	if ( fastqs.size() > 1 && adapters.size() == 1 ) adapters.add( adapters[0] )

	return adapters
}
