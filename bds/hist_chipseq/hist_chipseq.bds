#!/usr/bin/env bds

include "../modules_align_map.bds"


// cmd line arg wrapper and help
string gensz 		= ""				help Genome size; hs for human, mm for mouse (default: hs)
int nth_macs2		= 2 				help Number of threads for MACS2 (default: 2)

// parameters
string GENOMESIZE 	= gensz
int NTHREADS_MACS2 	= nth_macs2



// pipeline starts here
read_param_general()
read_param_align_map()
read_param_hist_chipseq()

align_map_xcor_spr_pspr()

macs2()


// functions
void read_param_hist_chipseq() {

	// read parameters
	if ( conf_file_exists() ) {
		
		if ( conf.hasKey("GENOMESIZE") ) 		GENOMESIZE 		= rm_comment( conf{ "GENOMESIZE" } )
		if ( conf.hasKey("NTHREADS_MACS2") )	NTHREADS_MACS2	= parse_int( conf{ "NTHREADS_MACS2" } )
	}

	print("GENOMESIZE = $GENOMESIZE\n");
	//print("FDR = $FDR\n");
	print("NTHREADS_MACS2 = $NTHREADS_MACS2\n");

}

void macs2() {

	if ( QC_ONLY ) return

	print( "\nMACS2...\n" );

	FRAGLEN := get_fraglen( 0, 1 ) // get it from rep1
	print("FRAGLEN for MACS2: $FRAGLEN \n")
	
	// prepare for tagAlign files
	fastqs_Rep1 	:= get_fastqs( 0, 1 )
	fastqs_Rep2 	:= get_fastqs( 0, 2 ) // check if rep2 doesn't exist
	suffix_PE 		:= ".filt.srt.nodup.PE2SE.tagAlign.gz"
	suffix_SE 		:= ".filt.nodup.srt.SE.tagAlign.gz"
	suffix 			:= fastqs_Rep1.size()==2 ? suffix_PE : suffix_SE
	suffix_PSR_PE 	:= ".filt.nodup.PE2SE"
	suffix_PSR_SE 	:= ".filt.nodup.SE"
	suffix_PSR 		:= fastqs_Rep1.size()==2 ? suffix_PSR_PE : suffix_PSR_SE

	DATASET_PREFIX := get_ofprefix( 0 )
	
	REP1_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix
	REP2_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix
	POOLED_TA_FILE :="$DATASET_PREFIX"+"_Rep0.tagAlign.gz"
	REP1_PR1_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix_PSR + ".pr1.tagAlign.gz"
	REP1_PR2_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix_PSR + ".pr2.tagAlign.gz"
	REP2_PR1_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix_PSR + ".pr1.tagAlign.gz"
	REP2_PR2_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix_PSR + ".pr2.tagAlign.gz"
	PPR1_TA_FILE :="$DATASET_PREFIX"+"_Rep0.pr1.tagAlign.gz"
	PPR2_TA_FILE :="$DATASET_PREFIX"+"_Rep0.pr2.tagAlign.gz"

	ctl_fastqs_Rep1 	:= get_fastqs( 1, 1 )
	ctl_fastqs_Rep2 	:= get_fastqs( 1, 2 ) // check if rep2 doesn't exist
	ctl_suffix_PE 		:= ".filt.srt.nodup.PE2SE.tagAlign.gz"
	ctl_suffix_SE 		:= ".filt.nodup.srt.SE.tagAlign.gz"
	ctl_suffix 			:= ctl_fastqs_Rep1.size()==2 ? ctl_suffix_PE : ctl_suffix_SE
	ctl_suffix_PSR_PE 	:= ".filt.nodup.PE2SE"
	ctl_suffix_PSR_SE 	:= ".filt.nodup.SE"
	ctl_suffix_PSR 		:= ctl_fastqs_Rep1.size()==2 ? ctl_suffix_PSR_PE : ctl_suffix_PSR_SE

	CTL_DATASET_PREFIX := get_ofprefix( 1 )

	CTL_REP1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix
	CTL_REP2_TA_FILE := ctl_fastqs_Rep2.size()>0 ? "$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix : CTL_REP1_TA_FILE
	CTL_POOLED_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.tagAlign.gz"
	CTL_REP1_PR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix_PSR + ".pr1.tagAlign.gz"
	CTL_REP1_PR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix_PSR + ".pr2.tagAlign.gz"
	CTL_REP2_PR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix_PSR + ".pr1.tagAlign.gz"
	CTL_REP2_PR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix_PSR + ".pr2.tagAlign.gz"
	CTL_PPR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.pr1.tagAlign.gz"
	CTL_PPR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.pr2.tagAlign.gz"

	PEAK_OUTPUT_DIR := OUTPUT_DIR + "/peaks"
	PEAK_OUTPUT_DIR.mkdir() 

	///////////////////////////////// MACS2

	// narrow peak
 	REP1_PEAK_FILE		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_TA_FILE, CTL_REP1_TA_FILE, "narrowPeak" )
 	REP2_PEAK_FILE 		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_TA_FILE, CTL_REP2_TA_FILE, "narrowPeak" )
 	POOLED_PEAK_FILE 	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, POOLED_TA_FILE, CTL_POOLED_TA_FILE, "narrowPeak" )
 	REP1_PR1_PEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, "narrowPeak" )
 	REP1_PR2_PEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, "narrowPeak" )
	REP2_PR1_PEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, "narrowPeak" )
	REP2_PR2_PEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, "narrowPeak" )
	PPR1_PEAK_FILE		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, PPR1_TA_FILE, CTL_PPR1_TA_FILE, "narrowPeak" )
	PPR2_PEAK_FILE		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, PPR2_TA_FILE, CTL_PPR2_TA_FILE, "narrowPeak" )

	// broad peak
 	REP1_BPEAK_FILE 	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_TA_FILE, CTL_REP1_TA_FILE, "broadPeak" )
 	REP2_BPEAK_FILE 	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_TA_FILE, CTL_REP2_TA_FILE, "broadPeak" )
 	POOLED_BPEAK_FILE 	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, POOLED_TA_FILE, CTL_POOLED_TA_FILE, "broadPeak" )
 	REP1_PR1_BPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, "broadPeak" )
 	REP1_PR2_BPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, "broadPeak" )
	REP2_PR1_BPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, "broadPeak" )
	REP2_PR2_BPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, "broadPeak" )
	PPR1_BPEAK_FILE		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, PPR1_TA_FILE, CTL_PPR1_TA_FILE, "broadPeak" )
	PPR2_BPEAK_FILE		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, PPR2_TA_FILE, CTL_PPR2_TA_FILE, "broadPeak" )

	// gapped peak
 	REP1_GPEAK_FILE 	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_TA_FILE, CTL_REP1_TA_FILE, "gappedPeak" )
 	REP2_GPEAK_FILE 	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_TA_FILE, CTL_REP2_TA_FILE, "gappedPeak" )
 	POOLED_GPEAK_FILE 	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, POOLED_TA_FILE, CTL_POOLED_TA_FILE, "gappedPeak" )
 	REP1_PR1_GPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, "gappedPeak" )
 	REP1_PR2_GPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, "gappedPeak" )
	REP2_PR1_GPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, "gappedPeak" )
	REP2_PR2_GPEAK_FILE	:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, "gappedPeak" )
	PPR1_GPEAK_FILE		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, PPR1_TA_FILE, CTL_PPR1_TA_FILE, "gappedPeak" )
	PPR2_GPEAK_FILE		:= get_macs2_out_peak_filename( PEAK_OUTPUT_DIR, PPR2_TA_FILE, CTL_PPR2_TA_FILE, "gappedPeak" )

	run_macs2( "Rep1", PEAK_OUTPUT_DIR, 		REP1_TA_FILE, CTL_REP1_TA_FILE, REP1_PEAK_FILE, REP1_RPEAK_FILE, PEAK_REP1_CCSCORE, FRAGLEN )
	run_macs2( "Rep2", PEAK_OUTPUT_DIR, 		REP2_TA_FILE, CTL_REP2_TA_FILE, REP2_PEAK_FILE, REP2_RPEAK_FILE, PEAK_REP2_CCSCORE, FRAGLEN )
	run_macs2( "Pooled", PEAK_OUTPUT_DIR, 	POOLED_TA_FILE, CTL_POOLED_TA_FILE, POOLED_PEAK_FILE, POOLED_RPEAK_FILE, PEAK_POOLED_CCSCORE, FRAGLEN )
	run_macs2( "Rep1_PR1", PEAK_OUTPUT_DIR, 	REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, REP1_PR1_PEAK_FILE, REP1_PR1_RPEAK_FILE, PEAK_REP1_PR1_CCSCORE, FRAGLEN )
	run_macs2( "Rep1_PR2", PEAK_OUTPUT_DIR, 	REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, REP1_PR2_PEAK_FILE, REP1_PR2_RPEAK_FILE, PEAK_REP1_PR2_CCSCORE, FRAGLEN )
	run_macs2( "Rep2_PR1", PEAK_OUTPUT_DIR, 	REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, REP2_PR1_PEAK_FILE, REP2_PR1_RPEAK_FILE, PEAK_REP2_PR1_CCSCORE, FRAGLEN )
	run_macs2( "Rep2_PR2", PEAK_OUTPUT_DIR, 	REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, REP2_PR2_PEAK_FILE, REP2_PR2_RPEAK_FILE, PEAK_REP2_PR2_CCSCORE, FRAGLEN )
	run_macs2( "PPR1", PEAK_OUTPUT_DIR, 		PPR1_TA_FILE, CTL_PPR1_TA_FILE, PPR1_PEAK_FILE, PPR1_RPEAK_FILE, PEAK_PPR1_CCSCORE, FRAGLEN )
	run_macs2( "PPR2", PEAK_OUTPUT_DIR, 		PPR2_TA_FILE, CTL_PPR2_TA_FILE, PPR2_PEAK_FILE, PPR2_RPEAK_FILE, PEAK_PPR2_CCSCORE, FRAGLEN )

	wait

}

string get_macs2_out_peak_filename( string dir, string ta1, string ta2, string type ) {

	return dir + "/" \
 			+ rm_str_at_end( ta1.baseName(),".gz" ) \
 			+ "_VS_" + rm_str_at_end( ta2.baseName(),".gz" ) + "." + type + ".gz" \
 			
}

void run_macs2( string taskname, string out_dir, string ta, string ctl_ta, string npeak, string rpeak, string ccscore, string fraglen ) {
	

//	task( taskName := "macs2 " + taskname, cpus := NTHREADS_MACS2, timeout := WALLTIME, mem := MEMORY * M, \
//		[npeak, rpeak, ccscore] <- [ta, ctl_ta] ) {
	task( taskName := "macs2 " + taskname, cpus := NTHREADS_MACS2, timeout := WALLTIME, mem := MEMORY * M) {

		sys $PRELOAD

		//==========================================
		//# Generate narrow peaks and preliminary signal tracks
		//============================================

		sys macs2 callpeak -t $ta -c $ctl_ta -f BED -n $out_dir/$taskname -g $GENOMESIZE -p 1e-2 --nomodel --shift 0 --extsize $fraglen --keep-dup all -B --SPMR

		//# Sort by Col8 in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys sort -k 8gr,8gr $out_dir/$taskname_peaks.narrowPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > $out_dir/$taskname.narrowPeak.gz

		//# remove additional files
		//#rm -f $out_dir/$taskname_peaks.xls #$out_dir/$taskname_peaks.bed ${peakFile}_summits.bed
		sys rm -f $out_dir/$taskname_peaks.xls $out_dir/$taskname_peaks.narrowPeak $out_dir/$taskname_summits.bed

		//===========================================
		//# Generate Broad and Gapped Peaks
		//============================================
		sys macs2 callpeak -t $ta -c $ctl_ta -f BED -n $out_dir/$taskname -g $GENOMESIZE -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen --keep-dup all


		//# Sort by Col8 (for broadPeak) or Col 14(for gappedPeak)  in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys sort -k 8gr,8gr $out_dir/$taskname_peaks.broadPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > $out_dir/$taskname.broadPeak.gz

		sys sort -k 14gr,14gr $out_dir/$taskname_peaks.gappedPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > $out_dir/$taskname.gappedPeak.gz

		//# remove additional files
		//#rm -f $out_dir/$taskname_peaks.xls #$out_dir/$taskname_peaks.bed ${peakFile}_summits.bed
		sys rm -f $out_dir/$taskname_peaks.xls \
		  $out_dir/$taskname_peaks.broadPeak \
		  $out_dir/$taskname_peaks.gappedPeak \
		  $out_dir/$taskname_summits.bed

		//===========================================
		//# For Fold enrichment signal tracks
		//============================================
		//sys CHRSIZEFILE=<path_of_file_containing_chromosome_sizes>
		//# This file is a tab delimited file with 2 columns Col1 (chromosome name), Col2 (chromosome size in bp).

		sys macs2 bdgcmp -t $out_dir/$taskname_treat_pileup.bdg -c $out_dir/$taskname_control_lambda.bdg --outdir $out_dir -o $taskname_FE.bdg -m FE

		//# Remove coordinates outside chromosome sizes (stupid MACS2 bug)
		sys slopBed -i $out_dir/$taskname_FE.bdg -g $CHROM_SIZES -b 0 |   awk '{if ($3 != -1) print $0}' |  bedClip stdin $CHROM_SIZES $out_dir/$taskname.fc.signal.bedgraph

		sys rm -f $out_dir/$taskname_FE.bdg

		//# Convert bedgraph to bigwig
		sys bedGraphToBigWig $out_dir/$taskname.fc.signal.bedgraph $CHROM_SIZES $out_dir/$taskname.fc.signal.bwigwig

		sys rm -f $out_dir/$taskname.fc.signal.bedgraph

		//===========================================
		//# For -log10(p-value) signal tracks
		//============================================

		//# Compute sval = min(no. of reads in ChIP, no. of reads in control) / 1,000,000

		//#chipReads=$(wc -l $ta | awk '"'"'{printf "%f", $1/1000000}'"')"
		sys chipReads=$(zcat $ta | wc -l | awk '{printf "%f", $1/1000000}');



		//#controlReads=$(wc -l $ctl_ta | awk '"'"'{printf "%f", $1/1000000}'"')
		sys controlReads=$(zcat $ctl_ta | wc -l | awk '{printf "%f", $1/1000000}');

		//#sval=$(echo "${chipReads} ${controlReads}" | awk '"'"'$1>$2{printf "%f",$2} $1<=$2{printf "%f",$1}'"')
		sys sval=$(echo "${chipReads} ${controlReads}" | awk '$1>$2{printf "%f",$2} $1<=$2{printf "%f",$1}');

		sys macs2 bdgcmp -t $out_dir/$taskname_treat_pileup.bdg -c $out_dir/$taskname_control_lambda.bdg --outdir $out_dir -o $taskname_ppois.bdg -m ppois -S "${sval}"

		//# Remove coordinates outside chromosome sizes (stupid MACS2 bug)
		sys slopBed -i $out_dir/$taskname_ppois.bdg -g $CHROM_SIZES -b 0 |   awk '{if ($3 != -1) print $0}' |  bedClip stdin $CHROM_SIZES $out_dir/$taskname.pval.signal.bedgraph

		sys rm -rf $out_dir/$taskname_ppois.bdg

		//# Convert bedgraph to bigwig
		sys bedGraphToBigWig $out_dir/$taskname.pval.signal.bedgraph $CHROM_SIZES $out_dir/$taskname.pval.signal.bwigwig

		sys rm -f $out_dir/$taskname.pval.signal.bedgraph
		sys rm -f $out_dir/$taskname_treat_pileup.bdg ${peakFile}_control_lambda.bdg

	}
}
