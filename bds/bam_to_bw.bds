#!/usr/bin/env bds

include "modules/align.bds"
include "modules/peakcall_macs2.bds"


// for bam data set
bam 		:= ""		help Bam or nodup_bam for replicate 1.
bam_PE 		:= false 	help Add it if bam replicate 1 is paired end (default: false).


init_bam_to_bw() // read configruation file if exists

set_shell_env() // initialization (mkdir out_dir. and set shell environment)

_bam_to_bw()



void init_bam_to_bw() {

	if ( conf_file_exists() ) {
		bam 		= get_conf_val( bam, 			["bam", "bam1"] )
		bam_PE 		= get_conf_val_bool( bam_PE, 		["bam_PE", "bam1_PE"] )
	}

	// create output directory
	out_dir = mkdir_path( out_dir ) // mkdir and get absolute path	
}

void set_shell_env() {

	// set shell environments automatically
	dir_sw_BDS  := "$HOME/software_bds" // location of dependencies installed by the script "install_dependencies.sh"

	if ( kundaje_lab ) {

		print("\nAutomatically adding environment variables... (Kundaje lab cluster found) \n\n")

		SHCMD_INIT = SHCMD_INIT + " . /etc/profile.d/modules.sh; module add bwa/0.7.3 samtools/0.1.19 bedtools/2.19.1 ucsc_tools/3.0.9 picard-tools/1.92;" \
					+ " module add phantompeakqualtools/default idr/latest align2rawsignal/2.0 MACS2/2.1.0 java/latest r/2.15.1 gem/2.6;" \
					+ " export PATH=${PATH}:/software/idrCode; " \
					+ " export _JAVA_OPTIONS='-Xms256M -Xmx512M -XX:ParallelGCThreads=1'; export MAX_JAVA_MEM='8G'; export MALLOC_ARENA_MAX=4"

                SHCMD_INIT = SHCMD_INIT.replace( ";;", ";" )

	}
}

void _bam_to_bw() {

	string nodup_bam, nodup_bam_idx
	string tag, subsampled_tag

	if ( bam_PE ) {
		( nodup_bam, nodup_bam_idx ) = _bam_to_nodup_bam_PE( bam, out_dir, "" )
		wait

		nmsrt_bam := _bam_to_nmsrt_bam( nodup_bam, out_dir, "" )
		wait

		bedpe := _bam_to_bedpe( nmsrt_bam, out_dir, "" )
		wait 

		subsampled_tag = _subsample_bedpe( bedpe, out_dir, "" )
	}
	else {
		( nodup_bam, nodup_bam_idx ) = _bam_to_nodup_bam( bam, out_dir, "" )
		wait

		tag = _bam_to_tag( nodup_bam, out_dir, "" )
		wait

		subsampled_tag = _subsample_tag( tag, out_dir, "" )
	}
	wait		

	string xcor_score, xcor_plot
	(xcor_score, xcor_plot) = _xcor( subsampled_tag, out_dir, "" )
	wait

	fraglen := get_fraglen( xcor_score )

	bed := _bam_to_bed_non_chrM( nodup_bam, out_dir, "" )
	wait

	string npeakfile, fc_bw, pval_bw
	( npeakfile, fc_bw, pval_bw ) = _macs2_bed( bed, fraglen, out_dir, "" )
}
