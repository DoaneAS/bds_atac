#!/usr/bin/env bds

helpUnsorted := true // help( $ bds chipseq.bds -h ) will not be sorted

include "../modules/align.bds"
include "../modules/peakcall.bds"
include "../modules/report.bds"
include "../modules/conf.bds"


bool kundaje_lab 	= false		help Set it true if you run the pipeline on Kundaje lab servers (automatically set environments, default: false)

string fastq1 		= ""		help Read1 fastq.gz
string fastq2		= ""		help Read2 fastq.gz

int fraglen 		= 75 		help Read fragment length (default: 75)


help()

read_conf()

init()

atac()



void read_conf() {

	if ( conf_file_exists() ) {

		// kundaje lab support (automatic shell env. settings)
		kundaje_lab 	= get_conf_val_bool( kundaje_lab,	["KUNDAJE_LAB"] )

		mapq_thresh 	= get_conf_val_int( mapq_thresh,	["MAPQ_THRESH"] )
		bwt_idx 	= get_conf_val( bwt_idx, 		["BWT_INDEX_NAME", "BWT_IDX", "BWT_IDX_NAME", "BOWTIE_IDX", "BOWTIE_INDEX"] )

		nth_bwt2 	= get_conf_val_int( nth_bwt2,		["NTHREADS_BWT2", "NTH_BWT2", "CPU_BWT2", "NUMTHREADS"] )
		wt_bwt2 	= get_conf_val( wt_bwt2, 		["WALLTIME_BWT2", "WT_BWT2", "TIMEOUT_BWT2"] )
		mem_bwt2 	= get_conf_val( mem_bwt2, 		["MEMORY_BWT2", "MEM_BWT2"] )

		gensz		= get_conf_val( gensz, 			["GENSZ", "GENOMESIZE", "GENOME_SIZE", "GENOME_SZ", "GEN_SZ"] )
		chrsz		= get_conf_val( chrsz, 			["CHROMSIZE","CHROMSIZES","CHROM_SIZES", "CHRSZ", "CHR_SZ"] )

		fraglen 	= get_conf_val_int( fraglen,		["FRAGLEN", "FRAG_LEN"] )

		fastq1 		= get_conf_val( fastq1, 		["FASTQ1", "READ1"] )
		fastq2 		= get_conf_val( fastq2, 		["FASTQ2", "READ2"] )

		vplot_idx 	= get_conf_val( vplot_idx, 		["VPLOTINDEX", "VPLOT_INDEX", "VPLOTIDX", "VPLOT_IDX", "V_INDEX"] )
	}
	else { // if there is no conf. file take first five arguments as input

		bwt_idx 	= chk_file( args[0], ".1.bt2" )
		fastq1 		= chk_file( args[1], "" )
		fastq2 		= chk_file( args[2], "" )
		nth_bwt2	= args[3].parseInt()
		gensz		= args[4]
		chrsz		= chk_file( args[5], "" )
		vplot_idx 	= chk_file( args[6], "" )
		out_dir 	= mkdir_path( args[7] )
	}
}

void init() {

	// create output dir.	
	out_dir = mkdir_path( out_dir ) // mkdir and get absolute path

	if ( kundaje_lab ) {

		print("\n\nAutomatically adding environment variables... (kundaje_lab == true) \n\n")

		SHCMD_INIT = SHCMD_INIT + " . /etc/profile.d/modules.sh; module add bowtie/2.2.4; module add samtools/1.2; module add bedtools/2.21.0;" \
					+ " module add picard-tools/1.129; module add ucsc_tools/3.0.9; module add MACS2/2.1.0; module add java/latest;" \
					+ " module add preseq/1.0.2; module add texlive/2013;" \
					+ " export _JAVA_OPTIONS='-Xms256M -Xmx512M -XX:ParallelGCThreads=1'; export MAX_JAVA_MEM='8G'; export MALLOC_ARENA_MAX=4"
		SHCMD_INIT = SHCMD_INIT.replace( ";;", ";" )
	}
}

void atac() {

	info := "" // no info needed for atac

	string p1, p2
	( p1, p2 ) = _trim_adapters( fastq1, fastq2, out_dir, info )

	wait // hold parallel

	string bam, log
	( bam, log ) = _bowtie2( p1, p2, out_dir, info )

	wait

	string nodup_bam, nodup_bam_idx
	( nodup_bam, nodup_bam_idx ) = _bam_to_nodup_bam_PE( bam, out_dir, info )

	wait

	string srt_bam, srt_bai 
	( srt_bam, srt_bai ) = _bam_to_srt_bam( bam, out_dir, info )

	wait

	// jobs go in parallel
	pdf := _preseq( srt_bam, out_dir, info )
	
	png := _vplot( srt_bam, out_dir, info )

	bed := _bam_to_bed_non_chrM( nodup_bam, out_dir, info )

	wait

	string npeakfile, fc_bw, pval_bw
	( npeakfile, fc_bw, pval_bw ) = _macs2_bed( bed, "$fraglen", out_dir, info )

	wait

	_report_atac( pdf, png, out_dir, info )
}

void help() {

	if ( is_cmd_line_arg_empty() ) {

		print("\n")
		print(" Usage 1 (command line argument): \n")
		print("\n")
		print("\t\$ bds atac.bds [BOWTIE_INDEX] [READ1] [READ2] [NTHREADS_BWT2] [GENOMESIZE] [CHROMSIZES] [VPLOT_INDEX] [OUTPUT_DIR] \n")
		print("\n")
		print(" Usage 2 (command line argument): \n")
		print("\n")
		print("\t\$ bds atac.bds -bwt_idx [BOWTIE_INDEX] \\ \n")
		print("\t\t -fastq1 [READ1] \\ \n")
		print("\t\t -fastq2 [READ2] \\ \n")
		print("\t\t -nth_bwt2 [NTHREADS_BWT2] \\ \n")
		print("\t\t -gensz [GENOMESIZE] \\ \n")
		print("\t\t -chrsz [CHROMSIZES] \\ \n")
		print("\t\t -vplot_idx [VPLOT_INDEX] \\ \n")
		print("\t\t -out_dir [OUTPUT_DIR] \n")
		print("\n")
		print(" Usage 3 (configruation file): \n")
		print("\n")
		print("\t\$ bds atac.bds [CONF_FILE]\n")
		print("\n")
		print("\t=== [CONF_FILE] contents ===\n")
		print("\tBWT_IDX= [BOWTIE_INDEX]\n")
		print("\tFASTQ1= [READ1]\n")
		print("\tFASTQ2= [READ2]\n")
		print("\tNTH_BWT2= [NTHREADS_BWT2]\n")
		print("\tGENSZ= [GENOMESIZE]\n")
		print("\tCHRSZ= [CHROMSIZES]\n")
		print("\tVPLOT_IDX= [VPLOT_INDEX]\n")
		print("\tOUT_DIR= [OUTPUT_DIR]\n")
		print("\n")
		print(" For Sun Grid Engine (SGE) cluster use\n")
		print("\n")
		print("\t\$ bds -s sge atac.bds ... \n")
		print("\n")

		exit
	}
}

string[] _report_atac( string pdf, string png, string out_dir, string info ) {

	tex_file := "$out_dir/report.tex"
	pdf_file := "$out_dir/report.pdf"

	// a lot of inputs so I picked up just two
	in 	:= [pdf, png]
	out 	:= [tex_file, pdf_file]

	task( taskName:= "bwa_aln "+info, \
		cpus:=nth, mem:=parse_mem(mem), timeout:=parse_time(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		sys cd $out_dir
		sys thisFolder=$out_dir

		//# figure out what we've aligned to
		sys MODEL=$bwt_idx

		//# insert size histogram graph file name
		sys insertSizeHist="$(echo *.hist_graph.pdf)"

		//# PRESEQ graph file name
		sys preseqGraph="$(echo *.preseq.pdf)"

		//# bowtie2 alignment log file name
		sys alignLog="$(echo *.align.log)"
		sys alignLogLastLine=$(tail -n 1 ${alignLog})

		//# preseq log file name
		sys preseqLog="$(echo *.preseq.log)"

		//# V-Plot graph file name
		sys vPlot="$(echo *.vect.png)"

		//# Picard duplicate log file name
		sys dupQCFile=$(echo *.dup.qc)
		sys dupQCHeadings=$(sed -n 7p ${dupQCFile})
		sys dupQCHeadings=${dupQCHeadings//_/\\\\_} #moar reformatting
		sys IFS=$'\t' read -a dupQCHeadings <<< "${dupQCHeadings}"

		sys dupQCData=$(sed -n 8p ${dupQCFile})
		sys IFS=$'\t' read -a dupQCData <<< "${dupQCData}"

		sys START=0
		sys END=${#dupQCHeadings[@]}
		sys DUPTABLE=""

		//## here we build up the tex styled table contents
		sys for (( c=${START}; c<${END}; c++ )) do \
				if [ "${c}" = "$((END-1))" ]; then \
					DUPTABLE="${DUPTABLE}${dupQCHeadings[${c}]}& ${dupQCData[${c}]} \\\\ \bottomrule"; \
				else \
					DUPTABLE="${DUPTABLE}${dupQCHeadings[${c}]}& ${dupQCData[${c}]} \\\\ \midrule "; \
				fi \
			done

		//# library complexity data file name
		sys bpcQCFile=$(echo *.pbc.qc)

		//# library complexity data file contents
		sys declare -a bpcLabels=("TotalReadPairs" "DistinctReadPairs" "OneReadPair" "TwoReadPairs" "NRF=Distinct/Total" "PBC1=OnePair/Distinct" "PBC2=OnePair/TwoPair")
		sys bpcQC=$(cat ${bpcQCFile})
		sys IFS=$'\t' read -a bpcData <<< "${bpcQC}"

		sys START=0
		sys END=${#bpcLabels[@]}
		sys BPCTABLE=""

		//## here we build up the tex styled table contents
		sys for (( c=${START}; c<${END}; c++ )) do \
				if [ "${c}" = "$((END-1))" ]; then \
					BPCTABLE="${BPCTABLE}${bpcLabels[${c}]}& ${bpcData[${c}]} \\\\ \bottomrule"; \
				else \
					BPCTABLE="${BPCTABLE}${bpcLabels[${c}]}& ${bpcData[${c}]} \\\\ \midrule "; \
				fi \
			done			

		//# Now we generate the tex language file that defines the report
		//# warning! two layers of command interpretaion in here (bash&tex),
		//# not for the faint of heart!
		sys echo "\documentclass{article}" > $tex_file
		sys echo "\usepackage{graphicx}" >> $tex_file
		sys echo "\usepackage{multicol}" >> $tex_file
		sys echo "\usepackage{listings}" >> $tex_file
		sys echo "\usepackage{grffile}" >> $tex_file
		sys echo "\usepackage[margin=0.5in]{geometry}" >> $tex_file
		sys echo "\usepackage{booktabs}" >> $tex_file
		sys echo "\usepackage{hyphenat}" >> $tex_file
		sys echo "\usepackage{fancyhdr}" >> $tex_file
		sys echo "\pagestyle{fancy}" >> $tex_file
		sys echo "\fancyhf{}" >> $tex_file
		sys echo "\renewcommand{\headrulewidth}{0pt}" >> $tex_file
		sys echo "\fancyfoot[RO, LE] {Generated on $(date)}" >> $tex_file
		sys echo "\begin{document}" >> $tex_file
		sys echo "\setlength{\columnseprule}{0.1pt}" >> $tex_file
		sys echo "\section{Summary for ${thisFolder//_/\\_}}" >> $tex_file
		sys echo "\begin{multicols}{2}" >> $tex_file
		sys echo "\subsection{Genome Model}" >> $tex_file
		sys echo "${MODEL//_/\\_}" >> $tex_file
		sys echo "\subsection{V-Plot}" >> $tex_file
		sys echo "From ${vPlot//_/\\_}:\\\\" >> $tex_file
		sys echo "\includegraphics[width=0.5\textwidth]{${vPlot}}" >> $tex_file
		sys echo "\subsection{preseq lc\_extrap Yield Predicion}" >> $tex_file
		sys echo "From ${preseqGraph//_/\\_}:\\\\" >> $tex_file
		sys echo "\includegraphics[width=0.5\textwidth]{${preseqGraph}}" >> $tex_file
		sys echo "\subsection{Library Complexity}" >> $tex_file
		sys echo "From ${bpcQCFile//_/\\_}:\\\\" >> $tex_file
		sys echo "\centerline{" >> $tex_file
		sys echo "\begin{tabular}{l|c}" >> $tex_file
		sys echo "\toprule" >> $tex_file
		sys echo "${BPCTABLE}" >> $tex_file
		sys echo "\end{tabular}" >> $tex_file
		sys echo "}" >> $tex_file
		sys echo "\subsection{Insert size histogram}" >> $tex_file
		sys echo "From ${insertSizeHist//_/\\_}:\\\\" >> $tex_file
		sys echo "\includegraphics[width=0.5\textwidth]{${insertSizeHist}}" >> $tex_file
		sys echo "\subsection{Picard Duplication Metrics}" >> $tex_file
		sys echo "From ${dupQCFile//_/\\_}:\\\\" >> $tex_file
		sys echo "\begin{tabular}{l|c}" >> $tex_file
		sys echo "\toprule" >> $tex_file
		sys echo "${DUPTABLE}" >> $tex_file
		sys echo "\end{tabular}" >> $tex_file
		sys echo "\subsection{bowtie2 Alignment Log}" >> $tex_file
		sys echo "\textbf{${alignLogLastLine//'%'/'\%'}}\\\\" >> $tex_file
		sys echo "From ${alignLog//_/\\_}:\\\\" >> $tex_file
		sys echo "\scalebox{.6}{" >> $tex_file
		sys echo "\lstinputlisting{${alignLog}}" >> $tex_file
		sys echo "}" >> $tex_file
		sys echo "\end{multicols}  " >> $tex_file
		sys echo "%\pagebreak" >> $tex_file
		sys echo "\end{document}" >> $tex_file		

		//# now generate the pdf report (appears as *.report.pdf)
		//sys cd $out_dir
		sys pdflatex $tex_file
	}

	return out
}




