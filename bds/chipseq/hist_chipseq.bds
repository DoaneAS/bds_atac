#!/usr/bin/env bds

include "modules_align_map.bds"


// cmd line arg wrapper and help
string gensz 		= ""				help Genome size; hs for human, mm for mouse (default: hs)
int nth_macs2		= 2 				help Number of threads for MACS2 (default: 2)

// parameters
string GENOMESIZE 	= gensz
int NTHREADS_MACS2 	= nth_macs2




// pipeline starts here
read_param_general()
read_param_align_map()
read_param_hist_chipseq()

align_map_xcor_spr_pspr()

macs2()

create_sig_trk();


// functions
void read_param_hist_chipseq() {

	// read parameters
	if ( conf_file_exists() ) {
		
		if ( conf.hasKey("GENOMESIZE") ) 		GENOMESIZE 		= rm_comment( conf{ "GENOMESIZE" } )
		if ( conf.hasKey("NTHREADS_MACS2") )	NTHREADS_MACS2	= parse_int( conf{ "NTHREADS_MACS2" } )
	}

	print("GENOMESIZE = $GENOMESIZE\n");
	print("NTHREADS_MACS2 = $NTHREADS_MACS2\n");

}

void macs2() {

	if ( QC_ONLY ) return

	print( "\nMACS2...\n" );

	FRAGLEN := get_fraglen( 0, 1 ) // get it from rep1
	print("FRAGLEN for MACS2: $FRAGLEN \n")
	
	// prepare for tagAlign files
	fastqs_Rep1 	:= get_fastqs( 0, 1 )
	fastqs_Rep2 	:= get_fastqs( 0, 2 ) // check if rep2 doesn't exist
	suffix_PE 		:= ".filt.srt.nodup.PE2SE.tagAlign.gz"
	suffix_SE 		:= ".filt.nodup.srt.SE.tagAlign.gz"
	suffix 			:= fastqs_Rep1.size()==2 ? suffix_PE : suffix_SE
	suffix_PSR_PE 	:= ".filt.nodup.PE2SE"
	suffix_PSR_SE 	:= ".filt.nodup.SE"
	suffix_PSR 		:= fastqs_Rep1.size()==2 ? suffix_PSR_PE : suffix_PSR_SE

	DATASET_PREFIX := get_ofprefix( 0 )
	
	REP1_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix
	REP2_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix
	POOLED_TA_FILE :="$DATASET_PREFIX"+"_Rep0.tagAlign.gz"
	REP1_PR1_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix_PSR + ".pr1.tagAlign.gz"
	REP1_PR2_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix_PSR + ".pr2.tagAlign.gz"
	REP2_PR1_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix_PSR + ".pr1.tagAlign.gz"
	REP2_PR2_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix_PSR + ".pr2.tagAlign.gz"
	PPR1_TA_FILE :="$DATASET_PREFIX"+"_Rep0.pr1.tagAlign.gz"
	PPR2_TA_FILE :="$DATASET_PREFIX"+"_Rep0.pr2.tagAlign.gz"

	ctl_fastqs_Rep1 	:= get_fastqs( 1, 1 )
	ctl_fastqs_Rep2 	:= get_fastqs( 1, 2 ) // check if rep2 doesn't exist
	ctl_suffix_PE 		:= ".filt.srt.nodup.PE2SE.tagAlign.gz"
	ctl_suffix_SE 		:= ".filt.nodup.srt.SE.tagAlign.gz"
	ctl_suffix 			:= ctl_fastqs_Rep1.size()==2 ? ctl_suffix_PE : ctl_suffix_SE
	ctl_suffix_PSR_PE 	:= ".filt.nodup.PE2SE"
	ctl_suffix_PSR_SE 	:= ".filt.nodup.SE"
	ctl_suffix_PSR 		:= ctl_fastqs_Rep1.size()==2 ? ctl_suffix_PSR_PE : ctl_suffix_PSR_SE

	CTL_DATASET_PREFIX := get_ofprefix( 1 )

	CTL_REP1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix
	CTL_REP2_TA_FILE := ctl_fastqs_Rep2.size()>0 ? "$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix : CTL_REP1_TA_FILE
	CTL_POOLED_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.tagAlign.gz"
	CTL_REP1_PR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix_PSR + ".pr1.tagAlign.gz"
	CTL_REP1_PR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix_PSR + ".pr2.tagAlign.gz"
	CTL_REP2_PR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix_PSR + ".pr1.tagAlign.gz"
	CTL_REP2_PR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix_PSR + ".pr2.tagAlign.gz"
	CTL_PPR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.pr1.tagAlign.gz"
	CTL_PPR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.pr2.tagAlign.gz"

	PEAK_OUTPUT_DIR := OUTPUT_DIR + "/peaks"
	PEAK_OUTPUT_DIR.mkdir() 

	///////////////////////////////// MACS2

	run_macs2( "Rep1", PEAK_OUTPUT_DIR, 		REP1_TA_FILE, CTL_REP1_TA_FILE, FRAGLEN )
	run_macs2( "Rep2", PEAK_OUTPUT_DIR, 		REP2_TA_FILE, CTL_REP2_TA_FILE, FRAGLEN )
	run_macs2( "Pooled", PEAK_OUTPUT_DIR, 	POOLED_TA_FILE, CTL_POOLED_TA_FILE, FRAGLEN )
	run_macs2( "Rep1_PR1", PEAK_OUTPUT_DIR, 	REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, FRAGLEN )
	run_macs2( "Rep1_PR2", PEAK_OUTPUT_DIR, 	REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, FRAGLEN )
	run_macs2( "Rep2_PR1", PEAK_OUTPUT_DIR, 	REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, FRAGLEN )
	run_macs2( "Rep2_PR2", PEAK_OUTPUT_DIR, 	REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, FRAGLEN )
	run_macs2( "PPR1", PEAK_OUTPUT_DIR, 		PPR1_TA_FILE, CTL_PPR1_TA_FILE, FRAGLEN )
	run_macs2( "PPR2", PEAK_OUTPUT_DIR, 		PPR2_TA_FILE, CTL_PPR2_TA_FILE, FRAGLEN )

	wait

}

void run_macs2( string taskname, string out_dir, string ta, string ctl_ta, string fraglen ) {

	PEAK_OUTPUT_DIR 	:= out_dir
	CHIP_TA_PREFIX 		:= taskname

	REP1_PEAK_FILE		:= "${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.narrowPeak.gz"
 	REP1_BPEAK_FILE 	:= "${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.broadPeak.gz"
 	REP1_GPEAK_FILE 	:= "${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.gappedPeak.gz"
 	FC_SIGNAL_BW_FILE 	:= "${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.fc.signal.bw"
 	PVAL_SIGNAL_BW_FILE	:= "${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.pval.signal.bw"

 	CHRSIZEFILE 		:= $CHROM_SIZES
 	
	task( taskName := "macs2 " + taskname, cpus := NTHREADS_MACS2, timeout := WALLTIME, mem := MEMORY * M, \
		[REP1_PEAK_FILE, REP1_BPEAK_FILE, REP1_GPEAK_FILE, FC_SIGNAL_BW_FILE, PVAL_SIGNAL_BW_FILE] <- [ta, ctl_ta] ) {

		sys $PRELOAD

		//==========================================
		//# Generate narrow peaks and preliminary signal tracks
		//============================================

		sys macs2 callpeak -t $ta -c $ctl_ta -f BED -n ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX} -g $GENOMESIZE -p 1e-2 --nomodel --shift 0 --extsize $fraglen --keep-dup all -B --SPMR

		//# Sort by Col8 in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys sort -k 8gr,8gr ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.narrowPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.narrowPeak.gz

		//# remove additional files
		sys rm -f ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.xls \
			${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.narrowPeak \
			${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_summits.bed

		//===========================================
		//# Generate Broad and Gapped Peaks
		//============================================
		sys macs2 callpeak -t $ta -c $ctl_ta -f BED -n ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX} -g $GENOMESIZE -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen --keep-dup all


		//# Sort by Col8 (for broadPeak) or Col 14(for gappedPeak)  in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys sort -k 8gr,8gr ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.broadPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.broadPeak.gz

		sys sort -k 14gr,14gr ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.gappedPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.gappedPeak.gz

		//# remove additional files
		sys rm -f ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.xls \
		  ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.broadPeak \
		  ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_peaks.gappedPeak \
		  ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_summits.bed

		//===========================================
		//# For Fold enrichment signal tracks
		//============================================
		//sys CHRSIZEFILE=<path_of_file_containing_chromosome_sizes>
		//# This file is a tab delimited file with 2 columns Col1 (chromosome name), Col2 (chromosome size in bp).

		sys macs2 bdgcmp -t ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_treat_pileup.bdg -c ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_control_lambda.bdg --outdir ${PEAK_OUTPUT_DIR} -o "${CHIP_TA_PREFIX}"_FE.bdg -m FE

		//# Remove coordinates outside chromosome sizes (stupid MACS2 bug)
		sys slopBed -i ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_FE.bdg -g $CHRSIZEFILE -b 0 |   awk '{if ($3 != -1) print $0}' |  bedClip stdin $CHRSIZEFILE ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.fc.signal.bedgraph

		sys rm -f ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_FE.bdg

		//# Convert bedgraph to bigwig
		sys bedGraphToBigWig ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.fc.signal.bedgraph $CHRSIZEFILE ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.fc.signal.bw

		sys rm -f ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.fc.signal.bedgraph

		//===========================================
		//# For -log10(p-value) signal tracks
		//============================================

		//# Compute sval = min(no. of reads in ChIP, no. of reads in control) / 1,000,000

		sys chipReads=$(zcat $ta | wc -l | awk '{printf "%f", $1/1000000}');

		sys controlReads=$(zcat $ctl_ta | wc -l | awk '{printf "%f", $1/1000000}');

		sys sval=$(echo "${chipReads} ${controlReads}" | awk '$1>$2{printf "%f",$2} $1<=$2{printf "%f",$1}');

		sys macs2 bdgcmp -t ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_treat_pileup.bdg -c ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_control_lambda.bdg --outdir ${PEAK_OUTPUT_DIR} -o "${CHIP_TA_PREFIX}"_ppois.bdg -m ppois -S "${sval}"

		//# Remove coordinates outside chromosome sizes (stupid MACS2 bug)
		sys slopBed -i ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_ppois.bdg -g $CHRSIZEFILE -b 0 |   awk '{if ($3 != -1) print $0}' |  bedClip stdin $CHRSIZEFILE ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.pval.signal.bedgraph

		sys rm -rf ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_ppois.bdg

		//# Convert bedgraph to bigwig
		sys bedGraphToBigWig ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.pval.signal.bedgraph $CHRSIZEFILE ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.pval.signal.bw

		sys rm -f ${PEAK_OUTPUT_DIR}/${CHIP_TA_PREFIX}.pval.signal.bedgraph
		sys rm -f ${PEAK_OUTPUT_DIR}/"${CHIP_TA_PREFIX}"_treat_pileup.bdg ${peakFile}_control_lambda.bdg

	}
}
