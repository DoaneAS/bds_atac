#!/usr/bin/env bds

include "species.bds"


// has functions related to tagalign, and helps getting tagalign from configruation file or command line argument

help Alignment settings for tagalign.
nreads 		:= 15000000	help # reads to be subsampled for cross corr. analysis (default: 15000000).


init_postalign_bed()


void init_postalign_bed() {

	if ( conf_file_exists() ) {

		nreads 		= get_conf_val_int( nreads,		["nreads"] )
	}

	if ( v ) { // verbose
		print("\n")		
		print( "# read for xcor subsample\t: $nreads\n")
	}
}

string _subsample_tag( string tag, string out_dir, string info ) {

	prefix 		:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )

	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 		:= [ tag ]
	out 		:= subsampled_tag

	task( taskName:= "_subsample_tag "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT
	
		//# Subsample tagAlign file
		sys zcat $tag | \
			grep -v "chrM" | shuf -n $nreads | gzip -c > $subsampled_tag
	}

	wait_par()

	return out
}

// This function is for cross correlation analysis in chipseq pipeline only for paired end data set
// Output (subsampled) tagalign will restricted to one read end per pair
string _subsample_tag_PE( string tag, string out_dir, string info ) {
	
	prefix 		:= change_dir( remove_ext( tag, ["tagAlign","bed"] ), out_dir )

	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 		:= [ tag ]
	out 		:= subsampled_tag

	task( taskName:= "_subsample_tag_PE "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		// join two consecutive lines in tag, subsample it and then take one read per pair
		sys zcat $tag | sed 'N;s/\n/\t/' | \
			grep -v "chrM" | shuf -n $nreads | \
			awk 'BEGIN{OFS="\t"}{print $1,$2,$3,$4,$5,$6}' | gzip -c > $subsampled_tag
	}

	wait_par()

	return out
}

// This function is for cross correlation analysis in chipseq pipeline only for paired end data set
// Output (subsampled) tagalign will restricted to one read end per pair
string _subsample_bedpe_to_tag( string bedpe, string out_dir, string info ) {
	
	prefix 		:= change_dir( remove_ext( bedpe, ["bedpe","bed"] ), out_dir )

	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 		:= [ bedpe ]
	out 		:= subsampled_tag

	task( taskName:= "subsample_bedpe2tag"+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# Subsample tagAlign file
		//# Restrict to one read end per pair for CC analysis
		sys zcat $bedpe | \
			grep -v "chrM" | shuf -n $nreads | \
			awk 'BEGIN{OFS="\t"}{print $1,$2,$3,"N","1000",$9}' | gzip -c > $subsampled_tag
	}

	wait_par()

	return out
}

string _subsample_bedpe( string bedpe, string out_dir, string info ) {
	
	prefix 		:= change_dir( remove_ext( bedpe, ["bedpe","bed"] ), out_dir )

	nreads_per_mill := (nreads/1000000)
	subsampled_bedpe:= "$prefix.$nreads_per_mill.bedpe.gz"

	in 		:= [ bedpe ]
	out 		:= subsampled_bedpe

	task( taskName:= "subsample_bedpe "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		sys zcat $bedpe | grep -v "chrM" | shuf -n $nreads | gzip -c > $subsampled_bedpe
	}

	wait_par()

	return out
}

string _bedpe_to_tag( string bedpe, string out_dir, string info ) {
	
	prefix 		:= change_dir( remove_ext( bedpe, ["bedpe","bed"] ), out_dir )

	tag 		:= "$prefix.tagAlign.gz"

	in 		:= [ bedpe ]
	out 		:= tag

	task( taskName:= "bedpe_to_tag "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		sys zcat $bedpe | awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' | \
			gzip -c > $tag
	}

	wait_par()

	return out
}

string _shift_tag( string tag, string out_dir, string info ) {
	
	prefix 		:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )

	shifted_tag 	:= "$prefix.shifted.tagAlign.gz"

	in 		:= [ tag ]
	out 		:= shifted_tag

	task( taskName:= "shift_tag "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		sys zcat $tag | awk -F $'\t' 'BEGIN {OFS = FS}{ if ($6 == "+") {$2 = $2 + 4} else if ($6 == "-") {$3 = $3 - 5} print $0}' | gzip -c > $shifted_tag
	}

	wait_par()

	return out
}

string[] _xcor( string tag, string out_dir, string info ) {

	// misc.
	prefix 		:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )

	xcor_score 	:= "$prefix.cc.qc"
	xcor_plot 	:= "$prefix.cc.plot.pdf"

	in 		:= [ tag ]
	out 		:= [ xcor_score, xcor_plot ]

	task( taskName:= "xcor "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# CCSCORE FILE format
		//# Filename <tab> numReads <tab> estFragLen <tab> correstFragLen <tab> PhantomPeak <tab> corrphantomPeak <tab> argmincorr <tab> mincorr <tab> phantomPeakCoef <tab> relPhantomPeakCoef <tab> QualityTag
		sys Rscript $(which run_spp_nodups.R) -rf \
			-c=$tag -p=$nth \
			-filtchr=chrM -savp=$xcor_plot -out=$xcor_score
		sys sed -r 's/,[^\t]+//g' $xcor_score > $xcor_score.tmp
		sys mv $xcor_score.tmp $xcor_score
	}

	wait_par()

	return out
}

// make spr(self_pseudo_replicate)
string[] _spr( string tag, string out_dir, string info ) {
	
	prefix 	:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )

	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= [ tag_pr1, tag_pr2 ]

	task( taskName:= "spr "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# Get total number of read pairs
		sys nlines=$( zcat $tag | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))
		
		//# Shuffle and split BEDPE file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys zcat $tag | shuf | split -d -l $((nlines)) - $prefix.

		//# Convert read pairs to reads into standard tagAlign file
		sys gzip -c $prefix.00 > $tag_pr1
		sys rm -f $prefix.00
		sys gzip -c $prefix.01 > $tag_pr2
		sys rm -f $prefix.01
	}

	wait_par()

	return out
}

string[] _spr_PE( string bedpe, string out_dir, string info ) {
	
	prefix 	:= change_dir( remove_ext( bedpe, ["bedpe","bed","tagAlign"] ), out_dir )

	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ bedpe ]
	out 	:= [ tag_pr1, tag_pr2 ]

	task( taskName:= "spr_PE "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# Get total number of read pairs
		sys nlines=$( zcat $bedpe | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))

		//# Shuffle and split BEDPE file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys zcat $bedpe | shuf | split -d -l $((nlines)) - $prefix.  

		//# Convert read pairs to reads into standard tagAlign file
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' "$prefix.00" | \
			gzip -c > $tag_pr1
		sys rm -f $prefix.00
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' "$prefix.01" | \
			gzip -c > $tag_pr2
		sys rm -f $prefix.01
	}
	
	wait_par()

	return out
}


string[] _spr_tag_PE( string tag, string out_dir, string info ) {
	
	prefix 	:= change_dir( remove_ext( tag, ["bed","tagAlign"] ), out_dir )

	joined 	:= "$prefix.joined" // temporary file

	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= [ tag_pr1, tag_pr2 ]

	task( taskName:= "spr_tag_PE "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		// join consecutive two lines into one
		sys zcat $tag | sed 'N;s/\n/\t/' > $joined

		//# Get total number of read pairs
		sys nlines=$( cat $joined | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))

		//# Shuffle and split temporary combined file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys cat $joined | shuf | split -d -l $((nlines)) - $prefix.  

		//# Convert read pairs to reads into standard tagAlign file
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' "$prefix.00" | \
			gzip -c > $tag_pr1
		sys rm -f $prefix.00
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' "$prefix.01" | \
			gzip -c > $tag_pr2
		sys rm -f $prefix.01

		//sys rm -f $joined
	}
	
	wait_par()

	return out
}

string[] _ppr( string tag1, string tag1_pr1, string tag1_pr2, string tag2, string tag2_pr1, string tag2_pr2, string out_dir, string info ) {
	// make psr(pooled pseudo replicate)

	tag_pooled 	:= _pool_tag( tag1, tag2, out_dir, info )
	tag_ppr1 	:= _pool_tag( tag1_pr1, tag2_pr1, out_dir, info )
	tag_ppr2 	:= _pool_tag( tag1_pr2, tag2_pr2, out_dir, info )

	out 	:= [ tag_pooled, tag_ppr1, tag_ppr2 ]

	wait_par()

	return out
}

string _pool_tag( string tag1, string tag2, string out_dir, string info ) {

	prefix 		:= "$out_dir/" + concat_basename_wo_ext( tag1, tag2, ["tagAlign","tag","bed"] )	

	tag_pooled 	:= "$prefix"+"_pooled.tagAlign.gz"

	in 		:= [ tag1, tag2 ]
	out 		:= tag_pooled

	task( taskName:= "pool_tag "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT
		sys zcat $tag1 $tag2 | gzip -c > $tag_pooled		
	}

	wait_par()

	return out
}

string get_fraglen( string xcor_score ) {   // get FRAGLEN (3rd column of cc score file) for spp(-speak=$FRAGLEN)	
	cols := xcor_score.read().split("\t")
	return cols[2]
}
