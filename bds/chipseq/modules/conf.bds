#!/usr/bin/env bds

include "base.bds"


help Configuration settings

c	:= "" 		help Configuration file path.

string{} conf // map for configuration


init_conf()


void init_conf() {

	if ( is_cmd_line_arg_empty() ) {

		print( "\nWarning: No parameters are given (specify cmd. line arguments or configuration file)!\n\n")
	}
	
	if ( is_first_arg_conf() ) {

		c = args[0]
	}

	if ( conf_file_exists() ) {

		conf = read_conf( c, "" )
	}
	
}

string{} read_conf( string file, string section ) {

	if ( !file.exists() ) error("Configuration file $file does not exist!\n")

	lines := file.read().split("\n")
	string{} ret

	can_read := (section=="") ? true : false

	for ( string line : lines ) {
		line = rm_comment( line.trim() )

		if ( line == "" ) continue
		
		if ( line.startsWith( "[" ) && line.endsWith( "]" ) )  {

			line = line.replace( "[","" ).replace( "]","").trim()

			if ( section != "" ) {
				if ( line.toLower() == section.toLower() ) {
					can_read = true
				}
				else {
					can_read = false
				}
			}
			else {
				can_read = false				
			}
			continue
		}

		if ( can_read ) {
			string key, val
			(key, val) = parse_conf_line( line )

			//print( "$key : $val \n" )
			ret{ key } = val
		}
	}
	return ret
}

string{} read_conf( string file ) {

	return read_conf( file, "" )
}

string[] parse_conf_line( string line ) {

	delims := [ "=", "\t", ":" ]

	delim_found := false

	string key, val

	for ( string delim : delims ) {
		idx := line.indexOf( delim )
		if ( idx > -1 ) {
			key = line.substr( 0, idx ).trim().toLower()
			val = line.substr( idx+1 ).trim()
			delim_found = true
			break
		}
	}

	if ( !delim_found ) error("No delimiter (=,\\t,:) found in line ($line) in the configruation file.\n")

	return [key, val]
}

int get_conf_val_int( int curr_val, string key ) {

	string{} tmp
	return parse_int( get_conf_val( curr_val, key, tmp ) )
}

int get_conf_val_int( int curr_val, string[] keys ) {

	string{} tmp
	return parse_int( get_conf_val( curr_val, keys, tmp ) )
}

bool get_conf_val_bool( bool curr_val, string key ) {

	string{} tmp
	return parse_bool( get_conf_val( curr_val, key, tmp ) )
}

bool get_conf_val_bool( bool curr_val, string[] keys ) {

	string{} tmp
	return parse_bool( get_conf_val( curr_val, keys, tmp ) )
}

real get_conf_val_real( real curr_val, string key ) {

	string{} tmp
	return parse_real( get_conf_val( curr_val, key, tmp ) )
}

real get_conf_val_real( real curr_val, string[] keys ) {

	string{} tmp
	return parse_real( get_conf_val( curr_val, keys, tmp ) )
}

int get_conf_val_int( int curr_val, string key, string{} _conf ) {

	return parse_int( get_conf_val( curr_val, key, _conf ) )	
}

int get_conf_val_int( int curr_val, string[] keys, string{} _conf ) {

	return parse_int( get_conf_val( curr_val, keys, _conf ) )	
}

bool get_conf_val_bool( bool curr_val, string key, string{} _conf ) {

	return parse_bool( get_conf_val( curr_val, key, _conf ) )	
}

bool get_conf_val_bool( bool curr_val, string[] keys, string{} _conf ) {

	return parse_bool( get_conf_val( curr_val, keys, _conf ) )	
}

real get_conf_val_real( real curr_val, string key, string{} _conf ) {

	return parse_real( get_conf_val( curr_val, key, _conf ) )
}

real get_conf_val_real( real curr_val, string[] keys, string{} _conf ) {

	return parse_real( get_conf_val( curr_val, keys, _conf ) )
}

string get_conf_val( string curr_val, string key, string{} _conf ) {	

	key = key.toLower().trim()

	if ( cmd_line_arg_has_key( key ) ) return curr_val

	if ( _conf.size() == 0 ) {
		if ( conf.hasKey( key ) ) {
			
			return (conf{ key } != "") ? rm_comment( conf{ key } ) : curr_val
		}
	}
	else {
		if ( _conf.hasKey( key ) ) {
			
			return (_conf{ key } != "") ? rm_comment( _conf{ key } ) : curr_val
		}
	}
	return curr_val
}

string get_conf_val( string curr_val, string[] keys, string{} _conf ) {		

	for ( string key : keys ) {
		val := get_conf_val( curr_val, key, _conf )		
		if ( val != curr_val ) return val
	} 
	return curr_val
}

string get_conf_val( string curr_val, string key ) {

	string{} tmp
	return get_conf_val( curr_val, key, tmp )
}

string get_conf_val( string curr_val, string[] keys ) {	

	string{} tmp
	return get_conf_val( curr_val, keys, tmp )
}

bool has_conf_key( string key, string{} _conf ) {

	key = key.toLower()
	return (_conf.size()==0) ? conf.hasKey( key ) : _conf.hasKey( key )
}

bool has_conf_key( string key ) {

	string{} tmp
	return has_conf_key( key )
}

bool conf_file_exists() {
	if ( c!="" ) return c.exists()
	return false
}
