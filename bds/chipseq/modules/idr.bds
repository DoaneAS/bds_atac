#!/usr/bin/env bds

include "species.bds"


help IDR settings
use_idr1	:= false	help Force to use IDR-1 code (not recommended).
idr_thresh 	:= "0.02"	help IDR threshold : -log_10(score) (default: 0.02).


idr_summary 	:= "NPEAKS_IDR.txt"	// file basename for summary of number of peaks found


init_idr()


void init_idr() {

	if ( conf_file_exists() ) {

		use_idr1 	= get_conf_val_bool( use_idr1, 		["use_idr1"] )
		idr_thresh 	= get_conf_val( idr_thresh, 		["idr_thresh"] )
	}

	if ( v ) { // verbose
		print("\n")		
		print( "Use IDR-1\t\t: $use_idr1\n" )
		print( "IDR threshold\t\t: $idr_thresh\n" )
	}
}

string[] _idr( string peak1, string peak2, string pooled, string out_dir, string info ) {

	if ( peak1=="" || peak2=="" || pooled=="" ) return ["","",""]

	// write three peak filenames to file (just for information)
	save_data("$out_dir/$info"+"_filenames.txt", \
		get_basename( [peak1, peak2, pooled] ), "\n" )

	// do IDR
	if ( use_idr1 ) {
		return _idr1( peak1, peak2, pooled, out_dir, info )
	}
	else {
		return _idr2( peak1, peak2, pooled, out_dir, info )
	}
}

string[] _idr1( string peak1, string peak2, string pooled, string out_dir, string info ) {

	prefix 		:= "$out_dir/$info"

	npeaks_file 	:= prefix.dirName()+"/$idr_summary"

	create_idr_summary( npeaks_file ) // do nothing if it already exists

	pooled_common_peaks 	:= "$prefix.POOLED_COMMON_PEAKS.gz"
	common_rep1_match 	:= "$prefix.COMMON_REP1_MATCH.gz"
	common_rep2_match 	:= "$prefix.COMMON_REP2_MATCH.gz"
	recal_pooled_common_peaks := "$prefix.RECAL_POOLED_COMMON_PEAKS.gz"
	pooled_common_peaks_idr := "$prefix.POOLED_COMMON_PEAKS_IDR.gz"
	idr_output 		:= "$prefix.IDR"+idr_thresh+".narrowPeak.gz"

	in 	:= [ peak1, peak2, pooled ]
	//out 	:= [ idr_output, pooled_common_peaks, common_rep1_match, common_rep2_match, recal_pooled_common_peaks, pooled_common_peaks_idr ]
	out 	:= [ idr_output, pooled_common_peaks_idr ]

	task( taskName:= "idr1 "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# =============================
		//# Find peaks in pooled set common to both replicates
		//# =============================
		sys bedtools intersect -u -a $pooled -b $peak1 | bedtools intersect -u -a stdin -b $peak2 \
			| sort -k7n,7n -k1,1 -k2n,2n -k3n,3n -k10n,10n | gzip -c > $pooled_common_peaks

		//# =============================
		//# Create 2 new peak file per replicate with coordinates from common pooled set but scores from replicates by first computing overlaps, then then matching to closest summit, then recalibration coordinates to be +/- 2 bp from pooled set summit
		//# =============================
		sys bedtools intersect -wa -wb -a $pooled_common_peaks -b $peak1 \
			| awk 'BEGIN{OFS="\t"}{d=$2+$10-$12-$20;$21=sqrt(d^2);print $0}' \
			| bedtools groupby -i stdin -g 1,2,3,10 -c 21 -o min -full | sort -k7n,7n -k1,1 -k2n,2n -k3n,3n -k10n,10n \
			| awk 'BEGIN{OFS="\t"}{print $1,$2+$10-2,$2+$10+2,$4,$5,$6,$17,$18,$19,2}' | gzip -c > $common_rep1_match
		sys bedtools intersect -wa -wb -a $pooled_common_peaks -b $peak2 \
			| awk 'BEGIN{OFS="\t"}{d=$2+$10-$12-$20;$21=sqrt(d^2);print $0}' \
			| bedtools groupby -i stdin -g 1,2,3,10 -c 21 -o min -full | sort -k7n,7n -k1,1 -k2n,2n -k3n,3n -k10n,10n \
			| awk 'BEGIN{OFS="\t"}{print $1,$2+$10-2,$2+$10+2,$4,$5,$6,$17,$18,$19,2}' | gzip -c > $common_rep2_match

		//# =============================
		//# Pass recalibrated peak files to IDR
		//# Rscript batch-consistency-analysis.r [peakfile1] [peakfile2] [peak.half.width] [outfile.prefix] [min.overlap.ratio] [is.broadpeak] [ranking.measure]
		//# For SPP & GEM use [ranking.measure] as signal.value. For PeakSeq use q.value
		//# make sure the genome_table.txt file is set to the correct version of the genome
		//# =============================
		sys cd $(dirname $(which batch-consistency-analysis.r))
		sys Rscript batch-consistency-analysis.r $common_rep1_match $common_rep2_match -1 $prefix 0 F signal.value
		sys cd $out_dir

		//# =============================
		//# Convert IDR overlap file to narrowPeak format 
		//# =============================
		sys sed 1d $prefix-overlapped-peaks.txt | sed -r 's/"//g' | sort -k11g,11g \
			| awk '{if ($3 <=$7) st=$3 ; else st=$7 ; if ($4 >= $8) sto=$4 ; else sto=$8 ; printf "%s\t%d\t%d\t%d\t%s\t.\t%s\t%f\t%f\n",$2,st,sto,NR,$5,$9,$10,$11}' \
			| gzip -c > $prefix.npk.gz

		//# =============================
		//# Create a recalibrated vesion of $POOLED_COMMON_PEAKS where coordinates are to be +/- 2 bp from pooled set summit. This is so we can match it with IDR output and retranslate back to original pooled set coordinates
		//# =============================
		sys zcat $pooled_common_peaks | awk 'BEGIN{OFS="\t"}{$11=$2;$12=$3;$2=$2+$10-2;$3=$2+$10+2; print $0}' \
			| gzip -c > $recal_pooled_common_peaks

		//# =============================
		//# Overlap IDR output with $RECAL_POOLED_COMMON_PEAKS to add in IDR scores and switch back to original common pooled set coordinates
		//# Columns 1-10 are same as pooled common peaks columns
		//# Col 11: ranking measure from Rep1
		//# Col 12: ranking measure from Rep2
		//# Col 13: local IDR score
		//# Col 14: global IDR score
		//# IMPORTANT: DCC should store this file! All other files are temporary
		//# =============================
		sys bedtools intersect -wa -wb -a $recal_pooled_common_peaks -b  $prefix.npk.gz \
			| awk 'BEGIN{OFS="\t"}{print $1,$11,$12,$4,$5,$6,$7,$8,$9,$10,$17,$19,$20,$21}' | gzip -c > $pooled_common_peaks_idr

		//# =============================
		//# Get peaks passing IDR threshold of 2%
		//# =============================
		//sys IDR_THRESH=0.02
		sys zcat $pooled_common_peaks_idr | awk 'BEGIN{OFS="\t"} $14<='"$idr_thresh"' {print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' \
			| sort -k7n,7n | gzip -c > $idr_output

		sys NPEAKS_IDR=$(zcat $idr_output | wc -l)

		//# =============================
		//# Format: Rscript batch-consistency-plot.r [npairs] [output.prefix] [input.file.prefix1] [input.file.prefix2] [input.file.prefix3] ....
		//# =============================
		sys cd $(dirname $(which batch-consistency-plot.r))
		sys Rscript batch-consistency-plot.r 1 $prefix $prefix
		sys cd $out_dir

		sys echo -e "$info\t${NPEAKS_IDR}" >> $npeaks_file
	}

	wait_par()

	return out
}

string[] _idr2( string peak1, string peak2, string pooled, string out_dir, string info ) { // use --idr-threshold

	prefix 		:= "$out_dir/$info"
	npeaks_file 	:= prefix.dirName()+"/$idr_summary"

	create_idr_summary( npeaks_file ) // do nothing if it already exists

	peak 		:= "$prefix.IDR"+"$idr_thresh.narrowPeak.gz"
	idr_output 	:= "$prefix.overlapped-peaks.txt"
	png 		:= "$prefix.overlapped-peaks.txt.png"

	in 	:= [peak1, peak2, pooled]
	out 	:= [idr_output, peak, png]

	task( taskName:= "idr2 "+info, cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), out<-in ) {
		sys $SHCMD_INIT

		sys idr --samples $peak1 $peak2 --peak-list $pooled --input-file-type narrowPeak \
			--output-file $idr_output --rank signal.value --soft-idr-threshold $idr_thresh \
			--plot
		
		sys idr_thresh_transformed=$(awk -v p=$idr_thresh 'BEGIN{print -log(p)/log(10)}')

		//# Get peaks passing global IDR threshold and convert file to narrowPeak format (Step 9)
		sys awk 'BEGIN{OFS="\t"} $12>='"${idr_thresh_transformed}"' {print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' $idr_output \
			| sort | uniq | sort -k7n,7n | gzip -c > $peak

		sys echo -e "$info\t$(zcat $peak | wc -l)" >> $npeaks_file
	}

	wait_par()

	return out
}

string _filter_idr_peak( string idr_peak, string out_dir, string info ) {

	prefix 	:= change_dir( remove_ext( idr_peak, ["narrowPeak"] ), out_dir )
	filt 	:= "$prefix.filt.narrowPeak.gz"

	in 	:= idr_peak
	out 	:= filt

	task( taskName:= "filter_idr_peak "+info, cpus:=1, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), out<-in ) {
		sys $SHCMD_INIT

		sys bedtools intersect -v -a $idr_peak -b $blacklist_idr | gzip -c > $filt
	}

	wait_par()

	return out
}

string _idr_final_qc( string idr_Nt, string idr_N1, string idr_N2, string idr_Np, string out_dir, string info ) {

	// compute IDR scores

	idr_Nt_filt := _filter_idr_peak( idr_Nt, out_dir, "Nt" )
	idr_Np_filt := _filter_idr_peak( idr_Np, out_dir, "Np" )

	wait

	Nt :=  get_no_lines( idr_Nt_filt )
	N1 :=  get_no_lines( idr_N1 ) 
	N2 :=  get_no_lines( idr_N2 )
	Np :=  get_no_lines( idr_Np_filt )

	optimal_set := (Nt > Np) ? "true_rep" : "pooled_pseudo_rep"
	conservative_set := "true_rep"

	real max_Np_Nt = max( Np, Nt )
	real min_Np_Nt = min( Np, Nt )

	real max_N1_N2 = max( N1, N2 )
	real min_N1_N2 = min( N1, N2 )

	rescue_ratio 		:= max_Np_Nt / min_Np_Nt
	self_consistency_ratio 	:= max_N1_N2 / min_N1_N2
	reproducibility 	:= 1
	
	if ( rescue_ratio > 2.0 || self_consistency_ratio > 2.0 ) reproducibility = 0 // BORDERLINE
	if ( rescue_ratio > 2.0 && self_consistency_ratio > 2.0 ) reproducibility = -1 // FAIL
	
	// 4f. Fraction of Reads in Peaks (FRiP) will be added later

	// filenames
	qc 	:= "$out_dir/IDR_final.qc"

	in 	:= [idr_Nt, idr_N1, idr_N2, idr_Np]
	out 	:= qc

	task( taskName:= "idr final qc"+info, cpus:=1, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), out<-in ) {
		sys $SHCMD_INIT

		sys echo -e "Nt\tN1\tN2\tNp\tconservative_set\toptimal_set\trescue_ratio\tself_consistency_ratio\treproducibility" > $qc
		sys echo -e "$Nt\t$N1\t$N2\t$Np\t$conservative_set\t$optimal_set\t$rescue_ratio\t$self_consistency_ratio\t$reproducibility" >> $qc
	}

	wait_par()

	return out
}

void create_idr_summary( string file ) { // create it if not exists	
	if ( !file.exists() ) file.write( "Sample type\tNumber of peaks\n" )
}
