#!/usr/bin/env bds

include "species.bds"


help MACS2 settings :
nth_macs2	:= 2 		help # threads for MACS2 (default: 2)
wt_macs2	:= "10h"	help Walltime for MACS2 (default: 10h, 10:00:00).
mem_macs2	:= "8G" 	help Max. memory for MACS2 (default: 8G).


init_peakcall_macs2()


void init_peakcall_macs2() {

	if ( conf_file_exists() ) {

		nth_macs2 	= get_conf_val_int( nth_macs2,		["nthreads_macs2", "nth_macs2", "cpu_macs2"] )
		wt_macs2 	= get_conf_val( wt_macs2, 		["walltime_macs2", "wt_macs2", "timeout_macs2"] )
		mem_macs2 	= get_conf_val( mem_macs2, 		["memory_macs2", "mem_macs2"] )
	}

	if ( v ) { // verbose
		print("\n")
		print( "# threads (macs2)\t: $nth_macs2\n")
		print( "Walltime (macs2)\t: $wt_macs2\n")
		print( "Max. memory (macs2)\t: $mem_macs2\n")
	}
}

string[] _macs2( string tag, string ctl_tag, string fraglen, string out_dir, string info ) {

	prefix 		:= (ctl_tag != "") ? 	("$out_dir/" + make_x_basename_wo_gz( tag, ctl_tag, "" ) ) \
						: change_dir( remove_ext( tag, "tagAlign" ), out_dir )

	npeakfile	:= "$prefix.narrowPeak.gz"
	bpeakfile	:= "$prefix.broadPeak.gz"
	gpeakfile	:= "$prefix.gappedPeak.gz"

	fc_bedgraph 	:= "$prefix.fc.signal.bedgraph"
	fc_bedgraph_srt	:= "$prefix.fc.signal.srt.bedgraph"
	fc_bigwig 	:= "$prefix.fc.signal.bw"
	pval_bedgraph 	:= "$prefix.pval.signal.bedgraph"
	pval_bedgraph_srt := "$prefix.pval.signal.srt.bedgraph"
	pval_bigwig 	:= "$prefix.pval.signal.bw"

	prefix_basename	:= get_basename( prefix )

	in 	:= (ctl_tag != "") ? [ tag, ctl_tag ] : [ tag ]
 	out 	:= [ npeakfile, bpeakfile, gpeakfile, fc_bigwig, pval_bigwig ]

 	ctl 	:= (ctl_tag != "") ? "-c $ctl_tag" : ""

 	controlReads_line := (ctl_tag != "") ? "controlReads=$(zcat $ctl_tag | wc -l | awk '{printf \"%f\", $1/1000000}');" : ""
	sval_line := (ctl_tag != "") ?	"sval=$(echo \"${chipReads} ${controlReads}\" | awk '$1>$2{printf \"%f\",$2} $1<=$2{printf \"%f\",$1}');" : \
					"sval=$(echo \"${chipReads}\" | awk '{printf \"%f\",$1}');"

	task( taskName:= "macs2 "+info, \
		cpus:=nth_macs2, mem:=parse_mem_or_skip(mem_macs2), timeout:=parse_time_or_skip(wt_macs2), \
		out<-in ) {

		sys $SHCMD_INIT
		sys LC_COLLATE=C
		
		//==========================================
		//# Generate narrow peaks and preliminary signal tracks
		//============================================
		sys macs2 callpeak -t $tag $ctl -f BED -n $out_dir/$prefix_basename -g $gensz -p 1e-2 --nomodel --shift 0 --extsize $fraglen --keep-dup all -B --SPMR

		//# Sort by Col8 in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys sort -k 8gr,8gr "$prefix"_peaks.narrowPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > $npeakfile

		//# remove additional files
		sys rm -f "$prefix"_peaks.xls \
			"$prefix"_peaks.narrowPeak \
			"$prefix"_summits.bed

		//===========================================
		//# Generate Broad and Gapped Peaks
		//============================================
		sys macs2 callpeak -t $tag $ctl -f BED -n $out_dir/$prefix_basename -g $gensz -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen --keep-dup all

		//# Sort by Col8 (for broadPeak) or Col 14(for gappedPeak)  in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys sort -k 8gr,8gr "$prefix"_peaks.broadPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > $bpeakfile
		sys sort -k 14gr,14gr "$prefix"_peaks.gappedPeak | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -c > $gpeakfile

		//# remove additional files
		sys rm -f "$prefix"_peaks.xls \
		  "$prefix"_peaks.broadPeak \
		  "$prefix"_peaks.gappedPeak \
		  "$prefix"_summits.bed

		//===========================================
		//# For Fold enrichment signal tracks
		//============================================
		//# This file is a tab delimited file with 2 columns Col1 (chromosome name), Col2 (chromosome size in bp).

		sys macs2 bdgcmp -t "$prefix"_treat_pileup.bdg -c "$prefix"_control_lambda.bdg --outdir $out_dir -o "$prefix_basename"_FE.bdg -m FE

		//# Remove coordinates outside chromosome sizes (stupid MACS2 bug)
		sys slopBed -i "$prefix"_FE.bdg -g $chrsz -b 0 |   awk '{if ($3 != -1) print $0}' |  bedClip stdin $chrsz $fc_bedgraph

		sys rm -f "$prefix"_FE.bdg

		//# Convert bedgraph to bigwig
		sys sort -k1,1 -k2,2n $fc_bedgraph > $fc_bedgraph_srt
		sys bedGraphToBigWig $fc_bedgraph_srt $chrsz $fc_bigwig

		sys rm -f $fc_bedgraph $fc_bedgraph_srt

		//===========================================
		//# For -log10(p-value) signal tracks
		//============================================

		//# Compute sval = min(no. of reads in ChIP, no. of reads in control) / 1,000,000

		sys chipReads=$(zcat $tag | wc -l | awk '{printf "%f", $1/1000000}');

		//sys controlReads=$(zcat $ctl_tag | wc -l | awk '{printf "%f", $1/1000000}');
		sys $controlReads_line

		//sys sval=$(echo "${chipReads} ${controlReads}" | awk '$1>$2{printf "%f",$2} $1<=$2{printf "%f",$1}');
		sys $sval_line

		sys macs2 bdgcmp -t "$prefix"_treat_pileup.bdg -c "$prefix"_control_lambda.bdg --outdir $out_dir -o "$prefix_basename"_ppois.bdg -m ppois -S "${sval}"

		//# Remove coordinates outside chromosome sizes (stupid MACS2 bug)
		sys slopBed -i "$prefix"_ppois.bdg -g $chrsz -b 0 |   awk '{if ($3 != -1) print $0}' |  bedClip stdin $chrsz $out_dir/$prefix_basename.pval.signal.bedgraph

		sys rm -rf "$prefix"_ppois.bdg

		//# Convert bedgraph to bigwig
		sys sort -k1,1 -k2,2n $pval_bedgraph > $pval_bedgraph_srt		
		sys bedGraphToBigWig $pval_bedgraph_srt $chrsz $pval_bigwig

		sys rm -f $pval_bedgraph $pval_bedgraph_srt
		sys rm -f "$prefix"_treat_pileup.bdg "$prefix"_control_lambda.bdg
	}

	wait_par()

	return out
}

string[] _macs2_atac( string non_mito_bed, string fraglen, string out_dir, string info ) {

	prefix 	:= change_dir( remove_ext( non_mito_bed, "bed" ), out_dir ) + ".pf"

	peakfile 	:= "$prefix"+"_peaks.narrowPeak"
	fc_bedgraph 	:= "$prefix.fc.signal.bedgraph"
	fc_bedgraph_srt	:= "$prefix.fc.signal.srt.bedgraph"	
	fc_bigwig 	:= "$prefix.fc.signal.bigwig"
	pval_bedgraph 	:= "$prefix.pval.signal.bedgraph"
	pval_bedgraph_srt := "$prefix.pval.signal.srt.bedgraph"	
	pval_bigwig 	:= "$prefix.pval.signal.bigwig"

	in 	:= [ non_mito_bed ]
	out 	:= [ peakfile, fc_bigwig, pval_bigwig ]

	task( taskName:= "macs2_atac "+info, \
		cpus:=nth_macs2, mem:=parse_mem_or_skip(mem_macs2), timeout:=parse_time_or_skip(wt_macs2), \
		out<-in ) {
	
		sys $SHCMD_INIT
		sys LC_COLLATE=C

		sys adjustedBed="slopBed -i $non_mito_bed -g $chrsz -l 75 -r -75 -s"
		sys macs2 callpeak \
			-t <(${adjustedBed}) -f BED -n "$prefix" -g "$gensz" -p 1e-2 \
			--nomodel --shift "$fraglen" -B --SPMR --keep-dup all --call-summits

		sys macs2 bdgcmp \
			-t "$prefix"_treat_pileup.bdg -c "$prefix"_control_lambda.bdg \
			--o-prefix "$prefix" -m FE
		sys slopBed -i "$prefix"_FE.bdg -g "$chrsz" -b 0 | \
			bedClip stdin "$chrsz" $fc_bedgraph
		sys rm -f "$prefix"_FE.bdg

		sys sort -k1,1 -k2,2n $fc_bedgraph > $fc_bedgraph_srt
		sys bedGraphToBigWig $fc_bedgraph_srt "$chrsz" "$fc_bigwig"
		sys rm -f $fc_bedgraph $fc_bedgraph_srt

		//# sval counts the number of tags per million in the (compressed) BED file
		sys sval=$(wc -l <(zcat -f "$non_mito_bed") | awk '{printf "%f", $1/1000000}')
		sys macs2 bdgcmp \
			-t "$prefix"_treat_pileup.bdg -c "$prefix"_control_lambda.bdg \
			--o-prefix "$prefix" -m ppois -S "${sval}"
		sys slopBed -i "$prefix"_ppois.bdg -g "$chrsz" -b 0 | \
			bedClip stdin "$chrsz" $pval_bedgraph
		sys rm -f "$prefix"_ppois.bdg

		sys sort -k1,1 -k2,2n $pval_bedgraph > $pval_bedgraph_srt
		sys bedGraphToBigWig $pval_bedgraph_srt "$chrsz" "$pval_bigwig"
		sys rm -f $pval_bedgraph $pval_bedgraph_srt

		sys rm -f "$prefix"_treat_pileup.bdg "$prefix"_control_lambda.bdg
	}

	wait_par()

	return out
}
