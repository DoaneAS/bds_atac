#!/usr/bin/env bds

helpUnsorted := true

// Relative script (BDS) file path : 
// 	This is important because pipeline seeks for species file 
//		or executables like .py .sh .R in the BDS script path if they are not defined globally in env. var. $PATH
// 	Add more relative path here if you want to keep your .py .sh .R in subdirectories (or parent) of your BDS script directory.

rel_script_file_paths := [".","..","modules","../modules","species","../species"]


// command line argument functions

bool cmd_line_arg_has_key( string key ) {
	for ( string arg : args ) {
		//print("DEBUG: $key, $arg\n")
		if ( ("-"+key) == arg.trim() ) return true
	}
	return false
}

bool is_cmd_line_arg_empty() {

	return args.size()==0
}

bool is_first_arg_conf() {

	if ( (args.size()>0) && (args[0].indexOf("-")==-1) )  {

		if ( args.size()==1 ) {
			return true
		}
		else {
			return args[1].indexOf("-")>-1
		}
	}
	return false
}

// string functions

string get_basename( string path ) { // BDS .baseName() returns wrong basename for softlinks
	if (path=="") return ""
	int loc_slash = path.lastIndexOf( "/" )
	return path.substr( loc_slash+1 )
}

string[] get_basename( string[] paths ) { // BDS .baseName() returns wrong basename for softlinks
	string[] ret
	for ( string path : paths ) {
		if (path=="") { 
			ret.add("")
			continue
		}
		int loc_slash = path.lastIndexOf( "/" )
		ret.add( path.substr( loc_slash+1 ) )
	}
	return ret
}

string get_common_basename( string f1, string f2 ) {

	base1 := get_basename( f1 )
	base2 := get_basename( f2 )

	string common

	for (int i=0; i< min(base1.length(),base2.length());i++) {
		c1 := base1.substr(i,i+1)
		c2 := base2.substr(i,i+1)

		if ( c1 == c2 ) common = common + c1
		else break
	}
	return common
}

string remove_ext( string file, string ext ) {
	// remove .gz
	if ( file.endsWith( ".gz" ) ) \
		file = rm_str_at_end( file, ".gz" )
	// remove dot from ext
	ext = ext.replace( ".", "" );
	file = rm_str_at_end( file, "."+ext )

	return file
}

string remove_ext( string file, string[] exts ) {
	// remove .gz
	if ( file.endsWith( ".gz" ) ) \
		file = rm_str_at_end( file, ".gz" )

	for ( string ext : exts ) {
		// remove dot from ext
		ext = ext.replace( ".", "" );
		file = file.rm_str_at_end( "."+ext )
	}

	return file
}

string concat_basename_wo_ext( string file1, string file2, string[] exts1, string[] exts2 ) {
	base1_wo_ext := remove_ext( get_basename( file1 ), exts1 )
	base2_wo_ext := remove_ext( get_basename( file2 ), exts2 )	
	return base1_wo_ext + "_" + base2_wo_ext
}

string concat_basename_wo_ext( string file1, string file2, string[] exts ) {
	return concat_basename_wo_ext( file1, file2, exts, exts )
}

string concat_basename_wo_ext( string file1, string file2, string ext1, string ext2 ) {
	return concat_basename_wo_ext( file1, file2, [ext1], [ext2] )
}

string concat_basename_wo_ext( string file1, string file2, string ext ) {
	return concat_basename_wo_ext( file1, file2, [ext], [ext] )
}

string make_vs_basename_wo_gz( string file1, string file2, string suffix ) {
	ret := rm_str_at_end( get_basename( file1 ),".gz" ) + \
		"_VS_" + rm_str_at_end( get_basename( file2 ),".gz" )

	// linux filename length limitation is 255
	if ( ret.length() > 210 ) {
		ret = ret.substr(0, 210)
	}

	ret = ret + suffix

	return ret
}

string make_x_basename_wo_gz( string file1, string file2, string suffix ) {
	ret := rm_str_at_end( get_basename( file1 ),".gz" ) + \
		"_x_" + rm_str_at_end( get_basename( file2 ),".gz" )

	// linux filename length limitation is 255
	if ( ret.length() > 210 ) {
		ret = ret.substr(0, 210)
	}

	ret = ret + suffix

	return ret
}

int parse_time( string str ) {
	trimmed := str.trim().toLower()

	if (  trimmed.indexOf("w")>=0 || trimmed.indexOf("d")>=0 || trimmed.indexOf("h")>=0 \
		|| trimmed.indexOf("m")>=0 || trimmed.indexOf("s")>=0 ) {

		int multiplier
		string delimiter

		if ( trimmed.indexOf("w")>=0 ) {
			delimiter = "w";        multiplier = 3600*24*7
		}
		else if ( trimmed.indexOf("d")>=0 ) {
			delimiter = "d";        multiplier = 3600*24
		}
		else if ( trimmed.indexOf("h")>=0 ) {
			delimiter = "h";        multiplier = 3600
		}
		else if ( trimmed.indexOf("m")>=0 ) {
			delimiter = "m";        multiplier = 60
		}
		else if ( trimmed.indexOf("s")>=0 ) {
			delimiter = "s";        multiplier = 1
		}

		string[] arr = trimmed.split( delimiter )
		return arr[0].parseInt()*multiplier
	}
	else if ( trimmed.indexOf(":")>=0 ) {
		string[] arr = trimmed.split( ":" )

		int d, h, m, s

		if ( arr.size() >= 4 ) {
			d = arr[0].parseInt(); h = arr[1].parseInt(); m = arr[2].parseInt(); s = arr[3].parseInt()
		}
		else if ( arr.size() >= 3 ) {
			h = arr[0].parseInt(); m = arr[1].parseInt(); s = arr[2].parseInt()
		}
		else if ( arr.size() >= 2 ) {
			m = arr[0].parseInt(); s = arr[1].parseInt()
		}
		else if ( arr.size() >= 1 ) {
			s = arr[0].parseInt()
		}

		return 3600*24*d + 3600*h + 60*m + s
	}
	else {
		return trimmed.parseInt()
	}
}

int parse_mem( string str ) {
	trimmed := str.trim().toLower()

	int multiplier
	string delimiter

	if ( trimmed.indexOf("gb")>=0 ) {
		delimiter = "gb"
		multiplier = 1000*1000*1000
	}
	else if ( trimmed.indexOf("g")>=0 ) {
		delimiter = "g"
		multiplier = 1000*1000*1000
	}
	else if ( trimmed.indexOf("mb")>=0 ) {
		delimiter = "mb"
		multiplier = 1000*1000
	}
	else if ( trimmed.indexOf("m")>=0 ) {
		delimiter = "m"
		multiplier = 1000*1000
	}
	else if ( trimmed.indexOf("kb")>=0 ) {
		delimiter = "kb"
		multiplier = 1000
	}
	else if ( trimmed.indexOf("k")>=0 ) {
		delimiter = "k"
		multiplier = 1000
	}
	else if ( trimmed.indexOf("b")>=0 ) {
		delimiter = "b"
		multiplier = 1
	}
	else {
		return trimmed.parseInt()
	}

	string[] arr = trimmed.split( delimiter )
	return arr[0].parseInt()*multiplier
}

int parse_int( string str ) {

	return rm_comment( str ).parseInt()
}

bool parse_bool( string str ) {

	return rm_comment( str ).parseBool()
}

real parse_real( string str ) {

	return rm_comment( str ).parseReal()
}

string rm_comment( string str ) { // remove substring after double slash "//"

	trimmed := str.trim()

	//int pos = trimmed.lastIndexOf("//")
	int pos = trimmed.indexOf("//")

    	if ( pos>=0 ) {
		trimmed = trimmed.substr(0,pos-1).trim()
	}

	//int pos2 = trimmed.lastIndexOf("#")
	int pos2 = trimmed.indexOf("#")

	if ( pos2>=0 ) {
		trimmed = trimmed.substr(0,pos2-1).trim()
	}

	return trimmed
}

string chk_slash( string str ) { // if slash found, error
	trimmed := rm_comment( str )
	if ( trimmed.indexOf("/")>=0 ) {
		error("Path including '/' not allowed for $str\n")
	}
	return trimmed
}

string rm_str_at_end( string str, string rm ) {
	trimmed := rm_comment( str )
	
	if ( trimmed.substr( trimmed.length()-rm.length() ).toLower() == rm.toLower() ) {
		return trimmed.substr( 0, trimmed.length()-rm.length() )
	}
	
	return trimmed
}

string array_to_str( string[] arr, string delim ) {
	string ret
	for ( string str : arr ) ret = ret + str + delim	
	return ret
}

string array_to_str( string[] arr ) {
	return array_to_str( arr, "\n")
}

string[] concat( string[] s1, string[] s2 ) {
	string[] ret	
	for ( string str : s1 ) ret.add(str)
	for ( string str : s2 ) ret.add(str)
	return ret
}

string[] concat( string[] s1, string[] s2, string[] s3 ) {
	string[] ret	
	for ( string str : s1 ) ret.add(str)
	for ( string str : s2 ) ret.add(str)
	for ( string str : s3 ) ret.add(str)
	return ret
}

string[] concat( string[] s1, string[] s2, string[] s3, string[] s4 ) {
	string[] ret	
	for ( string str : s1 ) ret.add(str)
	for ( string str : s2 ) ret.add(str)
	for ( string str : s3 ) ret.add(str)
	for ( string str : s4 ) ret.add(str)
	return ret
}

bool is_in_array( string str, string[] arr ) { // case-insensitive
	for( string val : arr ) \
		if ( val.toLower() == str.toLower() ) \
			return true
	return false
}

string change_dir( string file, string out_dir ) {
	return out_dir + "/" + get_basename( file )
}

string get_path( string str ) {
	base := rm_str_at_end( str, "/" ).path()
	return base
}

// file/ disk IO functions

string chk_file( string str, string ext ) {
	path := get_path( str )
	path_ext := path + ext

	if ( !path_ext.exists() ) {
		error("File does not exist for $path_ext\n")
	}
	else if ( path_ext.isDir() ) {
		error("Needs file instead of dir for $path_ext\n")
	}
	else if ( path_ext.isFile() ) {
		return path
	}
	else {
		error("Unknown error for $path_ext\n")
	}
}

string mkdir_path( string str ) { 
	// make filename full path and mkdir -p
	path := get_path( str )

	if ( path.exists() ) {		
		return path
	}
	else if ( path.mkdir() ) {
		return path
	}
	else {
		error("Could not make for $path\n")
	}
}

string[] get_script_file_paths( string suffix ) {
	script_file 	:= "$ppwd/$programPath"	// path of your BDS script

	if (!script_file.exists()) script_file = "$programPath"

	script_path := script_file.dirName()

	string[] ret

	for ( string path : rel_script_file_paths ) {
		path = "$script_path/$path"
		if ( path.exists() ) ret.add( path + suffix )
	}

	return ret
}

string[] get_script_file_paths() {
	return get_script_file_paths( "" )
}

void save_data( string file, string[] data ) { // ; separated array
	string str
	for( string val : data ) { str = str + val + ";" }

	rm_str_at_end( str, ";")
	file.write( str )
}

void save_data( string file, string[] data, string delimiter ) { // ; separated array
	string str
	for( string val : data ) { str = str + val + delimiter }

	rm_str_at_end( str, delimiter )
	file.write( str )

	sleep( 3 ) // wait 3 seconds before 	
}

string[] load_data( string file ) {
	sleep( 3 ) // wait 3 seconds before loading t

	return file.read().split(";")
}

// print

void print_a_tab_colon_b( string a, string b ) {
	print( a + "\t: " + b + "\n")
}

void print_if_not_null( string a, string b ) {
	if ( b!="" && b!="false" ) print_a_tab_colon_b( a, b )
}

void print_if_not_default( string a, string b, string default ) {
	if ( b.toLower()!=default.toLower() ) print_a_tab_colon_b( a, b )
}

// math functions

int round( real f ) {
	string s = f
	arr := s.split('\.')
	int a = arr[0].parseInt()
	int b = arr[1].parseInt()
	if ( b >= 5 ) return a+1
	else return a
}

int min( int a, int b ) {
	if ( a > b ) return b
	else return a
}

int max( int a, int b ) {
	if ( a > b ) return a
	else return b
}

