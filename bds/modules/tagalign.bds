#!/usr/bin/env bds

include "species.bds"

// has functions related to tagalign, and helps getting tagalign from configruation file or command line argument

help Tagalign definition
help      To define tagalign use '-tag[REP_NO]', For control use '-ctl_tag[REP_NO]'

// Dummy variables for HELP context (tag)
tag1 		:= ""		help Tagalign for replicate 1. For control, use '-ctl_tag1'
tag2 		:= ""		help Tagalign for replicate 2. For more tagaligns, use '-tag[REP_NO]'

help Alignment settings for tagalign

nreads 		:= 15000000	help # reads to be subsampled for cross corr. analysis (default: 15000000).


init_tag()


void init_tag() {

	if ( conf_file_exists() ) {

		nreads 		= get_conf_val_int( nreads,		["NREADS"] )
	}

	if ( v ) { // verbose
		print("\n")		
		print( "# read for xcor subsample\t: $nreads\n")
	}
}

string _subsample_tag( string tag, string out_dir, string info ) {

	prefix 		:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )

	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 		:= [ tag ]
	out 		:= subsampled_tag

	task( taskName:= "_subsample_tag "+info, \
		cpus:=nth, mem:=parse_mem(mem), timeout:=parse_time(wt), \
		out<-in ) {

		sys $SHCMD_INIT
	
		//# Subsample tagAlign file
		sys zcat $tag | \
			grep -v "chrM" | shuf -n $nreads | gzip -c > $subsampled_tag
	}

	return out
}

string _subsample_bedpe( string bedpe, string out_dir, string info ) {
	
	prefix 		:= change_dir( remove_ext( bedpe, ["bedpe","bed"] ), out_dir )

	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 		:= [ bedpe ]
	out 		:= subsampled_tag

	task( taskName:= "subsample_bedpe "+info, \
		cpus:=nth, mem:=parse_mem(mem), timeout:=parse_time(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# Subsample tagAlign file
		//# Restrict to one read end per pair for CC analysis
		sys zcat $bedpe | \
			grep -v "chrM" | shuf -n $nreads | \
			awk 'BEGIN{OFS="\t"}{print $1,$2,$3,"N","1000",$9}' | gzip -c > $subsampled_tag
	}

	return out
}

string[] _xcor( string tag, string out_dir, string info ) {

	// misc.
	prefix 		:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )

	xcor_score 	:= "$prefix.cc.qc"
	xcor_plot 	:= "$prefix.cc.plot.pdf"

	in 		:= [ tag ]
	out 		:= [ xcor_score, xcor_plot ]

	task( taskName:= "xcor "+info, \
		cpus:=nth, mem:=parse_mem(mem), timeout:=parse_time(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# CCSCORE FILE format
		//# Filename <tab> numReads <tab> estFragLen <tab> correstFragLen <tab> PhantomPeak <tab> corrphantomPeak <tab> argmincorr <tab> mincorr <tab> phantomPeakCoef <tab> relPhantomPeakCoef <tab> QualityTag
		sys Rscript $(which run_spp_nodups.R) -rf \
			-c=$tag -p=$nth \
			-filtchr=chrM -savp=$xcor_plot -out=$xcor_score
		sys sed -r 's/,[^\t]+//g' $xcor_score > $xcor_score.tmp
		sys mv $xcor_score.tmp $xcor_score
	}

	return out
}

// make spr(self_pseudo_replicate)
string[] _spr( string tag, string out_dir, string info ) {
	
	prefix 	:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )

	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= [ tag_pr1, tag_pr2 ]

	task( taskName:= "spr "+info, \
		cpus:=nth, mem:=parse_mem(mem), timeout:=parse_time(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# Get total number of read pairs
		sys nlines=$( zcat $tag | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))
		
		//# Shuffle and split BEDPE file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys zcat $tag | shuf | split -d -l $((nlines)) - $prefix.

		//# Convert read pairs to reads into standard tagAlign file
		sys gzip -c $prefix.00 > $tag_pr1
		sys rm -f $prefix.00
		sys gzip -c $prefix.01 > $tag_pr2
		sys rm -f $prefix.01
	}

	return out
}

string[] _spr_PE( string bedpe, string out_dir, string info ) {
	
	prefix 	:= change_dir( remove_ext( bedpe, ["bedpe","bed","tagAlign"] ), out_dir )

	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ bedpe ]
	out 	:= [ tag_pr1, tag_pr2 ]

	task( taskName:= "spr_PE "+info, \
		cpus:=nth, mem:=parse_mem(mem), timeout:=parse_time(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# Get total number of read pairs
		sys nlines=$( zcat $bedpe | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))

		//# Shuffle and split BEDPE file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys zcat $bedpe | shuf | split -d -l $((nlines)) - $prefix.  

		//# Convert read pairs to reads into standard tagAlign file
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' "$prefix.00" | \
			gzip -c > $tag_pr1
		sys rm -f $prefix.00
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' "$prefix.01" | \
			gzip -c > $tag_pr2
		sys rm -f $prefix.01
	}
	
	return out
}

string[] _ppr( string tag1, string tag1_pr1, string tag1_pr2, string tag2, string tag2_pr1, string tag2_pr2, string out_dir, string info ) {
	// make psr(pooled pseudo replicate)

	tag_pooled 	:= _pool_tag( tag1, tag2, out_dir, info )
	tag_ppr1 	:= _pool_tag( tag1_pr1, tag2_pr1, out_dir, info )
	tag_ppr2 	:= _pool_tag( tag1_pr2, tag2_pr2, out_dir, info )

	out 	:= [ tag_pooled, tag_ppr1, tag_ppr2 ]

	wait

	return out
}

string _pool_tag( string tag1, string tag2, string out_dir, string info ) {

	prefix 		:= "$out_dir/" + concat_basename_wo_ext( tag1, tag2, ["tagAlign","tag","bed"] )	

	tag_pooled 	:= "$prefix"+"_pooled.tagAlign.gz"

	in 		:= [ tag1, tag2 ]
	out 		:= tag_pooled

	task( taskName:= "pool_tag "+info, \
		cpus:=nth, mem:=parse_mem(mem), timeout:=parse_time(wt), \
		out<-in ) {

		sys $SHCMD_INIT
		sys zcat $tag1 $tag2 | gzip -c > $tag_pooled		
	}

	return out
}

string get_fraglen( string xcor_score ) {   // get FRAGLEN (3rd column of cc score file) for spp(-speak=$FRAGLEN)	
	cols := xcor_score.read().split("\t")
	return cols[2]
}

string get_tag( int ctl, int rep ) {

	key := ( ctl > 0 ? "ctl_tag" : "tag" ) + "_rep" + rep
	key2 := ( ctl > 0 ? "ctl_tagalign" : "tagalign" ) + "_rep" + rep

	key3 := ( ctl > 0 ? "ctl_tag" : "tag" ) + rep
	key4 := ( ctl > 0 ? "ctl_tagalign" : "tagalign" ) + rep

	key5 := ( ctl > 0 ? "ctl_tag" : "tag" )
	key6 := ( ctl > 0 ? "ctl_tagalign" : "tagalign" )

	if ( (ctl==0) && (rep==1) && ( tag1 != "") ) {
		return tag1
	}
	else if ( (ctl==0) && (rep==2) && ( tag2 != "") ) {
		return tag2
	}
	else if ( cmd_line_arg_has_key( key ) ) {
		return get_cmd_line_arg_val( key )
	}
	else if ( cmd_line_arg_has_key( key2 ) ) {
		return get_cmd_line_arg_val( key2 )
	}
	else if ( cmd_line_arg_has_key( key3 ) ) {
		return get_cmd_line_arg_val( key3 )
	}
	else if ( cmd_line_arg_has_key( key4 ) ) {
		return get_cmd_line_arg_val( key4 )
	}
	else if ( (rep==1) && cmd_line_arg_has_key( key5 ) ) {
		return get_cmd_line_arg_val( key5 )
	}
	else if ( (rep==1) && cmd_line_arg_has_key( key6 ) ) {
		return get_cmd_line_arg_val( key6 )
	}
	else if ( conf.hasKey( key ) ) {
		return get_path( conf{ key } )
	}
	else if ( conf.hasKey( key2 ) ) {
		return get_path( conf{ key2 } )
	}
	else if ( conf.hasKey( key3 ) ) {
		return get_path( conf{ key3 } )
	}
	else if ( conf.hasKey( key4 ) ) {
		return get_path( conf{ key4 } )
	}
	else if ( (rep==1) && conf.hasKey( key5 ) ) {
		return get_path( conf{ key5 } )
	}
	else if ( (rep==1) && conf.hasKey( key6 ) ) {
		return get_path( conf{ key6 } )
	}
	return ""
}

bool is_tag_paired_end( int ctl, int rep ) {
/*
	key := ( ctl > 0 ? "ctl_tag" : "tag" ) + rep + "_pe"
	key_wo_rep := ( ctl > 0 ? "ctl_tag" : "tag" ) + "_pe"

	if ( conf.hasKey( key ) ) {
		return conf{ key }.parseBool()
	}
	else if ( (rep==1) && conf.hasKey( key_wo_rep ) ) {
		return conf{ key_wo_rep }.parseBool()
	}
	else if ( cmd_line_arg_has_key( key ) ) {
		val := get_cmd_line_arg_val( key )
		return (val=="") || (val.parseBool())
	}
	else if ( (rep==1) && cmd_line_arg_has_key( key_wo_rep ) ) {
		val := get_cmd_line_arg_val( key_wo_rep )
		return (val=="") || (val.parseBool())
	}	
*/
	return false
}

bool is_tag_single_ended( int ctl, int rep ) {

	return !is_tag_paired_end( ctl, rep )
}

bool is_tag_PE( int ctl, int rep ) {

	return is_tag_paired_end( ctl, rep )
}

bool is_tag_SE( int ctl, int rep ) {

	return is_tag_single_ended( ctl, rep )
}
