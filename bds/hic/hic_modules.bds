#!/usr/bin/env bds

include "../modules/species.bds"

help HiC flexible setting

res 		:= "10"		help Resolution (comma separated integers) (eg. '10,8,5' , default: 10)
blacklist 	:= ""		help Blacklist (default: blank).
RE_file 	:= "" 		help RE file (default: blank).
read_len 	:= 51 		help Read Length (default: 51).
map_thres  	:= "0.5"	help Mappability threshold in step 4 (default: 0.5).
num_bin		:= 200		help Number of bins (default: 200).
dist_up_thres 	:= 10000000 	help 10Mb? (default: 10000000).

org 		:= "human" 	help org (default: human).
ref 		:= "hg19"	help ref (default: hg19).
re 		:= "HindIII" 	help re (default: hindIII).

int[] resolution



init_hic_flexible()

void init_hic_flexible() {

	if ( conf_file_exists() ) {

		res 		= get_conf_val( res, 			["res"] ) 
		blacklist 	= get_conf_val( blacklist, 		["blacklist"] ) 
		RE_file 	= get_conf_val( RE_file, 		["RE_file","REfile"] )
		read_len 	= get_conf_val_int( read_len, 		["read_len", "read_length", "readlen", "readlength"] )
		map_thres  	= get_conf_val( map_thres, 		["map_thres"] ) 
		num_bin		= get_conf_val_int( num_bin, 		["num_bin", "numbin"] )
		dist_up_thres 	= get_conf_val_int( dist_up_thres, 	["dist_up_thres"] )

		org 		= get_conf_val( org, 			["org"] )
		ref 		= get_conf_val( ref, 			["ref"] )
		re 		= get_conf_val( re, 			["re"] ) 
	}

	if ( v ) { // verbose
		print("\n")
		print( "Resolution\t\t: $res\n" )
		print( "Blacklist\t\t: $blacklist\n" )
		print( "RE file\t\t\t: $RE_file\n" )
		print( "Read Length\t\t: $read_len\n" )
		print( "Mappability threshold in step 4\t: $map_thres\n" )
		print( "Number of bins\t\t: $num_bin\n" )
		print( "10Mb?\t\t\t: $dist_up_thres\n" )
		print( "org\t\t\t: $org\n" )
		print( "ref\t\t\t: $ref\n" )
		print( "re\t\t\t: $re\n" )
	}

	// create resolution array
	_resolution := res.trim().replace(";",",").replace(":",",").split(",")

	for ( string w : _resolution ) {
		resolution.add( w.parseInt() )
	}
}

string _hic_step1( string REfile, int w, string out_dir ) {
	//# write out file with RE fragments @ RE-resolution

	RE_site 	:= "$out_dir/REFrags.RE$w"
	RE_site_mid 	:= "$out_dir/REFragsMid.RE$w"

	in 	:= REfile
	out 	:= [RE_site, RE_site_mid]

	task( taskName := "hic1 RE$w", cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		sys python $(which get-contactCounts-atRESize.py) $REfile $w $RE_site $RE_site_mid
	}

	return out	
}


string _hic_step2( string id, string[] cleaned_pairs, string RE_site, int w, string out_dir ) {
	//# step 2 operations:
	//#  - get contacts at fixed window size 
	prefix := "$out_dir/id"

	IntrachrThres 	:= w*5000 //$(($w*5000)) # distance threshold for calculating intrachromosomal interactions

	IntSite1Temp := prefix+"_IntSite1Temp"
	IntSite2Temp := prefix+"_IntSite2Temp"
	Site1NoBlack := prefix+"_Site1NoBlack"
	Site2NoBlack := prefix+"_Site2NoBlack"
	Read1 := prefix+"_Read1"
	Read2 := prefix+"_Read2"

	list_contacts_bfr_ice := prefix+"_ListOfContacts"
	list_contacts_bfr_ice_gz := "$list_contacts_bfr_ice.gz"

	in  	:= [RE_site];	for ( string file : cleaned_pairs ) in.add( file )
	out 	:= list_contacts_bfr_ice_gz

	cleaned_pairs_all := array_to_str( cleaned_pairs, " " )

	task( taskName := "hic2 "+id, cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		//# remove pairs separated closer than threshold, remove chrM
		sys zcat $cleaned_pairs_all \
			| awk 'length($3)<=5 && length($7)<=5 {print}' | grep -v chrM \
			| awk '$3!=$7 || ($3==$7 && ($4-$8> t || $8-$4> t)) {print $3,$4,$4+$read_len,$1}' t=$IntrachrThres \
			| /usr/bin/perl -p -i -e 's/ /\t/g' > $IntSite1Temp
		sys zcat $cleaned_pairs_all \
			| awk 'length($3)<=5 && length($7)<=5 {print}' | grep -v chrM \
			| awk '$3!=$7 || ($3==$7 && ($4-$8> t || $8-$4> t)) {print $7, $8, $8+$read_len, $1}' t=$IntrachrThres \
			| /usr/bin/perl -p -i -e 's/ /\t/g' > $IntSite2Temp

		//# remove reads that overlap with Black list 
		sys bedtools intersect -v -a $IntSite1Temp -b $blacklist > $Site1NoBlack
		sys bedtools intersect -v -a $IntSite2Temp -b $blacklist > $Site2NoBlack

		//# assign reads to RE fragments
		sys bedtools intersect -wao -a $Site1NoBlack -b $RE_site \
			| awk '{print  $1, $8, $4}'| sort -k3,3| uniq -f 2 \
			| awk '{print  $3, $1, $2}'| sort -k1,1 > $Read1

		sys bedtools intersect -wao -a $Site2NoBlack -b $RE_site \
			| awk '{print  $1, $8, $4}'| sort -k3,3| uniq -f 2 \
			| awk '{print  $3, $1, $2}'| sort -k1,1 > $Read2

		//# join two fragment reads and calculate unique pairs
		sys join $Read1 $Read2 \
			| awk '{if($2<$4 || ($2==$4 && $3<=$5)) print $2,$3,$4,$5; else print $4,$5,$2, $3}' \
			| sort | uniq -c \
			| awk 'OFS=\"\t\"{print $2,$3,$4,$5,$1}' > $list_contacts_bfr_ice

		sys gzip $list_contacts_bfr_ice
		sys rm -f $IntSite1Temp $IntSite2Temp $Site1NoBlack $Site2NoBlack $Read1 $Read2
	}

	return out
}

string _hic_step2a( string id, string list_contacts_bfr_ice, int w, string out_dir ) {
	
	prefix 		:= "$out_dir/id"
	raw_contact_cnts := "$prefix"+"_RawContactCounts_RE$w"

	in 	:= list_contacts_bfr_ice
	out 	:= raw_contact_cnts

	task( taskName := "hic2a "+id, cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT

		sys python $(which plot_ScatterContactCounts.py) $list_contacts_bfr_ice $id $w $raw_contact_cnts
	}

	return out
}

string _hic_step3( string RE_site, int w, string out_dir ) {
	//# preprocess the genome to get mappability per window. Note: needs to be run only once for a particular resolution

        bias 	:= "$out_dir/$org-$ref.$re.RE$w"

        in 	:= RE_site
        out 	:= bias

	task( taskName := "hic3 RE$w", cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		sys python $(which mappability_from_bed.py) --regions $RE_site --read_length $read_len --out $bias
	}

	return out
}

string _hic_step4( string id, string list_contacts_bfr_ice, string bias, string out_dir ) {
	//# step 4 operations:
	//#  - normalizes each library using sparse ICE implementation
	//#  - calculate biases for each window.

	prefix 	:= "$out_dir/$id"

	list_contacts_aft_ice 	:= "$prefix"+"_after_ICE"
	list_contacts_aft_ice_gz:= "$prefix"+"_after_ICE.gz"

	list_contacts_aft_ice_biases 	:= "$list_contacts_aft_ice.biases"
	list_contacts_aft_ice_biases_gz := "$list_contacts_aft_ice.biases.gz"

	in 	:= [list_contacts_bfr_ice, bias]
	out 	:= list_contacts_aft_ice_biases_gz

	//#additional variables: 
	norm := "l1" // # l1 or l2 norm

	task( taskName := "hic4 "+id, cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		sys zcat $list_contacts_bfr_ice > $list_contacts_bfr_ice.temp
		sys cat $bias  > $bias.temp
		sys python $(which ICE-with-sparseMatrix.py) $list_contacts_bfr_ice.temp $bias.temp $norm $list_contacts_aft_ice $map_thres
		sys gzip list_contacts_aft_ice
		sys rm -rf $list_contacts_bfr_ice.temp bias.temp
	}

	return out
}

string _hic_step4a( string id, string list_contacts_aft_ice, int w, string out_dir ) {

	prefix 		:= "$out_dir/$id"
	dist_bias 	:= "$prefix"+"_DistOfBiases"

	in 	:= list_contacts_aft_ice
	out 	:= dist_bias

	task( taskName := "hic4a "+id, cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		//sys echo $lib $ref $org $re		
		sys zcat $list_contacts_aft_ice > $list_contacts_aft_ice.temp
		sys python $(which plot_DistOfBiases.py) $list_contacts_aft_ice.temp $dist_bias $id $w
		sys rm -f $list_contacts_aft_ice.temp
	}

	return out
}

string _hic_step5( string id, string list_contacts_bfr_ice, string RE_site_mid, string out_dir ) {
	//#  - calculate total numbmer of contacts coming out of each window.

	prefix 		:= "$out_dir/$id"

	contacts_per_frag 	:= "$prefix"+"_ContactsPerFragment"
	contacts_per_frag_gz 	:= "$prefix"+"_ContactsPerFragment.gz"
	srt_contacts 		:= "$prefix"+"_SortedContacts"

	in 	:= [list_contacts_bfr_ice, RE_site_mid]
	out 	:= contacts_per_frag_gz

	task( taskName := "hic5 "+id, cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		sys touch $contacts_per_frag.tmp
		sys zcat $list_contacts_bfr_ice | awk '{print $1, $2, $5}' > $contacts_per_frag.tmp
		sys zcat $list_contacts_bfr_ice | awk '{print $3, $4, $5}' >> $contacts_per_frag.tmp
		//sys sort -k 1,1 $tmp > $SortedContacts
		sys sort -k1,1 -k2n,2 $contacts_per_frag.tmp > $srt_contacts
		sys echo >> $srt_contacts
		sys cat $srt_contacts | gawk '($1==key1 && $2==key2) { sum+=$3} ($1 != key1 || $2 != key2) {if (NR>1){print key1, key2, sum} key1=$1; key2=$2; sum=$3}' > $contacts_per_frag.tmp
		sys python $(which MergeCounts.py) $RE_site_mid $contacts_per_frag.tmp $contacts_per_frag
		sys gzip $contacts_per_frag
		sys rm -f $contacts_per_frag.tmp $srt_contacts
	}
	return out
}

void _hic_step6( string before_after, string id, \
		string list_contacts_bfr_ice, string list_contacts_aft_ice, string contacts_per_frag, int w, string out_dir ) {
	//#  - perform fit-hi-c on data before and after ICE
	//#  - places results into $PROJDIR/data/fit-hi-c-results
	prefix 		:= "$out_dir/$id"

	distLowThres := w*5000 //$(($w*5000))

	mappabilityThres:= 1 //# minimum number of hits per locus that has to exist to call it mappable. DEFAULT is 1.
	noOfPasses 	:= 1 //# number of passes after the initial (before) fit. DEFAULT is 1 (after)
	residualFactor 	:= -1 //# how many times better residual is desired for splines compared to power-law fit. Default is 10

	log := "$prefix"+"_log.conf.file"
	html := "$prefix"+"_fithic.html"

	in 	:= [list_contacts_bfr_ice, list_contacts_aft_ice, contacts_per_frag]
	out 	:= [log, html]

	task( taskName := "hic6 "+id, cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		sys discBinsize=$(($(($dist_up_thres-$distLowThres))/$num_bin))
		sys echo ${discBinsize}

		sys date >> $log
		sys echo w=$w num_bin=$num_bin mappabilityThres=$mappabilityThres noOfPasses=$noOfPasses dist_up_thres=$dist_up_thres distLowThres=$distLowThres discBinsize=${discBinsize} residualFactor=$residualFactor>> $log 
		sys echo >> $log

		sys echo \<html\> > $html
		sys echo \<head\>\<meta http-equiv= \"content-type\" content=\"text/html; charset=UTF-8\"\>\<title\>\</title\>\</head\> >> $html
		sys echo \<body\> >> $html
		sys echo \<table  border=\"1\" \> >> $html
		sys echo \<tbody\> >> $html

		sys echo \<tr\> >> $html
		sys echo \<th scope=\"col\"\> Library label \</th\> >> $html

		sys for t in `seq $(($noOfPasses+1))`;do \
			#echo \<th scope=\"col\"\> Equal occupancy binning \</th\> >> $html \
			echo \<th scope=\"col\"\> Fitting - power-law \</th\> >> $html \
			echo \<th scope=\"col\"\> Fitting - spline \</th\> >> $html \
			echo \<th scope=\"col\"\> Extract outliers - power-law \</th\> >> $html \
			echo \<th scope=\"col\"\> Extract outliers - spline \</th\> >> $html \
			echo \<th scope=\"col\"\> FDR - compare all \</th\> >> $html \
			echo \<th scope=\"col\"\> FDR - spline \</th\> >> $html \
			echo \<th scope=\"col\"\> Binning bias \</th\> >> $html \
			done \
		sys echo \</tr\> >> $html

		sys noOfCols=$((($noOfPasses+1)*7))
		sys echo \<tr\> >> $html
		sys echo \<th\> \</th\> >> $html
		sys for t in `seq ${noOfCols}`; do \
			echo \<th\> ${t} \</th\> >> $html \
			done
		sys echo \</tr\> >> $html

		sys if [[ $before_after == "afterICE" ]]; then \
			# REMOVED -d and -r and comparisonMode \
			python $(which fit-hic-LATEST.py) -l $id -t $list_contacts_aft_ice -f $contacts_per_frag -i $list_contacts_bfr_ice -L $distLowThres -U $dist_up_thres -b $num_bin -m $mappabilityThres -p $noOfPasses -d ${discBinsize} -r $residualFactor -o $out_dir --comparisonMode --usebinning > $out_dir/$id.out \
	  		#python $(which fit-hi-c.py) -l $id -t $list_contacts_aft_ice -f $contacts_per_frag -i $list_contacts_bfr_ice -L $distLowThres -U $dist_up_thres -b $num_bin -m $mappabilityThres -p $noOfPasses  -o $out_dir  > $out_dir/$id.out \
			else \
			python $(which fit-hic-LATEST.py) -l $id -f $contacts_per_frag -i $list_contacts_bfr_ice -L $distLowThres -U $dist_up_thres -b $num_bin -m $mappabilityThres -p $noOfPasses -d ${discBinsize} -r $residualFactor -o $out_dir --comparisonMode --usebinning > $out_dir/$id.out \
	  		#python $(which fit-hi-c.py) -l $id -f $contacts_per_frag -i $list_contacts_bfr_ice -L $distLowThres -U $dist_up_thres -b $num_bin -m $mappabilityThres -p $noOfPasses  -o $out_dir > $out_dir/$id.out \
			fi

		sys echo \<tr\> >> $html
		sys echo \<td\> $id \</td\> >> $html
		sys for t in `seq $(($noOfPasses+1))`;do \
			echo \<td\> \<a href=\"$id.plaw_pass${t}.png\"\>\<img src=\"$id.plaw_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.spline_pass${t}.png\"\>\<img src=\"$id.spline_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.plaw_pass${t}.extractOutliers.png\"\>\<img src=\"$id.plaw_pass${t}.extractOutliers.png\" width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.spline_pass${t}.extractOutliers.png\"\>\<img src=\"$id.spline_pass${t}.extractOutliers.png\" width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.comparison_pass${t}.png\"\>\<img src=\"$id.comparison_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			#echo \<td\> \<a href=\"$id.plaw_pass${t}.qplot.png\"\>\<img src=\"$id.plaw_pass${t}.qplot.png\"  width=400\> \</a\>\</td\> >> $html \
			#echo \<td\> \<a href=\"$id.spline_pass${t}.qplot.png\"\>\<img src=\"$id.spline_pass${t}.qplot.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.comparisonDisc_pass${t}.png\"\>\<img src=\"$id.comparisonDisc_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.comparisonFitDisc_pass${t}.png\"\>\<img src=\"$id.comparisonFitDisc_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			done
		sys echo \<tr\> >> $html
		sys echo \</tbody\>\</table\> >> $html
		sys echo \</body\>\</html\> >> $html

	}
}


void _hic_step6a( string before_after, string id, \
		string list_contacts_bfr_ice, string list_contacts_aft_ice, string contacts_per_frag, int w, string out_dir ) {
	//#  - perform fit-hi-c on data before and after ICE
	//#  - places results into $PROJDIR/data/fit-hi-c-results
	prefix 		:= "$out_dir/$id"

	distLowThres := w*5000 //$(($w*5000))

	mappabilityThres:= 1 //# minimum number of hits per locus that has to exist to call it mappable. DEFAULT is 1.
	noOfPasses 	:= 1 //# number of passes after the initial (before) fit. DEFAULT is 1 (after)
	residualFactor 	:= -1 //# how many times better residual is desired for splines compared to power-law fit. Default is 10

	log := "$prefix"+"_log.conf.file"
	html := "$prefix"+"_fithic.html"

	in 	:= [list_contacts_bfr_ice, list_contacts_aft_ice, contacts_per_frag]
	out 	:= [log, html]

	task( taskName := "hic6 "+id, cpus := nth, timeout := parse_time(wt), mem := parse_mem(mem), \
		out<-in) {

		sys $SHCMD_INIT	

		sys discBinsize=$(($(($dist_up_thres-$distLowThres))/$num_bin))
		sys echo ${discBinsize}

		sys date >> $log
		sys echo w=$w num_bin=$num_bin mappabilityThres=$mappabilityThres noOfPasses=$noOfPasses dist_up_thres=$dist_up_thres distLowThres=$distLowThres discBinsize=${discBinsize} residualFactor=$residualFactor>> $log 
		sys echo >> $log

		sys echo \<html\> > $html
		sys echo \<head\>\<meta http-equiv= \"content-type\" content=\"text/html; charset=UTF-8\"\>\<title\>\</title\>\</head\> >> $html
		sys echo \<body\> >> $html
		sys echo \<table  border=\"1\" \> >> $html
		sys echo \<tbody\> >> $html

		sys echo \<tr\> >> $html
		sys echo \<th scope=\"col\"\> Library label \</th\> >> $html

		sys for t in `seq $(($noOfPasses+1))`;do \
			#echo \<th scope=\"col\"\> Equal occupancy binning \</th\> >> $html \
			echo \<th scope=\"col\"\> Fitting - power-law \</th\> >> $html \
			echo \<th scope=\"col\"\> Fitting - spline \</th\> >> $html \
			echo \<th scope=\"col\"\> Extract outliers - power-law \</th\> >> $html \
			echo \<th scope=\"col\"\> Extract outliers - spline \</th\> >> $html \
			echo \<th scope=\"col\"\> FDR - compare all \</th\> >> $html \
			echo \<th scope=\"col\"\> FDR - spline \</th\> >> $html \
			echo \<th scope=\"col\"\> Binning bias \</th\> >> $html \
			done \
		sys echo \</tr\> >> $html

		sys noOfCols=$((($noOfPasses+1)*7))
		sys echo \<tr\> >> $html
		sys echo \<th\> \</th\> >> $html
		sys for t in `seq ${noOfCols}`; do \
			echo \<th\> ${t} \</th\> >> $html \
			done
		sys echo \</tr\> >> $html

		sys if [[ $before_after == "afterICE" ]]; then \
			python $(which fit-hic-LATEST_std.py) -l "$id" -t $list_contacts_aft_ice -f $contacts_per_frag -i $list_contacts_bfr_ice -L $distLowThres -U $dist_up_thres -b $num_bin -m $mappabilityThres -p $noOfPasses -d ${discBinsize} -r $residualFactor -o $out_dir --comparisonMode --usebinning > $out_dir/$id.out \
			else \
			python $(which fit-hic-LATEST_std.py) -l "$id" -f $contacts_per_frag -i $list_contacts_bfr_ice -L $distLowThres -U $dist_up_thres -b $num_bin -m $mappabilityThres -p $noOfPasses -d ${discBinsize} -r $residualFactor -o $out_dir --comparisonMode --usebinning > $out_dir/$id.out \
			fi

		sys echo \<tr\> >> $html
		sys echo \<td\> $id \</td\> >> $html
		sys for t in `seq $(($noOfPasses+1))`;do \
			echo \<td\> \<a href=\"$id.plaw_pass${t}.png\"\>\<img src=\"$id.plaw_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.spline_pass${t}.png\"\>\<img src=\"$id.spline_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.plaw_pass${t}.extractOutliers.png\"\>\<img src=\"$id.plaw_pass${t}.extractOutliers.png\" width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.spline_pass${t}.extractOutliers.png\"\>\<img src=\"$id.spline_pass${t}.extractOutliers.png\" width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.comparison_pass${t}.png\"\>\<img src=\"$id.comparison_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			#echo \<td\> \<a href=\"$id.plaw_pass${t}.qplot.png\"\>\<img src=\"$id.plaw_pass${t}.qplot.png\"  width=400\> \</a\>\</td\> >> $html \
			#echo \<td\> \<a href=\"$id.spline_pass${t}.qplot.png\"\>\<img src=\"$id.spline_pass${t}.qplot.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.comparisonDisc_pass${t}.png\"\>\<img src=\"$id.comparisonDisc_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			echo \<td\> \<a href=\"$id.comparisonFitDisc_pass${t}.png\"\>\<img src=\"$id.comparisonFitDisc_pass${t}.png\"  width=400\> \</a\>\</td\> >> $html \
			done
		sys echo \<tr\> >> $html
		sys echo \</tbody\>\</table\> >> $html
		sys echo \</body\>\</html\> >> $html

	}
}
