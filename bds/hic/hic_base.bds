#!/usr/bin/env bds

include "../chipseq/modules/species.bds"


help Replicates and libraries definition
prefix 		:= "HiC" 	help Prefix for output file names (default: HiC).
reps 		:= "" 		help List of replicate names (comma separated) (eg. 'R1,R2,R8', default: blank).
libs  		:= ""		help List of library names (comma separated) (eg. 'SC,D3', default: blank).


num_rep 	:= 1		//help # replicates. (default: 1).
num_lib 	:= 1		//help # libraries. (default: 1).
string[] rep_names // replicate names
string[] lib_names // library names
string{} extracted_pairs // map of extracted mapped pairs (key=rep;lib)
string{} cleaned_pairs // map of cleaned mapped pairs (key=rep;lib)



init_hic_base()


void init_hic_base() {

	if ( conf_file_exists() ) {
		prefix 	= get_conf_val( prefix, ["prefix"] )
		reps 	= get_conf_val( reps, 	["reps"] )
		libs 	= get_conf_val( libs, 	["libs"] )
	}

	// convert name_rep and name_lib to arrays
	rep_names = reps.trim().replace(":",",").replace(";",",").split(",")
	lib_names = libs.trim().replace(":",",").replace(";",",").split(",")

	num_rep = rep_names.size()
	num_lib = lib_names.size()

	if ( v ) { // verbose
		print("\n")
		print( "Prefix\t\t\t: $prefix\n" )
		print( "# replicates\t\t: $num_rep\n" )
		print( "# libraries\t\t: $num_lib\n" )
		print( "Replicate names\t\t: $reps\n" )
		print( "Library names\t\t: $libs\n" )
		print("\n")
	}
}

void set_shell_env() {
	
	// create output dir.
	if ( is_kundaje_lab() ) {

		print("\n\nAutomatically adding environment variables... (kundaje_lab: $hostname) \n\n")

		print("DEBUG: init_mod=$init_mod\n")
		if ( SHCMD_INIT.indexOf( init_mod ) < 0  ) { // if not module init. cmd found, then add it
			SHCMD_INIT = SHCMD_INIT + " . /etc/profile.d/modules.sh;"
		}

		if ( is_scg3() ) { // if on SCG3

			dir_sw_BDS := "/srv/gsfs0/scratch/leepc12/software"

			path := " export PATH=" \
				+ "$dir_sw_BDS/python2.7/bin:" \
				+ "$dir_sw_BDS/R-3.2.0/bin:" \
				+ "\${PATH}"

			shellcmd := "export LAPACK=$dir_sw_BDS/blas/lapack-*/liblapack.a; " \
					+ "export R_HOME=$dir_sw_BDS/R-3.2.0; "\
					+ "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$dir_sw_BDS/R-3.2.0/lib; "

			SHCMD_INIT = SHCMD_INIT + ";" + path + ";" + shellcmd
			SHCMD_INIT = SHCMD_INIT.replace( ";;", ";" )

			SHCMD_INIT = SHCMD_INIT + ""
		}
		else {
			SHCMD_INIT = SHCMD_INIT + " module add r/3.2.0;"
		}

		SHCMD_INIT = SHCMD_INIT + " module add bwa/0.7.7 samtools/0.1.19 bedtools/2.21.0"
		SHCMD_INIT = SHCMD_INIT + " export _JAVA_OPTIONS='-Xms256M -Xmx512M -XX:ParallelGCThreads=1'; export MAX_JAVA_MEM='8G'; export MALLOC_ARENA_MAX=4"
		SHCMD_INIT = SHCMD_INIT.replace( ";;", ";" )

		if ( v ) { // verbose
			print( "Final shell cmd. for init.\t: $SHCMD_INIT\n" )
		}
	}
}

void help() {

	if ( is_cmd_line_arg_empty() ) {
		print("\n")
		print(" List of parameters\n")
		print(" \n")
		printHelp()

		exit
	}
}

string get_id( int lib, int rep ) {

	return "$prefix"+"_"+lib_names[lib-1]+"_"+rep_names[rep-1]
}

string get_id( int lib ) {

	return "$prefix"+"_"+lib_names[lib-1]
}
