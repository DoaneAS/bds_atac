#!/usr/bin/env bds

include "../modules_align_map.bds"

// cmd line arg wrapper and help
int npeak 			= 300000 	help Parameter for -npeak in phantompeakqual tool run_spp.R (default: 300000).
bool dup_rm 		= true	 	help Set it true if dupes are removed when aligning (default: true).
string idr_thresh 	= 0.02		help IDR thresh (default: 0.02).


// parameters
int NPEAK 			= npeak	
bool DUPE_REMOVED 	= dup_rm
string IDR_THRESH 	= idr_thresh


// pipeline starts here
read_param_general()
read_param_align_map()
read_param_tf_chipseq()

align_map_xcor_spr_pspr()

spp_idr()



// functions
void read_param_tf_chipseq() {

	// read parameters
	if ( conf_file_exists() ) {

		// peak calling (phantompeakqualtools: run_spp.R)
		if ( conf.hasKey("NPEAK") ) 		NPEAK 		= parse_int( conf{ "NPEAK" } )
		if ( conf.hasKey("DUPE_REMOVED") ) 	DUPE_REMOVED	= parse_bool( conf{ "DUPE_REMOVED"} )
				RUN_SPP 		= DUPE_REMOVED ? "run_spp_nodups.R" : "run_spp.R"

		// IDR
		if ( conf.hasKey("IDR_THRESH") ) 	IDR_THRESH	= parse_real( conf{ "IDR_THRESH"} )
	}

	print("NPEAK = $NPEAK\n");
	print("DUPE_REMOVED = $DUPE_REMOVED\n");
	print("IDR_THRESH = $IDR_THRESH\n");
}

void spp_idr() {
	
	if ( QC_ONLY ) return

	print( "\nSPP and IDR...\n" );

	// SPP

	FRAGLEN := get_fraglen( 0, 1 ) // get it from rep1
	print("FRAGLEN for spp: $FRAGLEN \n")
	
	// prepare for tagAlign files
	fastqs_Rep1 	:= get_fastqs( 0, 1 )
	fastqs_Rep2 	:= get_fastqs( 0, 2 ) // check if rep2 doesn't exist
	suffix_PE 		:= ".filt.srt.nodup.PE2SE.tagAlign.gz"
	suffix_SE 		:= ".filt.nodup.srt.SE.tagAlign.gz"
	suffix 			:= fastqs_Rep1.size()==2 ? suffix_PE : suffix_SE
	suffix_PSR_PE 	:= ".filt.nodup.PE2SE"
	suffix_PSR_SE 	:= ".filt.nodup.SE"
	suffix_PSR 		:= fastqs_Rep1.size()==2 ? suffix_PSR_PE : suffix_PSR_SE

	DATASET_PREFIX := get_ofprefix( 0 )
	
	REP1_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix
	REP2_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix
	POOLED_TA_FILE :="$DATASET_PREFIX"+"_Rep0.tagAlign.gz"
	REP1_PR1_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix_PSR + ".pr1.tagAlign.gz"
	REP1_PR2_TA_FILE :="$DATASET_PREFIX"+"_Rep1" + suffix_PSR + ".pr2.tagAlign.gz"
	REP2_PR1_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix_PSR + ".pr1.tagAlign.gz"
	REP2_PR2_TA_FILE :="$DATASET_PREFIX"+"_Rep2" + suffix_PSR + ".pr2.tagAlign.gz"
	PPR1_TA_FILE :="$DATASET_PREFIX"+"_Rep0.pr1.tagAlign.gz"
	PPR2_TA_FILE :="$DATASET_PREFIX"+"_Rep0.pr2.tagAlign.gz"

	ctl_fastqs_Rep1 	:= get_fastqs( 1, 1 )
	ctl_fastqs_Rep2 	:= get_fastqs( 1, 2 ) // check if rep2 doesn't exist
	ctl_suffix_PE 		:= ".filt.srt.nodup.PE2SE.tagAlign.gz"
	ctl_suffix_SE 		:= ".filt.nodup.srt.SE.tagAlign.gz"
	ctl_suffix 			:= ctl_fastqs_Rep1.size()==2 ? ctl_suffix_PE : ctl_suffix_SE
	ctl_suffix_PSR_PE 	:= ".filt.nodup.PE2SE"
	ctl_suffix_PSR_SE 	:= ".filt.nodup.SE"
	ctl_suffix_PSR 		:= ctl_fastqs_Rep1.size()==2 ? ctl_suffix_PSR_PE : ctl_suffix_PSR_SE

	CTL_DATASET_PREFIX := get_ofprefix( 1 )

	CTL_REP1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix
	CTL_REP2_TA_FILE := ctl_fastqs_Rep2.size()>0 ? "$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix : CTL_REP1_TA_FILE
	CTL_POOLED_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.tagAlign.gz"
	CTL_REP1_PR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix_PSR + ".pr1.tagAlign.gz"
	CTL_REP1_PR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep1" + ctl_suffix_PSR + ".pr2.tagAlign.gz"
	CTL_REP2_PR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix_PSR + ".pr1.tagAlign.gz"
	CTL_REP2_PR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep2" + ctl_suffix_PSR + ".pr2.tagAlign.gz"
	CTL_PPR1_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.pr1.tagAlign.gz"
	CTL_PPR2_TA_FILE :="$CTL_DATASET_PREFIX"+"_Rep0.pr2.tagAlign.gz"

	PEAK_OUTPUT_DIR := OUTPUT_DIR + "/peaks"
	PEAK_OUTPUT_DIR.mkdir() 

	///////////////////////////////// SPP

	// cc score
	PEAK_REP1_CCSCORE := PEAK_OUTPUT_DIR + "/" + REP1_TA_FILE.baseName() + ".ccscores"
	PEAK_REP2_CCSCORE := PEAK_OUTPUT_DIR + "/" + REP2_TA_FILE.baseName() + ".ccscores"
	PEAK_POOLED_CCSCORE := PEAK_OUTPUT_DIR + "/" + POOLED_TA_FILE.baseName() + ".ccscores"
	PEAK_REP1_PR1_CCSCORE := PEAK_OUTPUT_DIR + "/" + REP1_PR1_TA_FILE.baseName() + ".ccscores"
	PEAK_REP1_PR2_CCSCORE := PEAK_OUTPUT_DIR + "/" + REP1_PR2_TA_FILE.baseName() + ".ccscores"
	PEAK_REP2_PR1_CCSCORE := PEAK_OUTPUT_DIR + "/" + REP2_PR1_TA_FILE.baseName() + ".ccscores"
	PEAK_REP2_PR2_CCSCORE := PEAK_OUTPUT_DIR + "/" + REP2_PR2_TA_FILE.baseName() + ".ccscores"
	PEAK_PPR1_CCSCORE := PEAK_OUTPUT_DIR + "/" + PPR1_TA_FILE.baseName() + ".ccscores"
	PEAK_PPR2_CCSCORE := PEAK_OUTPUT_DIR + "/" + PPR2_TA_FILE.baseName() + ".ccscores"

	// narrow peak
 	REP1_PEAK_FILE		:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP1_TA_FILE, CTL_REP1_TA_FILE, "narrowPeak" )
 	REP2_PEAK_FILE 		:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP2_TA_FILE, CTL_REP2_TA_FILE, "narrowPeak" )
 	POOLED_PEAK_FILE 	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, POOLED_TA_FILE, CTL_POOLED_TA_FILE, "narrowPeak" )
 	REP1_PR1_PEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, "narrowPeak" )
 	REP1_PR2_PEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, "narrowPeak" )
	REP2_PR1_PEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, "narrowPeak" )
	REP2_PR2_PEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, "narrowPeak" )
	PPR1_PEAK_FILE		:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, PPR1_TA_FILE, CTL_PPR1_TA_FILE, "narrowPeak" )
	PPR2_PEAK_FILE		:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, PPR2_TA_FILE, CTL_PPR2_TA_FILE, "narrowPeak" )

	// region peak
 	REP1_RPEAK_FILE 	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP1_TA_FILE, CTL_REP1_TA_FILE, "regionPeak" )
 	REP2_RPEAK_FILE 	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP2_TA_FILE, CTL_REP2_TA_FILE, "regionPeak" )
 	POOLED_RPEAK_FILE 	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, POOLED_TA_FILE, CTL_POOLED_TA_FILE, "regionPeak" )
 	REP1_PR1_RPEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, "regionPeak" )
 	REP1_PR2_RPEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, "regionPeak" )
	REP2_PR1_RPEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, "regionPeak" )
	REP2_PR2_RPEAK_FILE	:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, "regionPeak" )
	PPR1_RPEAK_FILE		:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, PPR1_TA_FILE, CTL_PPR1_TA_FILE, "regionPeak" )
	PPR2_RPEAK_FILE		:= get_spp_out_peak_filename( PEAK_OUTPUT_DIR, PPR2_TA_FILE, CTL_PPR2_TA_FILE, "regionPeak" )

	run_spp( "Rep1", PEAK_OUTPUT_DIR, 		REP1_TA_FILE, CTL_REP1_TA_FILE, REP1_PEAK_FILE, REP1_RPEAK_FILE, PEAK_REP1_CCSCORE, FRAGLEN )
	run_spp( "Rep2", PEAK_OUTPUT_DIR, 		REP2_TA_FILE, CTL_REP2_TA_FILE, REP2_PEAK_FILE, REP2_RPEAK_FILE, PEAK_REP2_CCSCORE, FRAGLEN )
	run_spp( "Pooled", PEAK_OUTPUT_DIR, 	POOLED_TA_FILE, CTL_POOLED_TA_FILE, POOLED_PEAK_FILE, POOLED_RPEAK_FILE, PEAK_POOLED_CCSCORE, FRAGLEN )
	run_spp( "Rep1_PR1", PEAK_OUTPUT_DIR, 	REP1_PR1_TA_FILE, CTL_REP1_PR1_TA_FILE, REP1_PR1_PEAK_FILE, REP1_PR1_RPEAK_FILE, PEAK_REP1_PR1_CCSCORE, FRAGLEN )
	run_spp( "Rep1_PR2", PEAK_OUTPUT_DIR, 	REP1_PR2_TA_FILE, CTL_REP1_PR2_TA_FILE, REP1_PR2_PEAK_FILE, REP1_PR2_RPEAK_FILE, PEAK_REP1_PR2_CCSCORE, FRAGLEN )
	run_spp( "Rep2_PR1", PEAK_OUTPUT_DIR, 	REP2_PR1_TA_FILE, CTL_REP2_PR1_TA_FILE, REP2_PR1_PEAK_FILE, REP2_PR1_RPEAK_FILE, PEAK_REP2_PR1_CCSCORE, FRAGLEN )
	run_spp( "Rep2_PR2", PEAK_OUTPUT_DIR, 	REP2_PR2_TA_FILE, CTL_REP2_PR2_TA_FILE, REP2_PR2_PEAK_FILE, REP2_PR2_RPEAK_FILE, PEAK_REP2_PR2_CCSCORE, FRAGLEN )
	run_spp( "PPR1", PEAK_OUTPUT_DIR, 		PPR1_TA_FILE, CTL_PPR1_TA_FILE, PPR1_PEAK_FILE, PPR1_RPEAK_FILE, PEAK_PPR1_CCSCORE, FRAGLEN )
	run_spp( "PPR2", PEAK_OUTPUT_DIR, 		PPR2_TA_FILE, CTL_PPR2_TA_FILE, PPR2_PEAK_FILE, PPR2_RPEAK_FILE, PEAK_PPR2_CCSCORE, FRAGLEN )

	wait

	///////////////////////////////// IDR

	run_idr( "Rep1_vs_Rep2", PEAK_OUTPUT_DIR, 			REP1_PEAK_FILE, REP2_PEAK_FILE, POOLED_PEAK_FILE ) // (1) or 4a
	run_idr( "PPR1_vs_PPR2", PEAK_OUTPUT_DIR, 			PPR1_PEAK_FILE, PPR2_PEAK_FILE, POOLED_PEAK_FILE ) // (2) or 4c
	run_idr( "Rep1_PR1_vs_Rep1_PR2", PEAK_OUTPUT_DIR, 	REP1_PR1_PEAK_FILE, REP1_PR2_PEAK_FILE, REP1_PEAK_FILE ) // (3) or 4b-1
	run_idr( "Rep2_PR1_vs_Rep2_PR2", PEAK_OUTPUT_DIR, 	REP2_PR1_PEAK_FILE, REP2_PR2_PEAK_FILE, REP2_PEAK_FILE ) // (4) or 4b-2

	wait
}

string get_spp_out_peak_filename( string dir, string ta1, string ta2, string type ) {

	return dir + "/" \
 			+ rm_str_at_end( ta1.baseName(),".gz" ) \
 			+ "_VS_" + rm_str_at_end( ta2.baseName(),".gz" ) + "." + type + ".gz" \
 			
}

void run_spp( string taskname, string out_dir, string ta, string ctl_ta, string npeak, string rpeak, string ccscore, string fraglen ) {

	task( taskName := "spp " + taskname, cpus := NTHREADS_RUN_SPP, timeout := WALLTIME, mem := MEMORY * M, \
		[npeak, rpeak, ccscore] <- [ta, ctl_ta] ) {

		sys $PRELOAD

		sys Rscript $(which $RUN_SPP) -c=$ta -p=$NTHREADS_RUN_SPP -i=$ctl_ta \
			-npeak=300000 -odir=$out_dir -speak=$fraglen -savn -savr -savp -rf -out=$ccscore
	}
}

void run_idr( string taskname, string out_dir, string peak1, string peak2, string pooled ) {

	IDR_OUTPUT := "$PEAK_OUTPUT_DIR"+"/"+taskname+".IDR"
	task( taskName := "IDR " + taskname, cpus := NTHREADS, timeout := WALLTIME, mem := MEMORY * M, \
		IDR_OUTPUT <- [peak1, peak2, pooled] ) { // --use-old-output-format 

		sys $PRELOAD

		sys idr --samples $peak1 $peak2 --peak-list $pooled --input-file-type narrowPeak \
			--output-file $IDR_OUTPUT --plot --idr-threshold $IDR_THRESH

		sys echo "Number of peaks ($taskname): $(cat $IDR_OUTPUT | wc -l)"
	}
}



