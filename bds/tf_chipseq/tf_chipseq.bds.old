#!/usr/bin/env bds

// read config.
string{} conf = config("conf.txt")

// general
PREFIX := conf{ "PREFIX" }.trim()
PREFIXPATH := ppwd+"/"+PREFIX

TMPDIR := conf{ "TMPDIR" }.trim()

// bwa alignment
NTHREADSBWA := conf{ "NTHREADS_BWA" }.parseInt()
BWAINDEXNAME := conf{ "BWA_INDEX_NAME" }.trim()
BWAPARAM := conf{ "BWA_PARAM" }.trim()

// dupe remover
MARKDUP := conf{ "MARKDUP" }.trim()
MAPQTHRESH := conf{ "MAPQ_THRESH" }.parseInt()

// peak calling
NTHREADSR := conf{ "NTHREADS_R" }.parseInt()
RSCRIPT := conf{ "RSCRIPT" }.trim()
NREADS := conf{ "NREADS" }.parseInt()
NPEAK := conf{ "NPEAK" }.parseInt()
SPEAK := conf{ "SPEAK" }.parseInt()
NREADSPERMILLION := NREADS/1000000

// input fastq data
PAIREDEND := conf{ "PAIRED_END" }.parseBool()

INPUTFASTQREP1PE1 := conf{ "INPUT_FASTQ_REP1_PE1" }.trim()
INPUTFASTQREP2PE1 := conf{ "INPUT_FASTQ_REP2_PE1" }.trim()

if ( INPUTFASTQREP1PE1.indexOf("/")<0 ) INPUTFASTQREP1PE1 = ppwd+"/"+INPUTFASTQREP1PE1
if ( INPUTFASTQREP2PE1.indexOf("/")<0 ) INPUTFASTQREP2PE1 = ppwd+"/"+INPUTFASTQREP2PE1

string INPUTFASTQREP1PE2
string INPUTFASTQREP2PE2

if ( PAIREDEND ) {
	INPUTFASTQREP1PE2 = conf{ "INPUT_FASTQ_REP1_PE2" }.trim()
	INPUTFASTQREP2PE2 = conf{ "INPUT_FASTQ_REP2_PE2" }.trim()

	if ( INPUTFASTQREP1PE2.indexOf("/")<0 ) INPUTFASTQREP1PE2 = ppwd+"/"+INPUTFASTQREP1PE2
	if ( INPUTFASTQREP2PE2.indexOf("/")<0 ) INPUTFASTQREP2PE2 = ppwd+"/"+INPUTFASTQREP2PE2
}

// read control fastq data
NUMCTL := conf{ "NUM_CTL" }.parseInt()

INPUTFASTQCTLREP1PE1 := conf{ "INPUT_FASTQ_CTL_REP1_PE1" }.trim()
INPUTFASTQCTLREP2PE1 := conf{ "INPUT_FASTQ_CTL_REP2_PE1" }.trim()

if ( INPUTFASTQCTLREP1PE1.indexOf("/")<0 ) INPUTFASTQCTLREP1PE1 = ppwd+"/"+INPUTFASTQCTLREP1PE1
if ( INPUTFASTQCTLREP2PE1.indexOf("/")<0 ) INPUTFASTQCTLREP2PE1 = ppwd+"/"+INPUTFASTQCTLREP2PE1

string INPUTFASTQCTLREP1PE2
string INPUTFASTQCTLREP2PE2

if ( PAIREDEND ) {
	INPUTFASTQCTLREP1PE2 = conf{ "INPUT_FASTQ_CTL_REP1_PE2" }.trim()
	INPUTFASTQCTLREP2PE2 = conf{ "INPUT_FASTQ_CTL_REP2_PE2" }.trim()

	if ( INPUTFASTQCTLREP1PE2.indexOf("/")<0 ) INPUTFASTQCTLREP1PE2 = ppwd+"/"+INPUTFASTQCTLREP1PE2
	if ( INPUTFASTQCTLREP2PE2.indexOf("/")<0 ) INPUTFASTQCTLREP2PE2 = ppwd+"/"+INPUTFASTQCTLREP2PE2
}

// print conf info

print("PREFIX :"+PREFIX+"\n")
print("TMPDIR :"+TMPDIR+"\n")
print("NTHREADSBWA :"+NTHREADSBWA+"\n")
print("BWAINDEXNAME :"+BWAINDEXNAME+"\n")
print("BWAPARAM :"+BWAPARAM+"\n")
print("MARKDUP :"+MARKDUP+"\n")
print("MAPQTHRESH :"+MAPQTHRESH+"\n")
print("NTHREADSR :"+NTHREADSR+"\n")
print("RSCRIPT :"+RSCRIPT+"\n")
print("NREADS :"+NREADS+"\n")
print("NPEAK :"+NPEAK+"\n")
print("SPEAK :"+SPEAK+"\n")
print("PAIREDEND :"+PAIREDEND+"\n")
print("NUMCTL :"+NUMCTL+"\n")

// tf_chipseq pipeline starts from here
print("preparing for tf chipseq pipeline\n")

// bwa and post_align

if( PAIREDEND ) {
	// bwa
	par align_bwa_PE( PREFIXPATH+"_Rep1", INPUTFASTQREP1PE1, INPUTFASTQREP1PE2 )
	par align_bwa_PE( PREFIXPATH+"_Rep2", INPUTFASTQREP2PE1, INPUTFASTQREP2PE2 )

	wait

	// post_align
	par post_align_filt_PE( PREFIXPATH+"_Rep1" )
	par post_align_filt_PE( PREFIXPATH+"_Rep2" )
}
else {

}

wait

exit 0

// functions

string[] align_bwa_PE( string prefix, string fastqPE1, string fastqPE2 ) {
	string OFPREFIX = prefix

	string FASTQFILE1=fastqPE1
	string FASTQFILE2=fastqPE2

	string SAIFILE1="$OFPREFIX_1.sai"
	string SAIFILE2="$OFPREFIX_2.sai"

	string RAWSAMFILE="$OFPREFIX.raw.sam.gz"

	string RAWBAMPREFIX="$OFPREFIX.raw.srt"
	string RAWBAMFILE="$RAWBAMPREFIX.bam" //# To be stored                                                                                                                          
	string BADCIGARFILE="$TMPDIR/badReads.$OFPREFIX.tmp"
	string RAWBAMFILEMAPSTATS="$RAWBAMPREFIX.flagstat.qc" //# QC File

	// run for outputs

	dep( SAIFILE1 <- FASTQFILE1, cpus := NTHREADSBWA ) {
			sys bwa aln $BWAPARAM -t $NTHREADSBWA $BWAINDEXNAME $FASTQFILE1 > $SAIFILE1
	}

	dep( SAIFILE2 <- FASTQFILE2, cpus := NTHREADSBWA ) {
			sys bwa aln $BWAPARAM -t $NTHREADSBWA $BWAINDEXNAME $FASTQFILE2 > $SAIFILE2
	}

	wait

	dep( RAWSAMFILE <- [SAIFILE1, SAIFILE2] ) {
		sys bwa sampe $BWAINDEXNAME $SAIFILE1 $SAIFILE2 $FASTQFILE1 $FASTQFILE2| gzip -c > $RAWSAMFILE
		sys rm $SAIFILE1 $SAIFILE2
	}

	dep( [RAWBAMFILE, RAWBAMFILEMAPSTATS] <- RAWSAMFILE ) {
		//# ==============================================================                                         
		//# Remove read pairs with bad CIGAR strings and sort by position                                                                
		//# ==============================================================
	
		//# Find bad CIGAR read names                                                                                                                                                  
		sys	zcat $RAWSAMFILE | awk 'BEGIN {FS="\t" ; OFS="\t"} ! /^@/ && \$6!="*" { cigar=\$6; gsub("[0-9]+D","",cigar); n = split(cigar,vals,"[A-Z]"); s = 0; for (i=1;i<=n;i++) s=s+vals[i]; seqlen=length(\$10) ; if (s!=seqlen) print \$1"t"; }' | sort | uniq > $BADCIGARFILE
		
		//# Remove bad CIGAR read pairs
		sys if [ \$(cat $BADCIGARFILE | wc -l) -gt 0 ]; \
			then \
			    zcat $RAWSAMFILE | grep -v -F -f $BADCIGARFILE | samtools view -Su - | samtools sort - $RAWBAMPREFIX; \
			else \
			    samtools view -Su $RAWSAMFILE | samtools sort - $RAWBAMPREFIX; \
			fi

		sys rm $BADCIGARFILE $RAWSAMFILE
		sys samtools flagstat $RAWBAMFILE > $RAWBAMFILEMAPSTATS
	}

	goal( RAWBAMFILE )
		
	string[] ret = ["",""]
	ret[0] = RAWBAMFILE
	ret[1] = RAWBAMFILEMAPSTATS

	return ret
}

string[] post_align_filt_PE( string prefix ) {
	string OFPREFIX = prefix

	string FILTBAMPREFIX="$OFPREFIX.filt.srt"
	string FILTBAMFILE="$FILTBAMPREFIX.bam"

	string TMPFILTBAMPREFIX="tmp.$FILTBAMPREFIX.nmsrt"
	string TMPFILTBAMFILE="$TMPFILTBAMPREFIX.bam"
	
	string TMPFILTBAMFILE2="$FILTBAMPREFIX.dupmark.bam"
	string DUPFILEQC="$FILTBAMPREFIX.dup.qc"

	string FINALBAMPREFIX="$OFPREFIX.filt.srt.nodup"
	string FINALBAMFILE="$FINALBAMPREFIX.bam" //# To be stored
	string FINALBAMINDEXFILE="$FINALBAMPREFIX.bai"
	string FINALBAMFILEMAPSTATS="$FINALBAMPREFIX.flagstat.qc" //# QC file
	string FINALNMSRTBAMPREFIX="$OFPREFIX.filt.nmsrt.nodup"
	string FINALNMSRTBAMFILE="$FINALNMSRTBAMPREFIX.bam" //# To be stored

	string PBCFILEQC="$FINALBAMPREFIX.pbc.qc"

	dep( FILTBAMFILE <- RAWBAMFILE ) {
		//# =============================
		//# Remove  unmapped, mate unmapped
		//# not primary alignment, reads failing platform
		//# Remove low MAPQ reads
		//# Only keep properly paired reads
		//# Obtain name sorted BAM file
		//# ==================
		sys "samtools view -F 1804 -f 2 -q $MAPQTHRESH -u $RAWBAMFILE | samtools sort -n - $TMPFILTBAMPREFIX # Will produce name sorted BAM"
		
		//# Remove orphan reads (pair was removed)
		//# and read pairs mapping to different chromosomes
		//# Obtain position sorted BAM
		
		sys "samtools fixmate -r $TMPFILTBAMFILE - | samtools view -F 1804 -f 2 -u - | samtools sort - $FILTBAMPREFIX # Will produce coordinate sorted BAM"
		sys "rm $TMPFILTBAMFILE"

		//# =============
		//# Mark duplicates
		//# =============

		sys "java -Xmx4G -jar $MARKDUP INPUT=$FILTBAMFILE OUTPUT=$TMPFILTBAMFILE2 METRICSFILE=$DUPFILEQC VALIDATIONSTRINGENCY=LENIENT ASSUMESORTED=true REMOVEDUPLICATES=false"
		sys "mv $TMPFILTBAMFILE2 $FILTBAMFILE"
	}
	
	dep( [FINALBAMFILE, FINALBAMINDEXFILE, FINALBAMFILEMAPSTATS, PBCFILEQC] <- FILTBAMFILE ) {	
		//# ============================
		//# Remove duplicates
		//# Index final position sorted BAM
		//# Create final name sorted BAM
		//# ============================

		sys "samtools view -F 1804 -f 2 -b $FILTBAMFILE > $FINALBAMFILE"
		sys "samtools sort -n $FINALBAMFILE $FINALNMSRTBAMPREFIX"
	
		//# Index Final BAM file
		sys "samtools index $FINALBAMFILE $FINALBAMINDEXFILE"
		sys "samtools flagstat $FINALBAMFILE > $FINALBAMFILEMAPSTATS"

		//# =============================
		//# Compute library complexity
		//# =============================
		//# Sort by name
		//# convert to bedPE and obtain fragment coordinates
		//# sort by position and strand
		//# Obtain unique count statistics
	
		//# TotalReadPairs [tab] DistinctReadPairs [tab] OneReadPair [tab] TwoReadPairs [tab] NRF=Distinct/Total [tab] PBC1=OnePair/Distinct [tab] PBC2=OnePair/TwoPair

		sys samtools sort -no $FILTBAMFILE - | bamToBed -bedpe -i stdin | awk 'BEGIN{OFS="\t"}{print \$1,\$2,\$4,\$6,\$9,\$10}' | grep -v 'chrM' | sort | uniq -c | awk 'BEGIN{mt=0;m0=0;m1=0;m2=0} (\$1==1){m1=m1+1} (\$1==2){m2=m2+1} {m0=m0+1} {mt=mt+\$1} END{printf "%d\t%d\t%d\t%d\t%f\t%f\t%f\n",mt,m0,m1,m2,m0/mt,m1/m0,m1/m2}' > $PBCFILEQC

		sys rm $FILTBAMFILE
	}

	goal( PBCFILEQC ) 

	
}
